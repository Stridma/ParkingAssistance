
finalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a8c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00002a8c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000178  2000043c  00002ec8  0002043c  2**2
                  ALLOC
  3 .stack        00002004  200005b4  00003040  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY
  6 .debug_info   00014d57  00000000  00000000  000204bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001862  00000000  00000000  00035214  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004ccb  00000000  00000000  00036a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000520  00000000  00000000  0003b741  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005f8  00000000  00000000  0003bc61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013938  00000000  00000000  0003c259  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000055b5  00000000  00000000  0004fb91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00079d9a  00000000  00000000  00055146  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000010f4  00000000  00000000  000ceee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 25 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .%. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 f1 0d 00 00     ................
      3c:	35 0e 00 00 15 01 00 00 15 01 00 00 15 01 00 00     5...............
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000043c 	.word	0x2000043c
      d4:	00000000 	.word	0x00000000
      d8:	00002a8c 	.word	0x00002a8c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000440 	.word	0x20000440
     108:	00002a8c 	.word	0x00002a8c
     10c:	00002a8c 	.word	0x00002a8c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00002a8c 	.word	0x00002a8c
     1c8:	20000000 	.word	0x20000000
     1cc:	2000043c 	.word	0x2000043c
     1d0:	20000004 	.word	0x20000004
     1d4:	2000043c 	.word	0x2000043c
     1d8:	200005b4 	.word	0x200005b4
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	00002819 	.word	0x00002819
     1f8:	0000045d 	.word	0x0000045d

000001fc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     1fc:	4a01      	ldr	r2, [pc, #4]	; (204 <SystemInit+0x8>)
     1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <SystemInit+0xc>)
     200:	601a      	str	r2, [r3, #0]
	return;
}
     202:	4770      	bx	lr
     204:	000f4240 	.word	0x000f4240
     208:	20000000 	.word	0x20000000

0000020c <InitDigOut>:

/* Funcion para configurar un puerto como salida recibe dos parametros:  group: espera un 0 o 1 que indique el puerto, y pin: espera un valor entero 
que indique el pin en el puerto*/
void InitDigOut(_Bool group, uint8_t pin){
	
	PORT->Group[(uint8_t)group].PINCFG[pin].reg = 0x00;
     20c:	01c0      	lsls	r0, r0, #7
     20e:	4b05      	ldr	r3, [pc, #20]	; (224 <InitDigOut+0x18>)
     210:	469c      	mov	ip, r3
     212:	4460      	add	r0, ip
     214:	1843      	adds	r3, r0, r1
     216:	3340      	adds	r3, #64	; 0x40
     218:	2200      	movs	r2, #0
     21a:	701a      	strb	r2, [r3, #0]
	PORT->Group[(uint8_t)group].DIRSET.reg = (1 << pin) ;
     21c:	2301      	movs	r3, #1
     21e:	408b      	lsls	r3, r1
     220:	6083      	str	r3, [r0, #8]
}
     222:	4770      	bx	lr
     224:	41004400 	.word	0x41004400

00000228 <InitDigIn>:

void InitDigIn(_Bool group, uint8_t pin)
{
	/*Dado un puerto y un numero de pin, del 0 al 31 para el puerto A(0), y ...AGREGAR PINES PUERTO B 
	los configura como entrada, es decir activa INEN,bit1, y PULLEN, bit2, y con el registro DIRCLR se activa la direccion como entrada*/
	PORT->Group[(uint8_t)group].PINCFG[pin].reg=0x03;
     228:	01c0      	lsls	r0, r0, #7
     22a:	4b06      	ldr	r3, [pc, #24]	; (244 <InitDigIn+0x1c>)
     22c:	469c      	mov	ip, r3
     22e:	4460      	add	r0, ip
     230:	1843      	adds	r3, r0, r1
     232:	3340      	adds	r3, #64	; 0x40
     234:	2203      	movs	r2, #3
     236:	701a      	strb	r2, [r3, #0]
	PORT->Group[(uint8_t)group].DIRCLR.reg= (1<<pin);
     238:	2301      	movs	r3, #1
     23a:	408b      	lsls	r3, r1
     23c:	6043      	str	r3, [r0, #4]
	
	//habilita SAMPLING
	PORT->Group[(uint8_t)group].CTRL.reg=(1<<pin);
     23e:	6243      	str	r3, [r0, #36]	; 0x24
}
     240:	4770      	bx	lr
     242:	46c0      	nop			; (mov r8, r8)
     244:	41004400 	.word	0x41004400

00000248 <readDigIn>:
	
uint8_t readDigIn(_Bool group, uint8_t pin)
{
	uint32_t mask= (1<<pin);
	if((PORT->Group[(uint8_t)group].IN.reg&mask)==0)
     248:	01c0      	lsls	r0, r0, #7
     24a:	4b05      	ldr	r3, [pc, #20]	; (260 <readDigIn+0x18>)
     24c:	469c      	mov	ip, r3
     24e:	4460      	add	r0, ip
     250:	6a00      	ldr	r0, [r0, #32]
	uint32_t mask= (1<<pin);
     252:	2301      	movs	r3, #1
     254:	408b      	lsls	r3, r1
	if((PORT->Group[(uint8_t)group].IN.reg&mask)==0)
     256:	4018      	ands	r0, r3
     258:	1e43      	subs	r3, r0, #1
     25a:	4198      	sbcs	r0, r3
     25c:	b2c0      	uxtb	r0, r0
		return 0;
	else
	return 1;
     25e:	4770      	bx	lr
     260:	41004400 	.word	0x41004400

00000264 <initializeTimer>:
uint8_t dataSize = 0x08;
uint8_t dataToSend[8] = {0,0,0,0,0,0,0,0};

/* Method to initialize the timer to make set the interrupt flag every 10 microseconds */
void initializeTimer(){
	PORT->Group[0].PINCFG[PIN_PA27].reg = 0x00;	        // disable peripheral functions at PIN27
     264:	4b0c      	ldr	r3, [pc, #48]	; (298 <initializeTimer+0x34>)
     266:	2200      	movs	r2, #0
     268:	215b      	movs	r1, #91	; 0x5b
     26a:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].DIRSET.reg=0x08000400;				// Pin 27 configured as output
     26c:	490b      	ldr	r1, [pc, #44]	; (29c <initializeTimer+0x38>)
     26e:	6099      	str	r1, [r3, #8]
	PORT->Group[0].OUTTGL.reg = 0x08000400;            	// Output a 0 to Pin 27
     270:	61d9      	str	r1, [r3, #28]
	
	/* APBCMASK enable timer 3 */
	PM->APBCMASK.reg |= PM_APBCMASK_TC3;
     272:	490b      	ldr	r1, [pc, #44]	; (2a0 <initializeTimer+0x3c>)
     274:	6a08      	ldr	r0, [r1, #32]
     276:	2380      	movs	r3, #128	; 0x80
     278:	011b      	lsls	r3, r3, #4
     27a:	4303      	orrs	r3, r0
     27c:	620b      	str	r3, [r1, #32]
	
	/*GCLK configuration for timer TC3*/
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(GCLK_CLKCTRL_ID_TCC2_TC3) | GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
     27e:	4909      	ldr	r1, [pc, #36]	; (2a4 <initializeTimer+0x40>)
     280:	4b09      	ldr	r3, [pc, #36]	; (2a8 <initializeTimer+0x44>)
     282:	8059      	strh	r1, [r3, #2]

	//TC3->COUNT16.CTRLA.reg = TC_CTRLA_PRESCSYNC(TC_CTRLA_PRESCSYNC_RESYNC) | TC_CTRLA_MODE(TC_CTRLA_MODE_COUNT16) | TC_CTRLA_PRESCALER(TC_CTRLA_PRESCALER_DIV1);
	
	TC3->COUNT16.CC[0].reg = TC_COUNT16_CC_CC(0x0050);
     284:	4b09      	ldr	r3, [pc, #36]	; (2ac <initializeTimer+0x48>)
     286:	2150      	movs	r1, #80	; 0x50
     288:	8319      	strh	r1, [r3, #24]
	
	TC3->COUNT16.COUNT.reg = TC_COUNT16_COUNT_COUNT(0x0000);
     28a:	821a      	strh	r2, [r3, #16]
	
	TC3->COUNT16.CTRLA.reg = TC_CTRLA_PRESCSYNC_RESYNC | TC_CTRLA_WAVEGEN_MFRQ | TC_CTRLA_MODE_COUNT16 | TC_CTRLA_PRESCALER_DIV1 | TC_CTRLA_ENABLE;
     28c:	4a08      	ldr	r2, [pc, #32]	; (2b0 <initializeTimer+0x4c>)
     28e:	801a      	strh	r2, [r3, #0]
	TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1; // Clear flag
     290:	2220      	movs	r2, #32
     292:	739a      	strb	r2, [r3, #14]
}
     294:	4770      	bx	lr
     296:	46c0      	nop			; (mov r8, r8)
     298:	41004400 	.word	0x41004400
     29c:	08000400 	.word	0x08000400
     2a0:	40000400 	.word	0x40000400
     2a4:	0000401b 	.word	0x0000401b
     2a8:	40000c00 	.word	0x40000c00
     2ac:	42002c00 	.word	0x42002c00
     2b0:	00002022 	.word	0x00002022

000002b4 <measureAverageDistance>:

/* Method to measure the distance for the ultrasonic sensor by averaging 4 measurements during a time interval of exactly 0.2 seconds */
uint32_t measureAverageDistance(){
     2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     2b6:	46de      	mov	lr, fp
     2b8:	4657      	mov	r7, sl
     2ba:	464e      	mov	r6, r9
     2bc:	4645      	mov	r5, r8
     2be:	b5e0      	push	{r5, r6, r7, lr}
     2c0:	b087      	sub	sp, #28
     2c2:	2303      	movs	r3, #3
     2c4:	469b      	mov	fp, r3
     2c6:	2300      	movs	r3, #0
     2c8:	9301      	str	r3, [sp, #4]
	uint32_t distance = 0; //Distance to return
	uint32_t nbrOfCycles = 3; //How many measurements to average from
	for (int i = 0; i<nbrOfCycles; i++){
		uint32_t microseconds = 0; //Keep tracks of the time in microseconds
		uint32_t max = 10+microseconds; //Keep tracks of when to stop a loop
		PORT->Group[0].OUTCLR.reg = (1<<6); //Before trigging the ultrasonic sensor, make sure it's quite for a while (let's say 10 micro seconds)
     2ca:	4b3f      	ldr	r3, [pc, #252]	; (3c8 <measureAverageDistance+0x114>)
     2cc:	4699      	mov	r9, r3
     2ce:	2340      	movs	r3, #64	; 0x40
     2d0:	469a      	mov	sl, r3
     2d2:	9305      	str	r3, [sp, #20]
		while (microseconds < max) { 
			while(((TC3->COUNT16.INTFLAG.reg)&(TC_INTFLAG_MC1)) != TC_INTFLAG_MC1 ) {
     2d4:	4d3d      	ldr	r5, [pc, #244]	; (3cc <measureAverageDistance+0x118>)
     2d6:	2420      	movs	r4, #32
			PORT->Group[0].OUTTGL.reg = 0x08000400;           // Output a 0 to Pin 27
			TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;			// Clear flag
			if (microseconds > (24000+start)){break;}
		};
		/* The echo signal is 0 again, we know how long the pulse was in microseconds. Translate to a distance */
		distance += (microseconds-start)*0.034/2; /* distance = time*speed of sound / 2; speed of sound= 0.034 cm/microsecond, and divide by 2 since we have to go back and forth */
     2d8:	465b      	mov	r3, fp
     2da:	9304      	str	r3, [sp, #16]
     2dc:	e02b      	b.n	336 <measureAverageDistance+0x82>
     2de:	1bf0      	subs	r0, r6, r7
     2e0:	4b3b      	ldr	r3, [pc, #236]	; (3d0 <measureAverageDistance+0x11c>)
     2e2:	4698      	mov	r8, r3
     2e4:	4798      	blx	r3
     2e6:	4b3b      	ldr	r3, [pc, #236]	; (3d4 <measureAverageDistance+0x120>)
     2e8:	469b      	mov	fp, r3
     2ea:	4a3b      	ldr	r2, [pc, #236]	; (3d8 <measureAverageDistance+0x124>)
     2ec:	4b3b      	ldr	r3, [pc, #236]	; (3dc <measureAverageDistance+0x128>)
     2ee:	47d8      	blx	fp
     2f0:	2200      	movs	r2, #0
     2f2:	4b3b      	ldr	r3, [pc, #236]	; (3e0 <measureAverageDistance+0x12c>)
     2f4:	47d8      	blx	fp
     2f6:	9002      	str	r0, [sp, #8]
     2f8:	9103      	str	r1, [sp, #12]
     2fa:	9801      	ldr	r0, [sp, #4]
     2fc:	47c0      	blx	r8
     2fe:	0002      	movs	r2, r0
     300:	000b      	movs	r3, r1
     302:	9802      	ldr	r0, [sp, #8]
     304:	9903      	ldr	r1, [sp, #12]
     306:	4f37      	ldr	r7, [pc, #220]	; (3e4 <measureAverageDistance+0x130>)
     308:	47b8      	blx	r7
     30a:	4b37      	ldr	r3, [pc, #220]	; (3e8 <measureAverageDistance+0x134>)
     30c:	4798      	blx	r3
     30e:	9001      	str	r0, [sp, #4]
		max = (333333/nbrOfCycles)-microseconds; // Make sure it runs for exactly 0.2 seconds in total
     310:	4a36      	ldr	r2, [pc, #216]	; (3ec <measureAverageDistance+0x138>)
     312:	1b92      	subs	r2, r2, r6
		while (microseconds < max) {
     314:	4296      	cmp	r6, r2
     316:	d209      	bcs.n	32c <measureAverageDistance+0x78>
			while(((TC3->COUNT16.INTFLAG.reg)&(TC_INTFLAG_MC1)) != TC_INTFLAG_MC1 ) {

			}
			microseconds+=10;
			PORT->Group[0].OUTTGL.reg = 0x08000400;           // Output a 0 to Pin 27
     318:	4935      	ldr	r1, [pc, #212]	; (3f0 <measureAverageDistance+0x13c>)
			while(((TC3->COUNT16.INTFLAG.reg)&(TC_INTFLAG_MC1)) != TC_INTFLAG_MC1 ) {
     31a:	7bab      	ldrb	r3, [r5, #14]
     31c:	4223      	tst	r3, r4
     31e:	d0fc      	beq.n	31a <measureAverageDistance+0x66>
			microseconds+=10;
     320:	360a      	adds	r6, #10
			PORT->Group[0].OUTTGL.reg = 0x08000400;           // Output a 0 to Pin 27
     322:	464b      	mov	r3, r9
     324:	61d9      	str	r1, [r3, #28]
			TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;			// Clear flag
     326:	73ac      	strb	r4, [r5, #14]
		while (microseconds < max) {
     328:	42b2      	cmp	r2, r6
     32a:	d8f6      	bhi.n	31a <measureAverageDistance+0x66>
     32c:	9b04      	ldr	r3, [sp, #16]
     32e:	3b01      	subs	r3, #1
     330:	9304      	str	r3, [sp, #16]
	for (int i = 0; i<nbrOfCycles; i++){
     332:	2b00      	cmp	r3, #0
     334:	d03d      	beq.n	3b2 <measureAverageDistance+0xfe>
		PORT->Group[0].OUTCLR.reg = (1<<6); //Before trigging the ultrasonic sensor, make sure it's quite for a while (let's say 10 micro seconds)
     336:	464b      	mov	r3, r9
     338:	9a05      	ldr	r2, [sp, #20]
     33a:	615a      	str	r2, [r3, #20]
			while(((TC3->COUNT16.INTFLAG.reg)&(TC_INTFLAG_MC1)) != TC_INTFLAG_MC1 ) {
     33c:	7bab      	ldrb	r3, [r5, #14]
     33e:	4223      	tst	r3, r4
     340:	d0fc      	beq.n	33c <measureAverageDistance+0x88>
			PORT->Group[0].OUTTGL.reg = 0x08000400;           // Output a 0 to Pin 27
     342:	4b2b      	ldr	r3, [pc, #172]	; (3f0 <measureAverageDistance+0x13c>)
     344:	464a      	mov	r2, r9
     346:	61d3      	str	r3, [r2, #28]
			TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;			// Clear flag
     348:	73ac      	strb	r4, [r5, #14]
		PORT->Group[0].OUTSET.reg = (1<<6);
     34a:	464b      	mov	r3, r9
     34c:	4652      	mov	r2, sl
     34e:	619a      	str	r2, [r3, #24]
			while(((TC3->COUNT16.INTFLAG.reg)&(TC_INTFLAG_MC1)) != TC_INTFLAG_MC1 ) {
     350:	7bab      	ldrb	r3, [r5, #14]
     352:	4223      	tst	r3, r4
     354:	d0fc      	beq.n	350 <measureAverageDistance+0x9c>
			PORT->Group[0].OUTTGL.reg = 0x08000400;           // Output a 0 to Pin 27
     356:	4b26      	ldr	r3, [pc, #152]	; (3f0 <measureAverageDistance+0x13c>)
     358:	464a      	mov	r2, r9
     35a:	61d3      	str	r3, [r2, #28]
			TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;			// Clear flag
     35c:	73ac      	strb	r4, [r5, #14]
		PORT->Group[0].OUTCLR.reg = (1<<6);
     35e:	464b      	mov	r3, r9
     360:	4652      	mov	r2, sl
     362:	615a      	str	r2, [r3, #20]
		while (!readDigIn(0,7)){ 
     364:	2714      	movs	r7, #20
     366:	4e23      	ldr	r6, [pc, #140]	; (3f4 <measureAverageDistance+0x140>)
     368:	2107      	movs	r1, #7
     36a:	2000      	movs	r0, #0
     36c:	47b0      	blx	r6
     36e:	2800      	cmp	r0, #0
     370:	d10a      	bne.n	388 <measureAverageDistance+0xd4>
			while(((TC3->COUNT16.INTFLAG.reg)&(TC_INTFLAG_MC1)) != TC_INTFLAG_MC1 ) {
     372:	7bab      	ldrb	r3, [r5, #14]
     374:	4223      	tst	r3, r4
     376:	d0fc      	beq.n	372 <measureAverageDistance+0xbe>
			microseconds+=10;
     378:	370a      	adds	r7, #10
			PORT->Group[0].OUTTGL.reg = 0x08000400;           // Output a 0 to Pin 27
     37a:	4b1d      	ldr	r3, [pc, #116]	; (3f0 <measureAverageDistance+0x13c>)
     37c:	464a      	mov	r2, r9
     37e:	61d3      	str	r3, [r2, #28]
			TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;			// Clear flag
     380:	73ac      	strb	r4, [r5, #14]
			if (microseconds > 24000){break;}
     382:	4b1d      	ldr	r3, [pc, #116]	; (3f8 <measureAverageDistance+0x144>)
     384:	429f      	cmp	r7, r3
     386:	d1ef      	bne.n	368 <measureAverageDistance+0xb4>
		while (readDigIn(0,7)){
     388:	003e      	movs	r6, r7
     38a:	4b1a      	ldr	r3, [pc, #104]	; (3f4 <measureAverageDistance+0x140>)
     38c:	469b      	mov	fp, r3
     38e:	2107      	movs	r1, #7
     390:	2000      	movs	r0, #0
     392:	47d8      	blx	fp
     394:	2800      	cmp	r0, #0
     396:	d0a2      	beq.n	2de <measureAverageDistance+0x2a>
			while(((TC3->COUNT16.INTFLAG.reg)&(TC_INTFLAG_MC1)) != TC_INTFLAG_MC1 ) {
     398:	7bab      	ldrb	r3, [r5, #14]
     39a:	4223      	tst	r3, r4
     39c:	d0fc      	beq.n	398 <measureAverageDistance+0xe4>
			microseconds+=10;
     39e:	360a      	adds	r6, #10
			PORT->Group[0].OUTTGL.reg = 0x08000400;           // Output a 0 to Pin 27
     3a0:	4b13      	ldr	r3, [pc, #76]	; (3f0 <measureAverageDistance+0x13c>)
     3a2:	464a      	mov	r2, r9
     3a4:	61d3      	str	r3, [r2, #28]
			TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;			// Clear flag
     3a6:	73ac      	strb	r4, [r5, #14]
			if (microseconds > (24000+start)){break;}
     3a8:	4b14      	ldr	r3, [pc, #80]	; (3fc <measureAverageDistance+0x148>)
     3aa:	18fb      	adds	r3, r7, r3
     3ac:	429e      	cmp	r6, r3
     3ae:	d9ee      	bls.n	38e <measureAverageDistance+0xda>
     3b0:	e795      	b.n	2de <measureAverageDistance+0x2a>
		}
	}
	return distance/nbrOfCycles; //The distance is an average of the measurements made
     3b2:	2103      	movs	r1, #3
     3b4:	9801      	ldr	r0, [sp, #4]
     3b6:	4b12      	ldr	r3, [pc, #72]	; (400 <measureAverageDistance+0x14c>)
     3b8:	4798      	blx	r3
}
     3ba:	b007      	add	sp, #28
     3bc:	bc3c      	pop	{r2, r3, r4, r5}
     3be:	4690      	mov	r8, r2
     3c0:	4699      	mov	r9, r3
     3c2:	46a2      	mov	sl, r4
     3c4:	46ab      	mov	fp, r5
     3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3c8:	41004400 	.word	0x41004400
     3cc:	42002c00 	.word	0x42002c00
     3d0:	000024f1 	.word	0x000024f1
     3d4:	0000195d 	.word	0x0000195d
     3d8:	b020c49c 	.word	0xb020c49c
     3dc:	3fa16872 	.word	0x3fa16872
     3e0:	3fe00000 	.word	0x3fe00000
     3e4:	0000133d 	.word	0x0000133d
     3e8:	00001301 	.word	0x00001301
     3ec:	0001b207 	.word	0x0001b207
     3f0:	08000400 	.word	0x08000400
     3f4:	00000249 	.word	0x00000249
     3f8:	00005dca 	.word	0x00005dca
     3fc:	00005dc0 	.word	0x00005dc0
     400:	000011e9 	.word	0x000011e9

00000404 <sendDistanceOverCan>:

void sendDistanceOverCan(uint32_t distance) {
     404:	b510      	push	{r4, lr}
	/*	The biggest distance to be handled is 408 cm, and a 8 bit integer can hold numbers up to 255. 
		Therefore we pass the number in two parts, one that represents how many 256 we have (0 or 1)
		and one that represents the rest. This is done by shifting and masking */
	dataToSend[6] = (uint8_t) (distance >> 8);
     406:	4b12      	ldr	r3, [pc, #72]	; (450 <sendDistanceOverCan+0x4c>)
     408:	0a02      	lsrs	r2, r0, #8
     40a:	719a      	strb	r2, [r3, #6]
	dataToSend[7]= (uint8_t) (distance & 0x000000FF);
     40c:	71d8      	strb	r0, [r3, #7]
	if (distance < 100){
     40e:	2863      	cmp	r0, #99	; 0x63
     410:	d90e      	bls.n	430 <sendDistanceOverCan+0x2c>
		sendMsgBuf(canIDcrit, 0, dataSize, (uint8_t *) dataToSend);
	} else if (distance <400) {
     412:	2390      	movs	r3, #144	; 0x90
     414:	33ff      	adds	r3, #255	; 0xff
     416:	4298      	cmp	r0, r3
     418:	d912      	bls.n	440 <sendDistanceOverCan+0x3c>
		sendMsgBuf(canIDmedium, 0, dataSize, (uint8_t *) dataToSend);
	} else {
		dataToSend[6] = 0xFF;
     41a:	4b0d      	ldr	r3, [pc, #52]	; (450 <sendDistanceOverCan+0x4c>)
     41c:	22ff      	movs	r2, #255	; 0xff
     41e:	719a      	strb	r2, [r3, #6]
		dataToSend[7]= 0xFF;
     420:	71da      	strb	r2, [r3, #7]
		sendMsgBuf(canIDlow, 0, dataSize, (uint8_t *) dataToSend);
     422:	490c      	ldr	r1, [pc, #48]	; (454 <sendDistanceOverCan+0x50>)
     424:	780a      	ldrb	r2, [r1, #0]
     426:	88c8      	ldrh	r0, [r1, #6]
     428:	2100      	movs	r1, #0
     42a:	4c0b      	ldr	r4, [pc, #44]	; (458 <sendDistanceOverCan+0x54>)
     42c:	47a0      	blx	r4
	}
}
     42e:	bd10      	pop	{r4, pc}
		sendMsgBuf(canIDcrit, 0, dataSize, (uint8_t *) dataToSend);
     430:	4b08      	ldr	r3, [pc, #32]	; (454 <sendDistanceOverCan+0x50>)
     432:	781a      	ldrb	r2, [r3, #0]
     434:	8858      	ldrh	r0, [r3, #2]
     436:	4b06      	ldr	r3, [pc, #24]	; (450 <sendDistanceOverCan+0x4c>)
     438:	2100      	movs	r1, #0
     43a:	4c07      	ldr	r4, [pc, #28]	; (458 <sendDistanceOverCan+0x54>)
     43c:	47a0      	blx	r4
     43e:	e7f6      	b.n	42e <sendDistanceOverCan+0x2a>
		sendMsgBuf(canIDmedium, 0, dataSize, (uint8_t *) dataToSend);
     440:	4b04      	ldr	r3, [pc, #16]	; (454 <sendDistanceOverCan+0x50>)
     442:	781a      	ldrb	r2, [r3, #0]
     444:	8898      	ldrh	r0, [r3, #4]
     446:	4b02      	ldr	r3, [pc, #8]	; (450 <sendDistanceOverCan+0x4c>)
     448:	2100      	movs	r1, #0
     44a:	4c03      	ldr	r4, [pc, #12]	; (458 <sendDistanceOverCan+0x54>)
     44c:	47a0      	blx	r4
     44e:	e7ee      	b.n	42e <sendDistanceOverCan+0x2a>
     450:	20000458 	.word	0x20000458
     454:	20000004 	.word	0x20000004
     458:	00000ac5 	.word	0x00000ac5

0000045c <main>:

int main()
{
     45c:	b570      	push	{r4, r5, r6, lr}
	SystemInit();
     45e:	4b11      	ldr	r3, [pc, #68]	; (4a4 <main+0x48>)
     460:	4798      	blx	r3
	/* Switch to 8MHz clock (disable prescaler) */
	SYSCTRL->OSC8M.bit.PRESC = 0;
     462:	4a11      	ldr	r2, [pc, #68]	; (4a8 <main+0x4c>)
     464:	6a11      	ldr	r1, [r2, #32]
     466:	4b11      	ldr	r3, [pc, #68]	; (4ac <main+0x50>)
     468:	400b      	ands	r3, r1
     46a:	6213      	str	r3, [r2, #32]
	/* Initiate SPI, UART, and Can */
	initSPI();
     46c:	4b10      	ldr	r3, [pc, #64]	; (4b0 <main+0x54>)
     46e:	4798      	blx	r3
	initUART();
     470:	4b10      	ldr	r3, [pc, #64]	; (4b4 <main+0x58>)
     472:	4798      	blx	r3
	canBegin(canSlave,CAN0_SPEED);
     474:	4b10      	ldr	r3, [pc, #64]	; (4b8 <main+0x5c>)
     476:	7a18      	ldrb	r0, [r3, #8]
     478:	210f      	movs	r1, #15
     47a:	4b10      	ldr	r3, [pc, #64]	; (4bc <main+0x60>)
     47c:	4798      	blx	r3
	
	/* Initialize the pins for reading and writing to the ultrasonic sensor */
	InitDigOut(0,6); // PA06 = pin 8
     47e:	2106      	movs	r1, #6
     480:	2000      	movs	r0, #0
     482:	4b0f      	ldr	r3, [pc, #60]	; (4c0 <main+0x64>)
     484:	4798      	blx	r3
	InitDigIn(0,7); //PA07 = pin 9
     486:	2107      	movs	r1, #7
     488:	2000      	movs	r0, #0
     48a:	4b0e      	ldr	r3, [pc, #56]	; (4c4 <main+0x68>)
     48c:	4798      	blx	r3
	
	/* Initialize the timer */
	initializeTimer();
     48e:	4b0e      	ldr	r3, [pc, #56]	; (4c8 <main+0x6c>)
     490:	4798      	blx	r3
	
	while (1)
	{
		uint32_t distance = measureAverageDistance();
     492:	4e0e      	ldr	r6, [pc, #56]	; (4cc <main+0x70>)
		sendDistanceOverCan(distance);
     494:	4d0e      	ldr	r5, [pc, #56]	; (4d0 <main+0x74>)
		myprintf("HERE");
     496:	4c0f      	ldr	r4, [pc, #60]	; (4d4 <main+0x78>)
		uint32_t distance = measureAverageDistance();
     498:	47b0      	blx	r6
		sendDistanceOverCan(distance);
     49a:	47a8      	blx	r5
		myprintf("HERE");
     49c:	0020      	movs	r0, r4
     49e:	4b0e      	ldr	r3, [pc, #56]	; (4d8 <main+0x7c>)
     4a0:	4798      	blx	r3
     4a2:	e7f9      	b.n	498 <main+0x3c>
     4a4:	000001fd 	.word	0x000001fd
     4a8:	40000800 	.word	0x40000800
     4ac:	fffffcff 	.word	0xfffffcff
     4b0:	000010cd 	.word	0x000010cd
     4b4:	00001031 	.word	0x00001031
     4b8:	20000458 	.word	0x20000458
     4bc:	00000ad9 	.word	0x00000ad9
     4c0:	0000020d 	.word	0x0000020d
     4c4:	00000229 	.word	0x00000229
     4c8:	00000265 	.word	0x00000265
     4cc:	000002b5 	.word	0x000002b5
     4d0:	00000405 	.word	0x00000405
     4d4:	000029b8 	.word	0x000029b8
     4d8:	00000be1 	.word	0x00000be1

000004dc <mcp2515_reset>:


/******************* SIMPLE FUNCTIONS *******************/


void mcp2515_reset(void) {
     4dc:	b510      	push	{r4, lr}
        // Reset Instruction = 0xC0
        spiSS(device);
     4de:	4c05      	ldr	r4, [pc, #20]	; (4f4 <mcp2515_reset+0x18>)
     4e0:	7820      	ldrb	r0, [r4, #0]
     4e2:	4b05      	ldr	r3, [pc, #20]	; (4f8 <mcp2515_reset+0x1c>)
     4e4:	4798      	blx	r3
        spiSend(MCP_RESET);
     4e6:	20c0      	movs	r0, #192	; 0xc0
     4e8:	4b04      	ldr	r3, [pc, #16]	; (4fc <mcp2515_reset+0x20>)
     4ea:	4798      	blx	r3
        spiSR(device);
     4ec:	7820      	ldrb	r0, [r4, #0]
     4ee:	4b04      	ldr	r3, [pc, #16]	; (500 <mcp2515_reset+0x24>)
     4f0:	4798      	blx	r3
}
     4f2:	bd10      	pop	{r4, pc}
     4f4:	2000058e 	.word	0x2000058e
     4f8:	0000116d 	.word	0x0000116d
     4fc:	00001145 	.word	0x00001145
     500:	000011b1 	.word	0x000011b1

00000504 <mcp2515_readRegister>:


uint8_t mcp2515_readRegister(const uint8_t address) {
     504:	b570      	push	{r4, r5, r6, lr}
     506:	0006      	movs	r6, r0
        uint8_t ret;
        spiSS(device);
     508:	4d08      	ldr	r5, [pc, #32]	; (52c <mcp2515_readRegister+0x28>)
     50a:	7828      	ldrb	r0, [r5, #0]
     50c:	4b08      	ldr	r3, [pc, #32]	; (530 <mcp2515_readRegister+0x2c>)
     50e:	4798      	blx	r3
        spiSend(MCP_READ);
     510:	2003      	movs	r0, #3
     512:	4c08      	ldr	r4, [pc, #32]	; (534 <mcp2515_readRegister+0x30>)
     514:	47a0      	blx	r4
        spiSend(address);
     516:	0030      	movs	r0, r6
     518:	47a0      	blx	r4
        ret = spiSend(0x00);
     51a:	2000      	movs	r0, #0
     51c:	47a0      	blx	r4
     51e:	0004      	movs	r4, r0
        spiSR(device);
     520:	7828      	ldrb	r0, [r5, #0]
     522:	4b05      	ldr	r3, [pc, #20]	; (538 <mcp2515_readRegister+0x34>)
     524:	4798      	blx	r3
        return ret;
}
     526:	0020      	movs	r0, r4
     528:	bd70      	pop	{r4, r5, r6, pc}
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	2000058e 	.word	0x2000058e
     530:	0000116d 	.word	0x0000116d
     534:	00001145 	.word	0x00001145
     538:	000011b1 	.word	0x000011b1

0000053c <mcp2515_setRegister>:
        }
        spiSR(device);
}


void mcp2515_setRegister(const uint8_t address, const uint8_t value) {
     53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     53e:	0007      	movs	r7, r0
     540:	000e      	movs	r6, r1
        spiSS(device);
     542:	4d07      	ldr	r5, [pc, #28]	; (560 <mcp2515_setRegister+0x24>)
     544:	7828      	ldrb	r0, [r5, #0]
     546:	4b07      	ldr	r3, [pc, #28]	; (564 <mcp2515_setRegister+0x28>)
     548:	4798      	blx	r3
        spiSend(MCP_WRITE);
     54a:	2002      	movs	r0, #2
     54c:	4c06      	ldr	r4, [pc, #24]	; (568 <mcp2515_setRegister+0x2c>)
     54e:	47a0      	blx	r4
        spiSend(address);
     550:	0038      	movs	r0, r7
     552:	47a0      	blx	r4
        spiSend(value);
     554:	0030      	movs	r0, r6
     556:	47a0      	blx	r4
        spiSR(device);
     558:	7828      	ldrb	r0, [r5, #0]
     55a:	4b04      	ldr	r3, [pc, #16]	; (56c <mcp2515_setRegister+0x30>)
     55c:	4798      	blx	r3
}
     55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     560:	2000058e 	.word	0x2000058e
     564:	0000116d 	.word	0x0000116d
     568:	00001145 	.word	0x00001145
     56c:	000011b1 	.word	0x000011b1

00000570 <mcp2515_setRegisterS>:


void mcp2515_setRegisterS(const uint8_t address, const uint8_t values[], const uint8_t n) {
     570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     572:	0007      	movs	r7, r0
     574:	000e      	movs	r6, r1
     576:	0015      	movs	r5, r2
        uint8_t i;
        spiSS(device);
     578:	4b0d      	ldr	r3, [pc, #52]	; (5b0 <mcp2515_setRegisterS+0x40>)
     57a:	7818      	ldrb	r0, [r3, #0]
     57c:	4b0d      	ldr	r3, [pc, #52]	; (5b4 <mcp2515_setRegisterS+0x44>)
     57e:	4798      	blx	r3
        spiSend(MCP_WRITE);
     580:	2002      	movs	r0, #2
     582:	4c0d      	ldr	r4, [pc, #52]	; (5b8 <mcp2515_setRegisterS+0x48>)
     584:	47a0      	blx	r4
        spiSend(address);
     586:	0038      	movs	r0, r7
     588:	47a0      	blx	r4
        for (i=0; i<n; i++)
     58a:	2d00      	cmp	r5, #0
     58c:	d00a      	beq.n	5a4 <mcp2515_setRegisterS+0x34>
     58e:	0034      	movs	r4, r6
     590:	3d01      	subs	r5, #1
     592:	b2ed      	uxtb	r5, r5
     594:	3501      	adds	r5, #1
     596:	1975      	adds	r5, r6, r5
        {
                spiSend(values[i]);
     598:	4e07      	ldr	r6, [pc, #28]	; (5b8 <mcp2515_setRegisterS+0x48>)
     59a:	7820      	ldrb	r0, [r4, #0]
     59c:	47b0      	blx	r6
     59e:	3401      	adds	r4, #1
        for (i=0; i<n; i++)
     5a0:	42ac      	cmp	r4, r5
     5a2:	d1fa      	bne.n	59a <mcp2515_setRegisterS+0x2a>
        }
        spiSR(device);
     5a4:	4b02      	ldr	r3, [pc, #8]	; (5b0 <mcp2515_setRegisterS+0x40>)
     5a6:	7818      	ldrb	r0, [r3, #0]
     5a8:	4b04      	ldr	r3, [pc, #16]	; (5bc <mcp2515_setRegisterS+0x4c>)
     5aa:	4798      	blx	r3
}
     5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	2000058e 	.word	0x2000058e
     5b4:	0000116d 	.word	0x0000116d
     5b8:	00001145 	.word	0x00001145
     5bc:	000011b1 	.word	0x000011b1

000005c0 <mcp2515_modifyRegister>:


void mcp2515_modifyRegister(const uint8_t address, const uint8_t mask, const uint8_t data) {
     5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5c2:	b083      	sub	sp, #12
     5c4:	0007      	movs	r7, r0
     5c6:	000e      	movs	r6, r1
     5c8:	9201      	str	r2, [sp, #4]
        spiSS(device);				// Sets CS to 0 to prepare for writing (PA18 -> CS)
     5ca:	4d09      	ldr	r5, [pc, #36]	; (5f0 <mcp2515_modifyRegister+0x30>)
     5cc:	7828      	ldrb	r0, [r5, #0]
     5ce:	4b09      	ldr	r3, [pc, #36]	; (5f4 <mcp2515_modifyRegister+0x34>)
     5d0:	4798      	blx	r3
        spiSend(MCP_BITMOD);		// Sends bit modify instruction (0x05)
     5d2:	2005      	movs	r0, #5
     5d4:	4c08      	ldr	r4, [pc, #32]	; (5f8 <mcp2515_modifyRegister+0x38>)
     5d6:	47a0      	blx	r4
        spiSend(address);			// Sends a byte indicating the address that wants to be modified
     5d8:	0038      	movs	r0, r7
     5da:	47a0      	blx	r4
        spiSend(mask);				// Sends mask for the data to be applied
     5dc:	0030      	movs	r0, r6
     5de:	47a0      	blx	r4
        spiSend(data);				// Sends the data to be masked and written into the register on address
     5e0:	9801      	ldr	r0, [sp, #4]
     5e2:	47a0      	blx	r4
        spiSR(device);				// Sets CS to 1 to stop writing (PA18 -> CS)
     5e4:	7828      	ldrb	r0, [r5, #0]
     5e6:	4b05      	ldr	r3, [pc, #20]	; (5fc <mcp2515_modifyRegister+0x3c>)
     5e8:	4798      	blx	r3
}
     5ea:	b003      	add	sp, #12
     5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	2000058e 	.word	0x2000058e
     5f4:	0000116d 	.word	0x0000116d
     5f8:	00001145 	.word	0x00001145
     5fc:	000011b1 	.word	0x000011b1

00000600 <mcp2515_setCANCTRL_Mode>:


/******************** INIT SEQUENCES ********************/


uint8_t mcp2515_setCANCTRL_Mode(const uint8_t newmode) {
     600:	b510      	push	{r4, lr}
     602:	0004      	movs	r4, r0
        uint8_t i;


        mcp2515_modifyRegister(MCP_CANCTRL, MODE_MASK, newmode);
     604:	0002      	movs	r2, r0
     606:	21e0      	movs	r1, #224	; 0xe0
     608:	200f      	movs	r0, #15
     60a:	4b06      	ldr	r3, [pc, #24]	; (624 <mcp2515_setCANCTRL_Mode+0x24>)
     60c:	4798      	blx	r3


        i = mcp2515_readRegister(MCP_CANCTRL);
     60e:	200f      	movs	r0, #15
     610:	4b05      	ldr	r3, [pc, #20]	; (628 <mcp2515_setCANCTRL_Mode+0x28>)
     612:	4798      	blx	r3
        i &= MODE_MASK;
     614:	23e0      	movs	r3, #224	; 0xe0


        if ( i == newmode )
     616:	4018      	ands	r0, r3
     618:	1b00      	subs	r0, r0, r4
     61a:	1e43      	subs	r3, r0, #1
     61c:	4198      	sbcs	r0, r3
     61e:	b2c0      	uxtb	r0, r0
        {
                return MCP2515_OK;
        }
        return MCP2515_FAIL;
}
     620:	bd10      	pop	{r4, pc}
     622:	46c0      	nop			; (mov r8, r8)
     624:	000005c1 	.word	0x000005c1
     628:	00000505 	.word	0x00000505

0000062c <mcp2515_configRate>:


uint8_t mcp2515_configRate(const uint8_t canSpeed) {
     62c:	b570      	push	{r4, r5, r6, lr}
        uint8_t set, cfg1, cfg2, cfg3;
        set = 1;
        switch (canSpeed)
     62e:	2810      	cmp	r0, #16
     630:	d845      	bhi.n	6be <mcp2515_configRate+0x92>
     632:	0080      	lsls	r0, r0, #2
     634:	4b27      	ldr	r3, [pc, #156]	; (6d4 <mcp2515_configRate+0xa8>)
     636:	581b      	ldr	r3, [r3, r0]
     638:	469f      	mov	pc, r3


                case (CAN_20KBPS):
                cfg1 = MCP_16MHz_20kBPS_CFG1;
                cfg2 = MCP_16MHz_20kBPS_CFG2;
                cfg3 = MCP_16MHz_20kBPS_CFG3;
     63a:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_20kBPS_CFG2;
     63c:	25ff      	movs	r5, #255	; 0xff
                cfg1 = MCP_16MHz_20kBPS_CFG1;
     63e:	210f      	movs	r1, #15
     640:	e032      	b.n	6a8 <mcp2515_configRate+0x7c>


                case (CAN_33KBPS):
                cfg1 = MCP_16MHz_33kBPS_CFG1;
                cfg2 = MCP_16MHz_33kBPS_CFG2;
                cfg3 = MCP_16MHz_33kBPS_CFG3;
     642:	2607      	movs	r6, #7
                cfg2 = MCP_16MHz_33kBPS_CFG2;
     644:	25be      	movs	r5, #190	; 0xbe
                cfg1 = MCP_16MHz_33kBPS_CFG1;
     646:	2109      	movs	r1, #9
                break;
     648:	e02e      	b.n	6a8 <mcp2515_configRate+0x7c>


                case (CAN_40KBPS):
                cfg1 = MCP_16MHz_40kBPS_CFG1;
                cfg2 = MCP_16MHz_40kBPS_CFG2;
                cfg3 = MCP_16MHz_40kBPS_CFG3;
     64a:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_40kBPS_CFG2;
     64c:	25ff      	movs	r5, #255	; 0xff
                cfg1 = MCP_16MHz_40kBPS_CFG1;
     64e:	2107      	movs	r1, #7
                break;
     650:	e02a      	b.n	6a8 <mcp2515_configRate+0x7c>


                case (CAN_50KBPS):
                cfg1 = MCP_16MHz_50kBPS_CFG1;
                cfg2 = MCP_16MHz_50kBPS_CFG2;
                cfg3 = MCP_16MHz_50kBPS_CFG3;
     652:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_50kBPS_CFG2;
     654:	25fa      	movs	r5, #250	; 0xfa
                cfg1 = MCP_16MHz_50kBPS_CFG1;
     656:	2107      	movs	r1, #7
                break;
     658:	e026      	b.n	6a8 <mcp2515_configRate+0x7c>


                case (CAN_80KBPS):
                cfg1 = MCP_16MHz_80kBPS_CFG1;
                cfg2 = MCP_16MHz_80kBPS_CFG2;
                cfg3 = MCP_16MHz_80kBPS_CFG3;
     65a:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_80kBPS_CFG2;
     65c:	25ff      	movs	r5, #255	; 0xff
                cfg1 = MCP_16MHz_80kBPS_CFG1;
     65e:	2103      	movs	r1, #3
                break;
     660:	e022      	b.n	6a8 <mcp2515_configRate+0x7c>


                case (CAN_83K3BPS):
                cfg1 = MCP_16MHz_83k3BPS_CFG1;
                cfg2 = MCP_16MHz_83k3BPS_CFG2;
                cfg3 = MCP_16MHz_83k3BPS_CFG3;
     662:	2607      	movs	r6, #7
                cfg2 = MCP_16MHz_83k3BPS_CFG2;
     664:	25be      	movs	r5, #190	; 0xbe
                cfg1 = MCP_16MHz_83k3BPS_CFG1;
     666:	2103      	movs	r1, #3
                break;
     668:	e01e      	b.n	6a8 <mcp2515_configRate+0x7c>


                case (CAN_95KBPS):
                cfg1 = MCP_16MHz_95kBPS_CFG1;
                cfg2 = MCP_16MHz_95kBPS_CFG2;
                cfg3 = MCP_16MHz_95kBPS_CFG3;
     66a:	2607      	movs	r6, #7
                cfg2 = MCP_16MHz_95kBPS_CFG2;
     66c:	25ad      	movs	r5, #173	; 0xad
                cfg1 = MCP_16MHz_95kBPS_CFG1;
     66e:	2103      	movs	r1, #3
                break;
     670:	e01a      	b.n	6a8 <mcp2515_configRate+0x7c>


                case (CAN_100KBPS):                                             /* 100KBPS                  */
                cfg1 = MCP_16MHz_100kBPS_CFG1;
                cfg2 = MCP_16MHz_100kBPS_CFG2;
                cfg3 = MCP_16MHz_100kBPS_CFG3;
     672:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_100kBPS_CFG2;
     674:	25fa      	movs	r5, #250	; 0xfa
                cfg1 = MCP_16MHz_100kBPS_CFG1;
     676:	2103      	movs	r1, #3
                break;
     678:	e016      	b.n	6a8 <mcp2515_configRate+0x7c>


                case (CAN_125KBPS):
                cfg1 = MCP_16MHz_125kBPS_CFG1;
                cfg2 = MCP_16MHz_125kBPS_CFG2;
                cfg3 = MCP_16MHz_125kBPS_CFG3;
     67a:	2686      	movs	r6, #134	; 0x86
                cfg2 = MCP_16MHz_125kBPS_CFG2;
     67c:	25f0      	movs	r5, #240	; 0xf0
                cfg1 = MCP_16MHz_125kBPS_CFG1;
     67e:	2103      	movs	r1, #3
                break;
     680:	e012      	b.n	6a8 <mcp2515_configRate+0x7c>


                case (CAN_200KBPS):
                cfg1 = MCP_16MHz_200kBPS_CFG1;
                cfg2 = MCP_16MHz_200kBPS_CFG2;
                cfg3 = MCP_16MHz_200kBPS_CFG3;
     682:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_200kBPS_CFG2;
     684:	25fa      	movs	r5, #250	; 0xfa
                cfg1 = MCP_16MHz_200kBPS_CFG1;
     686:	2101      	movs	r1, #1
                break;
     688:	e00e      	b.n	6a8 <mcp2515_configRate+0x7c>


                case (CAN_250KBPS):
                cfg1 = MCP_16MHz_250kBPS_CFG1;
                cfg2 = MCP_16MHz_250kBPS_CFG2;
                cfg3 = MCP_16MHz_250kBPS_CFG3;
     68a:	2685      	movs	r6, #133	; 0x85
                cfg2 = MCP_16MHz_250kBPS_CFG2;
     68c:	25f1      	movs	r5, #241	; 0xf1
                cfg1 = MCP_16MHz_250kBPS_CFG1;
     68e:	2141      	movs	r1, #65	; 0x41
                break;
     690:	e00a      	b.n	6a8 <mcp2515_configRate+0x7c>


                case (CAN_500KBPS):
                cfg1 = MCP_16MHz_500kBPS_CFG1;
                cfg2 = MCP_16MHz_500kBPS_CFG2;
                cfg3 = MCP_16MHz_500kBPS_CFG3;
     692:	2686      	movs	r6, #134	; 0x86
                cfg2 = MCP_16MHz_500kBPS_CFG2;
     694:	25f0      	movs	r5, #240	; 0xf0
                cfg1 = MCP_16MHz_500kBPS_CFG1;
     696:	2100      	movs	r1, #0
                break;
     698:	e006      	b.n	6a8 <mcp2515_configRate+0x7c>
                
                case (CAN_1000KBPS):
                cfg1 = MCP_16MHz_1000kBPS_CFG1;
                cfg2 = MCP_16MHz_1000kBPS_CFG2;
                cfg3 = MCP_16MHz_1000kBPS_CFG3;
     69a:	2682      	movs	r6, #130	; 0x82
                cfg2 = MCP_16MHz_1000kBPS_CFG2;
     69c:	25d0      	movs	r5, #208	; 0xd0
                cfg1 = MCP_16MHz_1000kBPS_CFG1;
     69e:	2100      	movs	r1, #0
                break;
     6a0:	e002      	b.n	6a8 <mcp2515_configRate+0x7c>
                cfg3 = MCP_16MHz_5kBPS_CFG3;
     6a2:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_5kBPS_CFG2;
     6a4:	25ff      	movs	r5, #255	; 0xff
                cfg1 = MCP_16MHz_5kBPS_CFG1;
     6a6:	213f      	movs	r1, #63	; 0x3f
                break;
        }


        if (set) {
                mcp2515_setRegister(MCP_CNF1, cfg1);
     6a8:	202a      	movs	r0, #42	; 0x2a
     6aa:	4c0b      	ldr	r4, [pc, #44]	; (6d8 <mcp2515_configRate+0xac>)
     6ac:	47a0      	blx	r4
                mcp2515_setRegister(MCP_CNF2, cfg2);
     6ae:	0029      	movs	r1, r5
     6b0:	2029      	movs	r0, #41	; 0x29
     6b2:	47a0      	blx	r4
                mcp2515_setRegister(MCP_CNF3, cfg3);
     6b4:	0031      	movs	r1, r6
     6b6:	2028      	movs	r0, #40	; 0x28
     6b8:	47a0      	blx	r4
                return MCP2515_OK;
     6ba:	2000      	movs	r0, #0
        }
        else {
                return MCP2515_FAIL;
        }
}
     6bc:	bd70      	pop	{r4, r5, r6, pc}
                return MCP2515_FAIL;
     6be:	2001      	movs	r0, #1
     6c0:	e7fc      	b.n	6bc <mcp2515_configRate+0x90>
                cfg3 = MCP_16MHz_10kBPS_CFG3;
     6c2:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_10kBPS_CFG2;
     6c4:	25ff      	movs	r5, #255	; 0xff
                cfg1 = MCP_16MHz_10kBPS_CFG1;
     6c6:	211f      	movs	r1, #31
     6c8:	e7ee      	b.n	6a8 <mcp2515_configRate+0x7c>
                cfg3 = MCP_16MHz_31k25BPS_CFG3;
     6ca:	2685      	movs	r6, #133	; 0x85
                cfg2 = MCP_16MHz_31k25BPS_CFG2;
     6cc:	25f1      	movs	r5, #241	; 0xf1
                cfg1 = MCP_16MHz_31k25BPS_CFG1;
     6ce:	210f      	movs	r1, #15
     6d0:	e7ea      	b.n	6a8 <mcp2515_configRate+0x7c>
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	000029c0 	.word	0x000029c0
     6d8:	0000053d 	.word	0x0000053d

000006dc <mcp2515_write_id>:


/******************** MANAGMENT TOOLS *******************/


void mcp2515_write_id(const uint8_t mcp_addr, const uint8_t ext, const uint16_t id) {
     6dc:	b500      	push	{lr}
     6de:	b083      	sub	sp, #12


        canid = (uint16_t)(id & 0x0FFFF);


        if (ext == 1) {
     6e0:	2901      	cmp	r1, #1
     6e2:	d012      	beq.n	70a <mcp2515_write_id+0x2e>
                tbufdata[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
                tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
                tbufdata[MCP_SIDH] = (uint8_t) (canid >> 5);
        }
        else {
                tbufdata[MCP_SIDH] = (uint8_t) (canid >> 3);
     6e4:	ab01      	add	r3, sp, #4
     6e6:	08d1      	lsrs	r1, r2, #3
     6e8:	7019      	strb	r1, [r3, #0]
                tbufdata[MCP_SIDL] = (uint8_t) ((canid & 0x07) << 5);
     6ea:	0152      	lsls	r2, r2, #5
     6ec:	705a      	strb	r2, [r3, #1]
                tbufdata[MCP_EID0] = 0;
     6ee:	2200      	movs	r2, #0
     6f0:	70da      	strb	r2, [r3, #3]
                tbufdata[MCP_EID8] = 0;
     6f2:	709a      	strb	r2, [r3, #2]
        }
        mcp2515_setRegisterS(mcp_addr, tbufdata, 4);
     6f4:	2204      	movs	r2, #4
     6f6:	a901      	add	r1, sp, #4
     6f8:	4b08      	ldr	r3, [pc, #32]	; (71c <mcp2515_write_id+0x40>)
     6fa:	4798      	blx	r3
     6fc:	23fa      	movs	r3, #250	; 0xfa
     6fe:	005b      	lsls	r3, r3, #1
     700:	3b01      	subs	r3, #1
        for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     702:	2b00      	cmp	r3, #0
     704:	d1fc      	bne.n	700 <mcp2515_write_id+0x24>
                {
                        ;//this works like a NOPE instruction
                }
}
     706:	b003      	add	sp, #12
     708:	bd00      	pop	{pc}
                tbufdata[MCP_EID0] = (uint8_t) (canid & 0xFF);
     70a:	ab01      	add	r3, sp, #4
     70c:	70da      	strb	r2, [r3, #3]
                tbufdata[MCP_EID8] = (uint8_t) (canid >> 8);
     70e:	0a12      	lsrs	r2, r2, #8
     710:	709a      	strb	r2, [r3, #2]
                tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
     712:	2208      	movs	r2, #8
     714:	705a      	strb	r2, [r3, #1]
                tbufdata[MCP_SIDH] = (uint8_t) (canid >> 5);
     716:	2200      	movs	r2, #0
     718:	701a      	strb	r2, [r3, #0]
     71a:	e7eb      	b.n	6f4 <mcp2515_write_id+0x18>
     71c:	00000571 	.word	0x00000571

00000720 <mcp2515_write_mf>:


void mcp2515_write_mf( const uint8_t mcp_addr, const uint8_t ext, const uint32_t id )
{
     720:	b530      	push	{r4, r5, lr}
     722:	b083      	sub	sp, #12
        uint16_t canid;
        uint8_t tbufdata[4];
        canid = (uint16_t)(id & 0x0FFFF);
     724:	b293      	uxth	r3, r2


        if ( ext == 1)
     726:	2901      	cmp	r1, #1
     728:	d013      	beq.n	752 <mcp2515_write_mf+0x32>
                tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
                tbufdata[MCP_SIDH] = (uint8_t) (canid >> 5 );
        }
        else
        {
                tbufdata[MCP_EID0] = (uint8_t) (canid & 0xFF);
     72a:	a901      	add	r1, sp, #4
     72c:	70ca      	strb	r2, [r1, #3]
                tbufdata[MCP_EID8] = (uint8_t) (canid >> 8);
     72e:	0a1b      	lsrs	r3, r3, #8
     730:	708b      	strb	r3, [r1, #2]
                canid = (uint16_t)(id >> 16);
     732:	0c12      	lsrs	r2, r2, #16
                tbufdata[MCP_SIDL] = (uint8_t) ((canid & 0x07) << 5);
     734:	0153      	lsls	r3, r2, #5
     736:	704b      	strb	r3, [r1, #1]
                tbufdata[MCP_SIDH] = (uint8_t) (canid >> 3 );
     738:	08d2      	lsrs	r2, r2, #3
     73a:	700a      	strb	r2, [r1, #0]
        }
        
        mcp2515_setRegisterS( mcp_addr, tbufdata, 4 );
     73c:	2204      	movs	r2, #4
     73e:	a901      	add	r1, sp, #4
     740:	4b0d      	ldr	r3, [pc, #52]	; (778 <mcp2515_write_mf+0x58>)
     742:	4798      	blx	r3
     744:	23fa      	movs	r3, #250	; 0xfa
     746:	005b      	lsls	r3, r3, #1
     748:	3b01      	subs	r3, #1
        for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     74a:	2b00      	cmp	r3, #0
     74c:	d1fc      	bne.n	748 <mcp2515_write_mf+0x28>
        {
                ;//this works like a NOPE instruction
        }
}
     74e:	b003      	add	sp, #12
     750:	bd30      	pop	{r4, r5, pc}
                tbufdata[MCP_EID0] = (uint8_t) (canid & 0xFF);
     752:	a901      	add	r1, sp, #4
     754:	70ca      	strb	r2, [r1, #3]
                tbufdata[MCP_EID8] = (uint8_t) (canid >> 8);
     756:	0a1b      	lsrs	r3, r3, #8
     758:	708b      	strb	r3, [r1, #2]
                canid = (uint16_t)(id >> 16);
     75a:	0c12      	lsrs	r2, r2, #16
                tbufdata[MCP_SIDL] = (uint8_t) (canid & 0x03);
     75c:	b2d4      	uxtb	r4, r2
     75e:	2303      	movs	r3, #3
     760:	4023      	ands	r3, r4
                tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
     762:	2508      	movs	r5, #8
     764:	432b      	orrs	r3, r5
                tbufdata[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
     766:	00e4      	lsls	r4, r4, #3
     768:	251f      	movs	r5, #31
     76a:	43ac      	bics	r4, r5
                tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
     76c:	4323      	orrs	r3, r4
     76e:	704b      	strb	r3, [r1, #1]
                tbufdata[MCP_SIDH] = (uint8_t) (canid >> 5 );
     770:	0952      	lsrs	r2, r2, #5
     772:	700a      	strb	r2, [r1, #0]
     774:	e7e2      	b.n	73c <mcp2515_write_mf+0x1c>
     776:	46c0      	nop			; (mov r8, r8)
     778:	00000571 	.word	0x00000571

0000077c <mcp2515_initCANBuffers>:
void mcp2515_initCANBuffers(void) {
     77c:	b570      	push	{r4, r5, r6, lr}
        mcp2515_write_mf(MCP_RXM0SIDH, ext, ulMask);        /*Set both masks to 0           */
     77e:	2200      	movs	r2, #0
     780:	2101      	movs	r1, #1
     782:	2020      	movs	r0, #32
     784:	4c1c      	ldr	r4, [pc, #112]	; (7f8 <mcp2515_initCANBuffers+0x7c>)
     786:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXM1SIDH, ext, ulMask);        /*Mask register ignores ext bit */
     788:	2200      	movs	r2, #0
     78a:	2101      	movs	r1, #1
     78c:	2024      	movs	r0, #36	; 0x24
     78e:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXF0SIDH, ext, ulFilt);        /* RXB0: extended               */
     790:	2200      	movs	r2, #0
     792:	2101      	movs	r1, #1
     794:	2000      	movs	r0, #0
     796:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXF1SIDH, std, ulFilt);        /* RXB1: standard               */
     798:	2200      	movs	r2, #0
     79a:	2100      	movs	r1, #0
     79c:	2004      	movs	r0, #4
     79e:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXF2SIDH, ext, ulFilt);        /* RXB2: extended               */
     7a0:	2200      	movs	r2, #0
     7a2:	2101      	movs	r1, #1
     7a4:	2008      	movs	r0, #8
     7a6:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXF3SIDH, std, ulFilt);        /* RXB3: standard               */
     7a8:	2200      	movs	r2, #0
     7aa:	2100      	movs	r1, #0
     7ac:	2010      	movs	r0, #16
     7ae:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXF4SIDH, ext, ulFilt);
     7b0:	2200      	movs	r2, #0
     7b2:	2101      	movs	r1, #1
     7b4:	2014      	movs	r0, #20
     7b6:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXF5SIDH, std, ulFilt);
     7b8:	2200      	movs	r2, #0
     7ba:	2100      	movs	r1, #0
     7bc:	2018      	movs	r0, #24
     7be:	47a0      	blx	r4
        a1 = MCP_TXB0CTRL;
     7c0:	2430      	movs	r4, #48	; 0x30
                mcp2515_setRegister(a1, 0);
     7c2:	4d0e      	ldr	r5, [pc, #56]	; (7fc <mcp2515_initCANBuffers+0x80>)
     7c4:	2100      	movs	r1, #0
     7c6:	0020      	movs	r0, r4
     7c8:	47a8      	blx	r5
                mcp2515_setRegister(a2, 0);
     7ca:	0020      	movs	r0, r4
     7cc:	3010      	adds	r0, #16
     7ce:	b2c0      	uxtb	r0, r0
     7d0:	2100      	movs	r1, #0
     7d2:	47a8      	blx	r5
                mcp2515_setRegister(a3, 0);
     7d4:	0020      	movs	r0, r4
     7d6:	3020      	adds	r0, #32
     7d8:	b2c0      	uxtb	r0, r0
     7da:	2100      	movs	r1, #0
     7dc:	47a8      	blx	r5
                a1++;
     7de:	3401      	adds	r4, #1
     7e0:	b2e4      	uxtb	r4, r4
        for (i = 0; i < 14; i++) {                         /* in-buffer loop               */
     7e2:	2c3e      	cmp	r4, #62	; 0x3e
     7e4:	d1ee      	bne.n	7c4 <mcp2515_initCANBuffers+0x48>
        mcp2515_setRegister(MCP_RXB0CTRL, 0);
     7e6:	2100      	movs	r1, #0
     7e8:	2060      	movs	r0, #96	; 0x60
     7ea:	4c04      	ldr	r4, [pc, #16]	; (7fc <mcp2515_initCANBuffers+0x80>)
     7ec:	47a0      	blx	r4
        mcp2515_setRegister(MCP_RXB1CTRL, 0);
     7ee:	2100      	movs	r1, #0
     7f0:	2070      	movs	r0, #112	; 0x70
     7f2:	47a0      	blx	r4
}
     7f4:	bd70      	pop	{r4, r5, r6, pc}
     7f6:	46c0      	nop			; (mov r8, r8)
     7f8:	00000721 	.word	0x00000721
     7fc:	0000053d 	.word	0x0000053d

00000800 <mcp2515_init>:
uint8_t mcp2515_init(const uint8_t canSpeed) {            /* mcp2515init                  */
     800:	b570      	push	{r4, r5, r6, lr}
     802:	0005      	movs	r5, r0
        mcp2515_reset();
     804:	4b21      	ldr	r3, [pc, #132]	; (88c <mcp2515_init+0x8c>)
     806:	4798      	blx	r3
     808:	4b21      	ldr	r3, [pc, #132]	; (890 <mcp2515_init+0x90>)
     80a:	3b01      	subs	r3, #1
        for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     80c:	2b00      	cmp	r3, #0
     80e:	d1fc      	bne.n	80a <mcp2515_init+0xa>
        res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
     810:	2080      	movs	r0, #128	; 0x80
     812:	4b20      	ldr	r3, [pc, #128]	; (894 <mcp2515_init+0x94>)
     814:	4798      	blx	r3
     816:	1e04      	subs	r4, r0, #0
        if(res > 0)
     818:	d006      	beq.n	828 <mcp2515_init+0x28>
     81a:	23fa      	movs	r3, #250	; 0xfa
     81c:	005b      	lsls	r3, r3, #1
     81e:	3b01      	subs	r3, #1
                for(int aux=0;aux<500;aux++) // We need to wait about X microsec to let it load
     820:	2b00      	cmp	r3, #0
     822:	d1fc      	bne.n	81e <mcp2515_init+0x1e>
}
     824:	0020      	movs	r0, r4
     826:	bd70      	pop	{r4, r5, r6, pc}
     828:	23fa      	movs	r3, #250	; 0xfa
     82a:	005b      	lsls	r3, r3, #1
     82c:	3b01      	subs	r3, #1
        for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     82e:	2b00      	cmp	r3, #0
     830:	d1fc      	bne.n	82c <mcp2515_init+0x2c>
        if(mcp2515_configRate(canSpeed))
     832:	0028      	movs	r0, r5
     834:	4b18      	ldr	r3, [pc, #96]	; (898 <mcp2515_init+0x98>)
     836:	4798      	blx	r3
     838:	2800      	cmp	r0, #0
     83a:	d004      	beq.n	846 <mcp2515_init+0x46>
     83c:	4b14      	ldr	r3, [pc, #80]	; (890 <mcp2515_init+0x90>)
     83e:	3b01      	subs	r3, #1
                for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     840:	2b00      	cmp	r3, #0
     842:	d1fc      	bne.n	83e <mcp2515_init+0x3e>
     844:	e7ee      	b.n	824 <mcp2515_init+0x24>
     846:	4b12      	ldr	r3, [pc, #72]	; (890 <mcp2515_init+0x90>)
     848:	3b01      	subs	r3, #1
        for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     84a:	2b00      	cmp	r3, #0
     84c:	d1fc      	bne.n	848 <mcp2515_init+0x48>
                mcp2515_initCANBuffers();
     84e:	4b13      	ldr	r3, [pc, #76]	; (89c <mcp2515_init+0x9c>)
     850:	4798      	blx	r3
                mcp2515_setRegister(MCP_CANINTE, MCP_RX0IF | MCP_RX1IF);
     852:	2103      	movs	r1, #3
     854:	202b      	movs	r0, #43	; 0x2b
     856:	4b12      	ldr	r3, [pc, #72]	; (8a0 <mcp2515_init+0xa0>)
     858:	4798      	blx	r3
                mcp2515_modifyRegister(MCP_RXB0CTRL, MCP_RXB_RX_MASK | MCP_RXB_BUKT_MASK, MCP_RXB_RX_STDEXT | MCP_RXB_BUKT_MASK);
     85a:	2204      	movs	r2, #4
     85c:	2164      	movs	r1, #100	; 0x64
     85e:	2060      	movs	r0, #96	; 0x60
     860:	4c10      	ldr	r4, [pc, #64]	; (8a4 <mcp2515_init+0xa4>)
     862:	47a0      	blx	r4
                mcp2515_modifyRegister(MCP_RXB1CTRL, MCP_RXB_RX_MASK, MCP_RXB_RX_STDEXT);
     864:	2200      	movs	r2, #0
     866:	2160      	movs	r1, #96	; 0x60
     868:	2070      	movs	r0, #112	; 0x70
     86a:	47a0      	blx	r4
                res = mcp2515_setCANCTRL_Mode(MODE_NORMAL);
     86c:	2000      	movs	r0, #0
     86e:	4b09      	ldr	r3, [pc, #36]	; (894 <mcp2515_init+0x94>)
     870:	4798      	blx	r3
     872:	1e04      	subs	r4, r0, #0
                if(res)
     874:	d004      	beq.n	880 <mcp2515_init+0x80>
     876:	4b06      	ldr	r3, [pc, #24]	; (890 <mcp2515_init+0x90>)
     878:	3b01      	subs	r3, #1
                        for(int aux=0;aux<1500;aux++) 
     87a:	2b00      	cmp	r3, #0
     87c:	d1fc      	bne.n	878 <mcp2515_init+0x78>
     87e:	e7d1      	b.n	824 <mcp2515_init+0x24>
     880:	4b03      	ldr	r3, [pc, #12]	; (890 <mcp2515_init+0x90>)
     882:	3b01      	subs	r3, #1
                for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     884:	2b00      	cmp	r3, #0
     886:	d1fc      	bne.n	882 <mcp2515_init+0x82>
     888:	e7cc      	b.n	824 <mcp2515_init+0x24>
     88a:	46c0      	nop			; (mov r8, r8)
     88c:	000004dd 	.word	0x000004dd
     890:	000005dc 	.word	0x000005dc
     894:	00000601 	.word	0x00000601
     898:	0000062d 	.word	0x0000062d
     89c:	0000077d 	.word	0x0000077d
     8a0:	0000053d 	.word	0x0000053d
     8a4:	000005c1 	.word	0x000005c1

000008a8 <mcp2515_write_canMsg>:
                *ext = 1;
        }
}


void mcp2515_write_canMsg(const uint8_t buffer_sidh_addr) {
     8a8:	b510      	push	{r4, lr}
     8aa:	0004      	movs	r4, r0
        uint8_t mcp_addr;
        mcp_addr = buffer_sidh_addr;
        mcp2515_setRegisterS(mcp_addr+5, m_nDta, m_nDlc);    /* write data bytes             */
     8ac:	4b0f      	ldr	r3, [pc, #60]	; (8ec <mcp2515_write_canMsg+0x44>)
     8ae:	781a      	ldrb	r2, [r3, #0]
     8b0:	3005      	adds	r0, #5
     8b2:	b2c0      	uxtb	r0, r0
     8b4:	490e      	ldr	r1, [pc, #56]	; (8f0 <mcp2515_write_canMsg+0x48>)
     8b6:	4b0f      	ldr	r3, [pc, #60]	; (8f4 <mcp2515_write_canMsg+0x4c>)
     8b8:	4798      	blx	r3
        if ( m_nRtr == 1)                                    /* if RTR set bit in byte       */
     8ba:	4b0f      	ldr	r3, [pc, #60]	; (8f8 <mcp2515_write_canMsg+0x50>)
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	2b01      	cmp	r3, #1
     8c0:	d00d      	beq.n	8de <mcp2515_write_canMsg+0x36>
        {
                m_nDlc |= MCP_RTR_MASK;
        }
        mcp2515_setRegister((mcp_addr+4), m_nDlc);          /* write the RTR and DLC        */
     8c2:	4b0a      	ldr	r3, [pc, #40]	; (8ec <mcp2515_write_canMsg+0x44>)
     8c4:	7819      	ldrb	r1, [r3, #0]
     8c6:	1d20      	adds	r0, r4, #4
     8c8:	b2c0      	uxtb	r0, r0
     8ca:	4b0c      	ldr	r3, [pc, #48]	; (8fc <mcp2515_write_canMsg+0x54>)
     8cc:	4798      	blx	r3
        mcp2515_write_id(mcp_addr, m_nExtFlg, m_nID);       /* write CAN id                 */
     8ce:	4b0c      	ldr	r3, [pc, #48]	; (900 <mcp2515_write_canMsg+0x58>)
     8d0:	881a      	ldrh	r2, [r3, #0]
     8d2:	4b0c      	ldr	r3, [pc, #48]	; (904 <mcp2515_write_canMsg+0x5c>)
     8d4:	7819      	ldrb	r1, [r3, #0]
     8d6:	0020      	movs	r0, r4
     8d8:	4b0b      	ldr	r3, [pc, #44]	; (908 <mcp2515_write_canMsg+0x60>)
     8da:	4798      	blx	r3
}
     8dc:	bd10      	pop	{r4, pc}
                m_nDlc |= MCP_RTR_MASK;
     8de:	4a03      	ldr	r2, [pc, #12]	; (8ec <mcp2515_write_canMsg+0x44>)
     8e0:	7813      	ldrb	r3, [r2, #0]
     8e2:	2140      	movs	r1, #64	; 0x40
     8e4:	430b      	orrs	r3, r1
     8e6:	7013      	strb	r3, [r2, #0]
     8e8:	e7eb      	b.n	8c2 <mcp2515_write_canMsg+0x1a>
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	2000058f 	.word	0x2000058f
     8f0:	20000584 	.word	0x20000584
     8f4:	00000571 	.word	0x00000571
     8f8:	20000580 	.word	0x20000580
     8fc:	0000053d 	.word	0x0000053d
     900:	20000582 	.word	0x20000582
     904:	2000058c 	.word	0x2000058c
     908:	000006dd 	.word	0x000006dd

0000090c <mcp2515_start_transmit>:
        m_nDlc &= MCP_DLC_MASK;
        mcp2515_readRegisterS(mcp_addr+5, &(m_nDta[0]), m_nDlc);
}


void mcp2515_start_transmit(const uint8_t mcp_addr)   {     /* start transmit               */
     90c:	b510      	push	{r4, lr}
        mcp2515_modifyRegister(mcp_addr-1 , MCP_TXB_TXREQ_M, MCP_TXB_TXREQ_M);
     90e:	3801      	subs	r0, #1
     910:	b2c0      	uxtb	r0, r0
     912:	2208      	movs	r2, #8
     914:	2108      	movs	r1, #8
     916:	4b01      	ldr	r3, [pc, #4]	; (91c <mcp2515_start_transmit+0x10>)
     918:	4798      	blx	r3
}
     91a:	bd10      	pop	{r4, pc}
     91c:	000005c1 	.word	0x000005c1

00000920 <mcp2515_getNextFreeTXBuf>:


uint8_t mcp2515_getNextFreeTXBuf(uint8_t *txbuf_n) {      /* get Next free txbuf          */
     920:	b5f0      	push	{r4, r5, r6, r7, lr}
     922:	46ce      	mov	lr, r9
     924:	4647      	mov	r7, r8
     926:	b580      	push	{r7, lr}
     928:	b083      	sub	sp, #12
     92a:	4680      	mov	r8, r0
        uint8_t res, i, ctrlval;
        uint8_t ctrlregs[MCP_N_TXBUFFERS] = {MCP_TXB0CTRL, MCP_TXB1CTRL, MCP_TXB2CTRL};
     92c:	ab01      	add	r3, sp, #4
     92e:	2230      	movs	r2, #48	; 0x30
     930:	701a      	strb	r2, [r3, #0]
     932:	3210      	adds	r2, #16
     934:	705a      	strb	r2, [r3, #1]
     936:	3210      	adds	r2, #16
     938:	709a      	strb	r2, [r3, #2]


        res = MCP_ALLTXBUSY;
        *txbuf_n = 0x00;
     93a:	2300      	movs	r3, #0
     93c:	7003      	strb	r3, [r0, #0]
     93e:	2400      	movs	r4, #0
        //


        /* check all 3 TX-Buffers       */
        for (i=0; i<MCP_N_TXBUFFERS; i++) {
                ctrlval = mcp2515_readRegister(ctrlregs[i]);
     940:	ae01      	add	r6, sp, #4
     942:	4b0b      	ldr	r3, [pc, #44]	; (970 <mcp2515_getNextFreeTXBuf+0x50>)
     944:	4699      	mov	r9, r3
                if ( (ctrlval & MCP_TXB_TXREQ_M) == 0) {
     946:	2708      	movs	r7, #8
                ctrlval = mcp2515_readRegister(ctrlregs[i]);
     948:	5da5      	ldrb	r5, [r4, r6]
     94a:	0028      	movs	r0, r5
     94c:	47c8      	blx	r9
                if ( (ctrlval & MCP_TXB_TXREQ_M) == 0) {
     94e:	4207      	tst	r7, r0
     950:	d008      	beq.n	964 <mcp2515_getNextFreeTXBuf+0x44>
     952:	3401      	adds	r4, #1
        for (i=0; i<MCP_N_TXBUFFERS; i++) {
     954:	2c03      	cmp	r4, #3
     956:	d1f7      	bne.n	948 <mcp2515_getNextFreeTXBuf+0x28>
                        /* r                            */
                        res = MCP2515_OK;
                        return res;                       /* ! function exit              */
                }
        }
        return res;
     958:	2002      	movs	r0, #2
}
     95a:	b003      	add	sp, #12
     95c:	bc0c      	pop	{r2, r3}
     95e:	4690      	mov	r8, r2
     960:	4699      	mov	r9, r3
     962:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        *txbuf_n = ctrlregs[i]+1;          /* return SIDH-address of Buffe */
     964:	3501      	adds	r5, #1
     966:	4643      	mov	r3, r8
     968:	701d      	strb	r5, [r3, #0]
                        return res;                       /* ! function exit              */
     96a:	2000      	movs	r0, #0
     96c:	e7f5      	b.n	95a <mcp2515_getNextFreeTXBuf+0x3a>
     96e:	46c0      	nop			; (mov r8, r8)
     970:	00000505 	.word	0x00000505

00000974 <init_Filt>:
        }
        return res;
}


uint8_t init_Filt(uint8_t num, uint8_t ext, uint32_t ulData) {
     974:	b570      	push	{r4, r5, r6, lr}
     976:	0006      	movs	r6, r0
     978:	000c      	movs	r4, r1
     97a:	0015      	movs	r5, r2
     97c:	4b25      	ldr	r3, [pc, #148]	; (a14 <init_Filt+0xa0>)
     97e:	3b01      	subs	r3, #1
        uint8_t res = MCP2515_OK;
        for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     980:	2b00      	cmp	r3, #0
     982:	d1fc      	bne.n	97e <init_Filt+0xa>
        {
                ;//this works like a NOPE instruction
        }
        res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
     984:	2080      	movs	r0, #128	; 0x80
     986:	4b24      	ldr	r3, [pc, #144]	; (a18 <init_Filt+0xa4>)
     988:	4798      	blx	r3
        if(res > 0)
     98a:	2800      	cmp	r0, #0
     98c:	d004      	beq.n	998 <init_Filt+0x24>
     98e:	4b21      	ldr	r3, [pc, #132]	; (a14 <init_Filt+0xa0>)
     990:	3b01      	subs	r3, #1
        {
                for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     992:	2b00      	cmp	r3, #0
     994:	d1fc      	bne.n	990 <init_Filt+0x1c>
        for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
        {
                ;//this works like a NOPE instruction
        }
        return res;
}
     996:	bd70      	pop	{r4, r5, r6, pc}
     998:	23fa      	movs	r3, #250	; 0xfa
     99a:	005b      	lsls	r3, r3, #1
     99c:	3b01      	subs	r3, #1
        for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     99e:	2b00      	cmp	r3, #0
     9a0:	d1fc      	bne.n	99c <init_Filt+0x28>
        switch(num)
     9a2:	2e05      	cmp	r6, #5
     9a4:	d808      	bhi.n	9b8 <init_Filt+0x44>
     9a6:	00b6      	lsls	r6, r6, #2
     9a8:	4b1c      	ldr	r3, [pc, #112]	; (a1c <init_Filt+0xa8>)
     9aa:	599b      	ldr	r3, [r3, r6]
     9ac:	469f      	mov	pc, r3
                mcp2515_write_mf(MCP_RXF0SIDH, ext, ulData);
     9ae:	002a      	movs	r2, r5
     9b0:	0021      	movs	r1, r4
     9b2:	2000      	movs	r0, #0
     9b4:	4b1a      	ldr	r3, [pc, #104]	; (a20 <init_Filt+0xac>)
     9b6:	4798      	blx	r3
        res = mcp2515_setCANCTRL_Mode(MODE_NORMAL);
     9b8:	2000      	movs	r0, #0
     9ba:	4b17      	ldr	r3, [pc, #92]	; (a18 <init_Filt+0xa4>)
     9bc:	4798      	blx	r3
        if(res > 0)
     9be:	2800      	cmp	r0, #0
     9c0:	d022      	beq.n	a08 <init_Filt+0x94>
     9c2:	4b14      	ldr	r3, [pc, #80]	; (a14 <init_Filt+0xa0>)
     9c4:	3b01      	subs	r3, #1
                for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     9c6:	2b00      	cmp	r3, #0
     9c8:	d1fc      	bne.n	9c4 <init_Filt+0x50>
     9ca:	e7e4      	b.n	996 <init_Filt+0x22>
                mcp2515_write_mf(MCP_RXF1SIDH, ext, ulData);
     9cc:	002a      	movs	r2, r5
     9ce:	0021      	movs	r1, r4
     9d0:	2004      	movs	r0, #4
     9d2:	4b13      	ldr	r3, [pc, #76]	; (a20 <init_Filt+0xac>)
     9d4:	4798      	blx	r3
                break;
     9d6:	e7ef      	b.n	9b8 <init_Filt+0x44>
                mcp2515_write_mf(MCP_RXF2SIDH, ext, ulData);
     9d8:	002a      	movs	r2, r5
     9da:	0021      	movs	r1, r4
     9dc:	2008      	movs	r0, #8
     9de:	4b10      	ldr	r3, [pc, #64]	; (a20 <init_Filt+0xac>)
     9e0:	4798      	blx	r3
                break;
     9e2:	e7e9      	b.n	9b8 <init_Filt+0x44>
                mcp2515_write_mf(MCP_RXF3SIDH, ext, ulData);
     9e4:	002a      	movs	r2, r5
     9e6:	0021      	movs	r1, r4
     9e8:	2010      	movs	r0, #16
     9ea:	4b0d      	ldr	r3, [pc, #52]	; (a20 <init_Filt+0xac>)
     9ec:	4798      	blx	r3
                break;
     9ee:	e7e3      	b.n	9b8 <init_Filt+0x44>
                mcp2515_write_mf(MCP_RXF4SIDH, ext, ulData);
     9f0:	002a      	movs	r2, r5
     9f2:	0021      	movs	r1, r4
     9f4:	2014      	movs	r0, #20
     9f6:	4b0a      	ldr	r3, [pc, #40]	; (a20 <init_Filt+0xac>)
     9f8:	4798      	blx	r3
                break;
     9fa:	e7dd      	b.n	9b8 <init_Filt+0x44>
                mcp2515_write_mf(MCP_RXF5SIDH, ext, ulData);
     9fc:	002a      	movs	r2, r5
     9fe:	0021      	movs	r1, r4
     a00:	2018      	movs	r0, #24
     a02:	4b07      	ldr	r3, [pc, #28]	; (a20 <init_Filt+0xac>)
     a04:	4798      	blx	r3
                break;
     a06:	e7d7      	b.n	9b8 <init_Filt+0x44>
     a08:	4b02      	ldr	r3, [pc, #8]	; (a14 <init_Filt+0xa0>)
     a0a:	3b01      	subs	r3, #1
        for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     a0c:	2b00      	cmp	r3, #0
     a0e:	d1fc      	bne.n	a0a <init_Filt+0x96>
     a10:	e7c1      	b.n	996 <init_Filt+0x22>
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	000005dc 	.word	0x000005dc
     a18:	00000601 	.word	0x00000601
     a1c:	00002a04 	.word	0x00002a04
     a20:	00000721 	.word	0x00000721

00000a24 <setMsg>:


uint8_t setMsg(uint16_t id, uint8_t ext, uint8_t len, uint8_t *pData) {
     a24:	b510      	push	{r4, lr}
        int i = 0;
        m_nExtFlg = ext;
     a26:	4c07      	ldr	r4, [pc, #28]	; (a44 <setMsg+0x20>)
     a28:	7021      	strb	r1, [r4, #0]
        m_nID     = id;
     a2a:	4907      	ldr	r1, [pc, #28]	; (a48 <setMsg+0x24>)
     a2c:	8008      	strh	r0, [r1, #0]
        m_nDlc    = len;
     a2e:	4907      	ldr	r1, [pc, #28]	; (a4c <setMsg+0x28>)
     a30:	700a      	strb	r2, [r1, #0]
        for(i = 0; i<MAX_CHAR_IN_MESSAGE; i++)
     a32:	2200      	movs	r2, #0
        {
                m_nDta[i] = *(pData+i);
     a34:	4806      	ldr	r0, [pc, #24]	; (a50 <setMsg+0x2c>)
     a36:	5c99      	ldrb	r1, [r3, r2]
     a38:	5481      	strb	r1, [r0, r2]
        for(i = 0; i<MAX_CHAR_IN_MESSAGE; i++)
     a3a:	3201      	adds	r2, #1
     a3c:	2a08      	cmp	r2, #8
     a3e:	d1fa      	bne.n	a36 <setMsg+0x12>
        }
        return MCP2515_OK;
}
     a40:	2000      	movs	r0, #0
     a42:	bd10      	pop	{r4, pc}
     a44:	2000058c 	.word	0x2000058c
     a48:	20000582 	.word	0x20000582
     a4c:	2000058f 	.word	0x2000058f
     a50:	20000584 	.word	0x20000584

00000a54 <sendMsg>:

        return MCP2515_OK;
}


uint8_t sendMsg() {
     a54:	b5f0      	push	{r4, r5, r6, r7, lr}
     a56:	b083      	sub	sp, #12
        uint8_t res, res1, txbuf_n;
        uint16_t uiTimeOut = 0;
     a58:	2400      	movs	r4, #0


        do {
                res = mcp2515_getNextFreeTXBuf(&txbuf_n);    /* info = addr.                 */
     a5a:	4d16      	ldr	r5, [pc, #88]	; (ab4 <sendMsg+0x60>)
     a5c:	466b      	mov	r3, sp
     a5e:	1dd8      	adds	r0, r3, #7
     a60:	47a8      	blx	r5
                uiTimeOut++;
     a62:	3401      	adds	r4, #1
     a64:	b2a4      	uxth	r4, r4
        } while (res == MCP_ALLTXBUSY && (uiTimeOut < TIMEOUTVALUE));
     a66:	2802      	cmp	r0, #2
     a68:	d103      	bne.n	a72 <sendMsg+0x1e>
     a6a:	2c32      	cmp	r4, #50	; 0x32
     a6c:	d1f6      	bne.n	a5c <sendMsg+0x8>


        if(uiTimeOut == TIMEOUTVALUE)
        {
                return CAN_GETTXBFTIMEOUT;                  /* get tx buff time out         */
     a6e:	3004      	adds	r0, #4
     a70:	e002      	b.n	a78 <sendMsg+0x24>
     a72:	2006      	movs	r0, #6
        if(uiTimeOut == TIMEOUTVALUE)
     a74:	2c32      	cmp	r4, #50	; 0x32
     a76:	d101      	bne.n	a7c <sendMsg+0x28>
                return CAN_SENDMSGTIMEOUT;
        }
        return CAN_OK;


}
     a78:	b003      	add	sp, #12
     a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mcp2515_write_canMsg(txbuf_n);
     a7c:	466b      	mov	r3, sp
     a7e:	1ddc      	adds	r4, r3, #7
     a80:	79d8      	ldrb	r0, [r3, #7]
     a82:	4b0d      	ldr	r3, [pc, #52]	; (ab8 <sendMsg+0x64>)
     a84:	4798      	blx	r3
        mcp2515_start_transmit(txbuf_n);
     a86:	7820      	ldrb	r0, [r4, #0]
     a88:	4b0c      	ldr	r3, [pc, #48]	; (abc <sendMsg+0x68>)
     a8a:	4798      	blx	r3
        uiTimeOut = 0;
     a8c:	2400      	movs	r4, #0
                res1= mcp2515_readRegister(txbuf_n);      /* read send buff ctrl reg         */
     a8e:	466b      	mov	r3, sp
     a90:	1ddd      	adds	r5, r3, #7
     a92:	4f0b      	ldr	r7, [pc, #44]	; (ac0 <sendMsg+0x6c>)
                res1 = res1 & 0x08;
     a94:	2608      	movs	r6, #8
                uiTimeOut++;
     a96:	3401      	adds	r4, #1
     a98:	b2a4      	uxth	r4, r4
                res1= mcp2515_readRegister(txbuf_n);      /* read send buff ctrl reg         */
     a9a:	7828      	ldrb	r0, [r5, #0]
     a9c:	47b8      	blx	r7
                res1 = res1 & 0x08;
     a9e:	4030      	ands	r0, r6
        }while(res1 && (uiTimeOut < TIMEOUTVALUE));
     aa0:	d003      	beq.n	aaa <sendMsg+0x56>
     aa2:	2c32      	cmp	r4, #50	; 0x32
     aa4:	d1f7      	bne.n	a96 <sendMsg+0x42>
                return CAN_SENDMSGTIMEOUT;
     aa6:	2007      	movs	r0, #7
     aa8:	e7e6      	b.n	a78 <sendMsg+0x24>
        if(uiTimeOut == TIMEOUTVALUE)                    /* send msg timeout             */
     aaa:	2c32      	cmp	r4, #50	; 0x32
     aac:	d1e4      	bne.n	a78 <sendMsg+0x24>
                return CAN_SENDMSGTIMEOUT;
     aae:	2007      	movs	r0, #7
     ab0:	e7e2      	b.n	a78 <sendMsg+0x24>
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	00000921 	.word	0x00000921
     ab8:	000008a9 	.word	0x000008a9
     abc:	0000090d 	.word	0x0000090d
     ac0:	00000505 	.word	0x00000505

00000ac4 <sendMsgBuf>:


uint8_t sendMsgBuf(uint16_t id, uint8_t ext, uint8_t len, uint8_t *buf) {
     ac4:	b510      	push	{r4, lr}
        setMsg(id, ext, len, buf);
     ac6:	4c02      	ldr	r4, [pc, #8]	; (ad0 <sendMsgBuf+0xc>)
     ac8:	47a0      	blx	r4
        return sendMsg();
     aca:	4b02      	ldr	r3, [pc, #8]	; (ad4 <sendMsgBuf+0x10>)
     acc:	4798      	blx	r3
}
     ace:	bd10      	pop	{r4, pc}
     ad0:	00000a25 	.word	0x00000a25
     ad4:	00000a55 	.word	0x00000a55

00000ad8 <canBegin>:
uint8_t isExtendedFrame(void) {
        return m_nExtFlg;
}


uint8_t canBegin(uint8_t slave, uint8_t speedset) {
     ad8:	b510      	push	{r4, lr}
        uint8_t res;
        device = slave;
     ada:	4b04      	ldr	r3, [pc, #16]	; (aec <canBegin+0x14>)
     adc:	7018      	strb	r0, [r3, #0]
        res = mcp2515_init(speedset);
     ade:	0008      	movs	r0, r1
     ae0:	4b03      	ldr	r3, [pc, #12]	; (af0 <canBegin+0x18>)
     ae2:	4798      	blx	r3
        if (res == MCP2515_OK) 
     ae4:	1e43      	subs	r3, r0, #1
     ae6:	4198      	sbcs	r0, r3
     ae8:	b2c0      	uxtb	r0, r0
                return CAN_OK;
        else 
                return CAN_FAILINIT;
}
     aea:	bd10      	pop	{r4, pc}
     aec:	2000058e 	.word	0x2000058e
     af0:	00000801 	.word	0x00000801

00000af4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     af4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     af6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     af8:	689a      	ldr	r2, [r3, #8]
     afa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     afc:	689a      	ldr	r2, [r3, #8]
     afe:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
     b00:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     b02:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     b04:	6803      	ldr	r3, [r0, #0]
     b06:	3301      	adds	r3, #1
     b08:	6003      	str	r3, [r0, #0]
}
     b0a:	4770      	bx	lr

00000b0c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     b0c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b0e:	6842      	ldr	r2, [r0, #4]
     b10:	6881      	ldr	r1, [r0, #8]
     b12:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b14:	6882      	ldr	r2, [r0, #8]
     b16:	6841      	ldr	r1, [r0, #4]
     b18:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     b1a:	685a      	ldr	r2, [r3, #4]
     b1c:	4290      	cmp	r0, r2
     b1e:	d006      	beq.n	b2e <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     b20:	2200      	movs	r2, #0
     b22:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     b24:	681a      	ldr	r2, [r3, #0]
     b26:	3a01      	subs	r2, #1
     b28:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     b2a:	6818      	ldr	r0, [r3, #0]
}
     b2c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     b2e:	6882      	ldr	r2, [r0, #8]
     b30:	605a      	str	r2, [r3, #4]
     b32:	e7f5      	b.n	b20 <uxListRemove+0x14>

00000b34 <out>:
    //return 0;
//}


static void out(char c) {
    *bf++ = c;
     b34:	4a02      	ldr	r2, [pc, #8]	; (b40 <out+0xc>)
     b36:	6813      	ldr	r3, [r2, #0]
     b38:	1c59      	adds	r1, r3, #1
     b3a:	6011      	str	r1, [r2, #0]
     b3c:	7018      	strb	r0, [r3, #0]
    }
     b3e:	4770      	bx	lr
     b40:	20000464 	.word	0x20000464

00000b44 <outDgt>:

static void outDgt(char dgt) {
     b44:	b510      	push	{r4, lr}
	out(dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10));
     b46:	2330      	movs	r3, #48	; 0x30
     b48:	2809      	cmp	r0, #9
     b4a:	d905      	bls.n	b58 <outDgt+0x14>
     b4c:	4b06      	ldr	r3, [pc, #24]	; (b68 <outDgt+0x24>)
     b4e:	791a      	ldrb	r2, [r3, #4]
     b50:	2337      	movs	r3, #55	; 0x37
     b52:	2a00      	cmp	r2, #0
     b54:	d100      	bne.n	b58 <outDgt+0x14>
     b56:	3320      	adds	r3, #32
     b58:	1818      	adds	r0, r3, r0
     b5a:	b2c0      	uxtb	r0, r0
     b5c:	4b03      	ldr	r3, [pc, #12]	; (b6c <outDgt+0x28>)
     b5e:	4798      	blx	r3
	zs=1;
     b60:	2201      	movs	r2, #1
     b62:	4b01      	ldr	r3, [pc, #4]	; (b68 <outDgt+0x24>)
     b64:	715a      	strb	r2, [r3, #5]
    }
     b66:	bd10      	pop	{r4, pc}
     b68:	20000464 	.word	0x20000464
     b6c:	00000b35 	.word	0x00000b35

00000b70 <divOut>:
	
static void divOut(unsigned int div) {
     b70:	b510      	push	{r4, lr}
    unsigned char dgt=0;
	num &= 0xffff; // just for testing the code  with 32 bit ints
     b72:	4b0e      	ldr	r3, [pc, #56]	; (bac <divOut+0x3c>)
     b74:	891a      	ldrh	r2, [r3, #8]
     b76:	609a      	str	r2, [r3, #8]
	while (num>=div) {
     b78:	4282      	cmp	r2, r0
     b7a:	d310      	bcc.n	b9e <divOut+0x2e>
     b7c:	2300      	movs	r3, #0
		num -= div;
     b7e:	1a12      	subs	r2, r2, r0
		dgt++;
     b80:	3301      	adds	r3, #1
     b82:	b2db      	uxtb	r3, r3
	while (num>=div) {
     b84:	4290      	cmp	r0, r2
     b86:	d9fa      	bls.n	b7e <divOut+0xe>
     b88:	4908      	ldr	r1, [pc, #32]	; (bac <divOut+0x3c>)
     b8a:	608a      	str	r2, [r1, #8]
		}
	if (zs || dgt>0) 
     b8c:	794a      	ldrb	r2, [r1, #5]
     b8e:	2a00      	cmp	r2, #0
     b90:	d101      	bne.n	b96 <divOut+0x26>
     b92:	2b00      	cmp	r3, #0
     b94:	d002      	beq.n	b9c <divOut+0x2c>
		outDgt(dgt);
     b96:	0018      	movs	r0, r3
     b98:	4b05      	ldr	r3, [pc, #20]	; (bb0 <divOut+0x40>)
     b9a:	4798      	blx	r3
    }	
     b9c:	bd10      	pop	{r4, pc}
	if (zs || dgt>0) 
     b9e:	4b03      	ldr	r3, [pc, #12]	; (bac <divOut+0x3c>)
     ba0:	795b      	ldrb	r3, [r3, #5]
     ba2:	2b00      	cmp	r3, #0
     ba4:	d0fa      	beq.n	b9c <divOut+0x2c>
    unsigned char dgt=0;
     ba6:	2300      	movs	r3, #0
     ba8:	e7f5      	b.n	b96 <divOut+0x26>
     baa:	46c0      	nop			; (mov r8, r8)
     bac:	20000464 	.word	0x20000464
     bb0:	00000b45 	.word	0x00000b45

00000bb4 <myputchar>:
  if(c=='\n')
     bb4:	280a      	cmp	r0, #10
     bb6:	d008      	beq.n	bca <myputchar+0x16>
  while (!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
     bb8:	4908      	ldr	r1, [pc, #32]	; (bdc <myputchar+0x28>)
     bba:	2201      	movs	r2, #1
     bbc:	7e0b      	ldrb	r3, [r1, #24]
     bbe:	4213      	tst	r3, r2
     bc0:	d0fc      	beq.n	bbc <myputchar+0x8>
  SERCOM0->USART.DATA.reg = s;
     bc2:	b280      	uxth	r0, r0
     bc4:	4b05      	ldr	r3, [pc, #20]	; (bdc <myputchar+0x28>)
     bc6:	8518      	strh	r0, [r3, #40]	; 0x28
}
     bc8:	4770      	bx	lr
  while (!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
     bca:	4904      	ldr	r1, [pc, #16]	; (bdc <myputchar+0x28>)
     bcc:	2201      	movs	r2, #1
     bce:	7e0b      	ldrb	r3, [r1, #24]
     bd0:	4213      	tst	r3, r2
     bd2:	d0fc      	beq.n	bce <myputchar+0x1a>
  SERCOM0->USART.DATA.reg = s;
     bd4:	220d      	movs	r2, #13
     bd6:	4b01      	ldr	r3, [pc, #4]	; (bdc <myputchar+0x28>)
     bd8:	851a      	strh	r2, [r3, #40]	; 0x28
     bda:	e7ed      	b.n	bb8 <myputchar+0x4>
     bdc:	42000800 	.word	0x42000800

00000be0 <tfp_printf>:

void tfp_printf(char *fmt, ...)
	{
     be0:	b40f      	push	{r0, r1, r2, r3}
     be2:	b5f0      	push	{r4, r5, r6, r7, lr}
     be4:	46de      	mov	lr, fp
     be6:	4657      	mov	r7, sl
     be8:	464e      	mov	r6, r9
     bea:	4645      	mov	r5, r8
     bec:	b5e0      	push	{r5, r6, r7, lr}
     bee:	b087      	sub	sp, #28
     bf0:	ab10      	add	r3, sp, #64	; 0x40
     bf2:	cb80      	ldmia	r3!, {r7}
	va_list va;
	char ch;
	char* p;
	
	va_start(va,fmt);
     bf4:	9305      	str	r3, [sp, #20]
				while (ch>='0' && ch<='9') {
					w=(((w<<2)+w)<<1)+ch-'0';
					ch=*fmt++;
					}
				}
			bf=buf;
     bf6:	4b73      	ldr	r3, [pc, #460]	; (dc4 <tfp_printf+0x1e4>)
     bf8:	330c      	adds	r3, #12
     bfa:	9302      	str	r3, [sp, #8]
				case '%' :
					out('%');
				default:
					break;
				}
			*bf=0;
     bfc:	4b71      	ldr	r3, [pc, #452]	; (dc4 <tfp_printf+0x1e4>)
     bfe:	469a      	mov	sl, r3
			while (*bf++ && w > 0)
				w--;
			while (w-- > 0) 
				myputchar(lz ? '0' : ' ');
			while ((ch= *p++))
				myputchar(ch);
     c00:	4b71      	ldr	r3, [pc, #452]	; (dc8 <tfp_printf+0x1e8>)
     c02:	4698      	mov	r8, r3
			p=bf;
     c04:	4653      	mov	r3, sl
     c06:	330c      	adds	r3, #12
     c08:	9303      	str	r3, [sp, #12]
	while ((ch=*(fmt++))) {
     c0a:	e08c      	b.n	d26 <tfp_printf+0x146>
			ch=*(fmt++);
     c0c:	787b      	ldrb	r3, [r7, #1]
			if (ch=='0') {
     c0e:	2b30      	cmp	r3, #48	; 0x30
     c10:	d029      	beq.n	c66 <tfp_printf+0x86>
			ch=*(fmt++);
     c12:	3702      	adds	r7, #2
			char lz=0;
     c14:	2200      	movs	r2, #0
     c16:	4693      	mov	fp, r2
			char w=0;
     c18:	2400      	movs	r4, #0
			if (ch>='0' && ch<='9') {
     c1a:	001a      	movs	r2, r3
     c1c:	3a30      	subs	r2, #48	; 0x30
     c1e:	2a09      	cmp	r2, #9
     c20:	d80c      	bhi.n	c3c <tfp_printf+0x5c>
					w=(((w<<2)+w)<<1)+ch-'0';
     c22:	00a2      	lsls	r2, r4, #2
     c24:	18a4      	adds	r4, r4, r2
     c26:	0064      	lsls	r4, r4, #1
     c28:	3c30      	subs	r4, #48	; 0x30
     c2a:	18e4      	adds	r4, r4, r3
     c2c:	b2e4      	uxtb	r4, r4
					ch=*fmt++;
     c2e:	1c7a      	adds	r2, r7, #1
     c30:	783b      	ldrb	r3, [r7, #0]
     c32:	0017      	movs	r7, r2
				while (ch>='0' && ch<='9') {
     c34:	0019      	movs	r1, r3
     c36:	3930      	subs	r1, #48	; 0x30
     c38:	2909      	cmp	r1, #9
     c3a:	d9f2      	bls.n	c22 <tfp_printf+0x42>
			bf=buf;
     c3c:	4a61      	ldr	r2, [pc, #388]	; (dc4 <tfp_printf+0x1e4>)
     c3e:	9902      	ldr	r1, [sp, #8]
     c40:	6011      	str	r1, [r2, #0]
			zs=0;
     c42:	2200      	movs	r2, #0
     c44:	495f      	ldr	r1, [pc, #380]	; (dc4 <tfp_printf+0x1e4>)
     c46:	714a      	strb	r2, [r1, #5]
			switch (ch) {
     c48:	2b63      	cmp	r3, #99	; 0x63
     c4a:	d100      	bne.n	c4e <tfp_printf+0x6e>
     c4c:	e07d      	b.n	d4a <tfp_printf+0x16a>
     c4e:	d80f      	bhi.n	c70 <tfp_printf+0x90>
     c50:	2b25      	cmp	r3, #37	; 0x25
     c52:	d100      	bne.n	c56 <tfp_printf+0x76>
     c54:	e086      	b.n	d64 <tfp_printf+0x184>
     c56:	2b58      	cmp	r3, #88	; 0x58
     c58:	d011      	beq.n	c7e <tfp_printf+0x9e>
     c5a:	2b00      	cmp	r3, #0
     c5c:	d100      	bne.n	c60 <tfp_printf+0x80>
     c5e:	e0a6      	b.n	dae <tfp_printf+0x1ce>
			p=bf;
     c60:	4d58      	ldr	r5, [pc, #352]	; (dc4 <tfp_printf+0x1e4>)
     c62:	350c      	adds	r5, #12
     c64:	e03c      	b.n	ce0 <tfp_printf+0x100>
				ch=*(fmt++);
     c66:	78bb      	ldrb	r3, [r7, #2]
     c68:	3703      	adds	r7, #3
				lz=1;
     c6a:	2201      	movs	r2, #1
     c6c:	4693      	mov	fp, r2
     c6e:	e7d3      	b.n	c18 <tfp_printf+0x38>
			switch (ch) {
     c70:	2b73      	cmp	r3, #115	; 0x73
     c72:	d072      	beq.n	d5a <tfp_printf+0x17a>
     c74:	d91b      	bls.n	cae <tfp_printf+0xce>
     c76:	2b75      	cmp	r3, #117	; 0x75
     c78:	d01b      	beq.n	cb2 <tfp_printf+0xd2>
     c7a:	2b78      	cmp	r3, #120	; 0x78
     c7c:	d1f0      	bne.n	c60 <tfp_printf+0x80>
				    uc= ch=='X';
     c7e:	4d51      	ldr	r5, [pc, #324]	; (dc4 <tfp_printf+0x1e4>)
     c80:	3b58      	subs	r3, #88	; 0x58
     c82:	4259      	negs	r1, r3
     c84:	4159      	adcs	r1, r3
     c86:	7129      	strb	r1, [r5, #4]
					num=va_arg(va, unsigned int);
     c88:	9b05      	ldr	r3, [sp, #20]
     c8a:	1d1a      	adds	r2, r3, #4
     c8c:	9205      	str	r2, [sp, #20]
     c8e:	681b      	ldr	r3, [r3, #0]
     c90:	60ab      	str	r3, [r5, #8]
					divOut(0x1000);
     c92:	2080      	movs	r0, #128	; 0x80
     c94:	0140      	lsls	r0, r0, #5
     c96:	4e4d      	ldr	r6, [pc, #308]	; (dcc <tfp_printf+0x1ec>)
     c98:	47b0      	blx	r6
					divOut(0x100);
     c9a:	2080      	movs	r0, #128	; 0x80
     c9c:	0040      	lsls	r0, r0, #1
     c9e:	47b0      	blx	r6
					divOut(0x10);
     ca0:	2010      	movs	r0, #16
     ca2:	47b0      	blx	r6
					outDgt(num);
     ca4:	7a28      	ldrb	r0, [r5, #8]
     ca6:	4b4a      	ldr	r3, [pc, #296]	; (dd0 <tfp_printf+0x1f0>)
     ca8:	4798      	blx	r3
			p=bf;
     caa:	350c      	adds	r5, #12
					break;
     cac:	e018      	b.n	ce0 <tfp_printf+0x100>
			switch (ch) {
     cae:	2b64      	cmp	r3, #100	; 0x64
     cb0:	d1d6      	bne.n	c60 <tfp_printf+0x80>
					num=va_arg(va, unsigned int);
     cb2:	9a05      	ldr	r2, [sp, #20]
     cb4:	1d11      	adds	r1, r2, #4
     cb6:	9105      	str	r1, [sp, #20]
     cb8:	6812      	ldr	r2, [r2, #0]
     cba:	4942      	ldr	r1, [pc, #264]	; (dc4 <tfp_printf+0x1e4>)
     cbc:	608a      	str	r2, [r1, #8]
					if (ch=='d' && (int)num<0) {
     cbe:	2b64      	cmp	r3, #100	; 0x64
     cc0:	d03b      	beq.n	d3a <tfp_printf+0x15a>
					divOut(10000);
     cc2:	4844      	ldr	r0, [pc, #272]	; (dd4 <tfp_printf+0x1f4>)
     cc4:	4d41      	ldr	r5, [pc, #260]	; (dcc <tfp_printf+0x1ec>)
     cc6:	47a8      	blx	r5
					divOut(1000);
     cc8:	20fa      	movs	r0, #250	; 0xfa
     cca:	0080      	lsls	r0, r0, #2
     ccc:	47a8      	blx	r5
					divOut(100);
     cce:	2064      	movs	r0, #100	; 0x64
     cd0:	47a8      	blx	r5
					divOut(10);
     cd2:	200a      	movs	r0, #10
     cd4:	47a8      	blx	r5
					outDgt(num);
     cd6:	4d3b      	ldr	r5, [pc, #236]	; (dc4 <tfp_printf+0x1e4>)
     cd8:	7a28      	ldrb	r0, [r5, #8]
     cda:	4b3d      	ldr	r3, [pc, #244]	; (dd0 <tfp_printf+0x1f0>)
     cdc:	4798      	blx	r3
			p=bf;
     cde:	350c      	adds	r5, #12
			*bf=0;
     ce0:	2300      	movs	r3, #0
     ce2:	4652      	mov	r2, sl
     ce4:	6812      	ldr	r2, [r2, #0]
     ce6:	7013      	strb	r3, [r2, #0]
			while (*bf++ && w > 0)
     ce8:	1c6b      	adds	r3, r5, #1
     cea:	4699      	mov	r9, r3
     cec:	4653      	mov	r3, sl
     cee:	464a      	mov	r2, r9
     cf0:	601a      	str	r2, [r3, #0]
     cf2:	7828      	ldrb	r0, [r5, #0]
     cf4:	2800      	cmp	r0, #0
     cf6:	d055      	beq.n	da4 <tfp_printf+0x1c4>
     cf8:	2c00      	cmp	r4, #0
     cfa:	d00c      	beq.n	d16 <tfp_printf+0x136>
     cfc:	1caa      	adds	r2, r5, #2
				w--;
     cfe:	1e63      	subs	r3, r4, #1
     d00:	b2db      	uxtb	r3, r3
			while (*bf++ && w > 0)
     d02:	0011      	movs	r1, r2
     d04:	1e56      	subs	r6, r2, #1
     d06:	7836      	ldrb	r6, [r6, #0]
     d08:	2e00      	cmp	r6, #0
     d0a:	d03c      	beq.n	d86 <tfp_printf+0x1a6>
     d0c:	3201      	adds	r2, #1
				w--;
     d0e:	1e1c      	subs	r4, r3, #0
			while (*bf++ && w > 0)
     d10:	d1f5      	bne.n	cfe <tfp_printf+0x11e>
     d12:	4b2c      	ldr	r3, [pc, #176]	; (dc4 <tfp_printf+0x1e4>)
     d14:	6019      	str	r1, [r3, #0]
			while ((ch= *p++))
     d16:	7828      	ldrb	r0, [r5, #0]
     d18:	464d      	mov	r5, r9
				myputchar(ch);
     d1a:	47c0      	blx	r8
     d1c:	3501      	adds	r5, #1
			while ((ch= *p++))
     d1e:	1e6b      	subs	r3, r5, #1
     d20:	7818      	ldrb	r0, [r3, #0]
     d22:	2800      	cmp	r0, #0
     d24:	d1f9      	bne.n	d1a <tfp_printf+0x13a>
	while ((ch=*(fmt++))) {
     d26:	7838      	ldrb	r0, [r7, #0]
     d28:	2800      	cmp	r0, #0
     d2a:	d040      	beq.n	dae <tfp_printf+0x1ce>
		if (ch!='%') {
     d2c:	2825      	cmp	r0, #37	; 0x25
     d2e:	d100      	bne.n	d32 <tfp_printf+0x152>
     d30:	e76c      	b.n	c0c <tfp_printf+0x2c>
	while ((ch=*(fmt++))) {
     d32:	3701      	adds	r7, #1
			myputchar(ch);
     d34:	4b24      	ldr	r3, [pc, #144]	; (dc8 <tfp_printf+0x1e8>)
     d36:	4798      	blx	r3
     d38:	e7f5      	b.n	d26 <tfp_printf+0x146>
					if (ch=='d' && (int)num<0) {
     d3a:	2a00      	cmp	r2, #0
     d3c:	dac1      	bge.n	cc2 <tfp_printf+0xe2>
						num = -(int)num;
     d3e:	4252      	negs	r2, r2
     d40:	608a      	str	r2, [r1, #8]
						out('-');
     d42:	202d      	movs	r0, #45	; 0x2d
     d44:	4b24      	ldr	r3, [pc, #144]	; (dd8 <tfp_printf+0x1f8>)
     d46:	4798      	blx	r3
     d48:	e7bb      	b.n	cc2 <tfp_printf+0xe2>
					out((char)(va_arg(va, int)));
     d4a:	9b05      	ldr	r3, [sp, #20]
     d4c:	1d1a      	adds	r2, r3, #4
     d4e:	9205      	str	r2, [sp, #20]
     d50:	7818      	ldrb	r0, [r3, #0]
     d52:	4b21      	ldr	r3, [pc, #132]	; (dd8 <tfp_printf+0x1f8>)
     d54:	4798      	blx	r3
			p=bf;
     d56:	9d03      	ldr	r5, [sp, #12]
					break;
     d58:	e7c2      	b.n	ce0 <tfp_printf+0x100>
					p=va_arg(va, char*);
     d5a:	9b05      	ldr	r3, [sp, #20]
     d5c:	1d1a      	adds	r2, r3, #4
     d5e:	9205      	str	r2, [sp, #20]
     d60:	681d      	ldr	r5, [r3, #0]
					break;
     d62:	e7bd      	b.n	ce0 <tfp_printf+0x100>
					out('%');
     d64:	2025      	movs	r0, #37	; 0x25
     d66:	4b1c      	ldr	r3, [pc, #112]	; (dd8 <tfp_printf+0x1f8>)
     d68:	4798      	blx	r3
			p=bf;
     d6a:	4d16      	ldr	r5, [pc, #88]	; (dc4 <tfp_printf+0x1e4>)
     d6c:	350c      	adds	r5, #12
     d6e:	e7b7      	b.n	ce0 <tfp_printf+0x100>
			while (w-- > 0) 
     d70:	001e      	movs	r6, r3
				myputchar(lz ? '0' : ' ');
     d72:	9801      	ldr	r0, [sp, #4]
     d74:	47a0      	blx	r4
			while (w-- > 0) 
     d76:	1e73      	subs	r3, r6, #1
     d78:	b2db      	uxtb	r3, r3
     d7a:	2e00      	cmp	r6, #0
     d7c:	d1f8      	bne.n	d70 <tfp_printf+0x190>
			while ((ch= *p++))
     d7e:	7828      	ldrb	r0, [r5, #0]
     d80:	2800      	cmp	r0, #0
     d82:	d1c9      	bne.n	d18 <tfp_printf+0x138>
     d84:	e7cf      	b.n	d26 <tfp_printf+0x146>
     d86:	4a0f      	ldr	r2, [pc, #60]	; (dc4 <tfp_printf+0x1e4>)
     d88:	6011      	str	r1, [r2, #0]
			while (w-- > 0) 
     d8a:	3c02      	subs	r4, #2
     d8c:	b2e6      	uxtb	r6, r4
     d8e:	2b00      	cmp	r3, #0
     d90:	d0c2      	beq.n	d18 <tfp_printf+0x138>
     d92:	2420      	movs	r4, #32
     d94:	465b      	mov	r3, fp
     d96:	2b00      	cmp	r3, #0
     d98:	d000      	beq.n	d9c <tfp_printf+0x1bc>
     d9a:	2430      	movs	r4, #48	; 0x30
     d9c:	b2e3      	uxtb	r3, r4
     d9e:	9301      	str	r3, [sp, #4]
				myputchar(lz ? '0' : ' ');
     da0:	4c09      	ldr	r4, [pc, #36]	; (dc8 <tfp_printf+0x1e8>)
     da2:	e7e6      	b.n	d72 <tfp_printf+0x192>
			while (w-- > 0) 
     da4:	1e66      	subs	r6, r4, #1
     da6:	b2f6      	uxtb	r6, r6
     da8:	2c00      	cmp	r4, #0
     daa:	d1f2      	bne.n	d92 <tfp_printf+0x1b2>
     dac:	e7bb      	b.n	d26 <tfp_printf+0x146>
			}
		}
	abort:;
	va_end(va);
	}
     dae:	b007      	add	sp, #28
     db0:	bc3c      	pop	{r2, r3, r4, r5}
     db2:	4690      	mov	r8, r2
     db4:	4699      	mov	r9, r3
     db6:	46a2      	mov	sl, r4
     db8:	46ab      	mov	fp, r5
     dba:	bcf0      	pop	{r4, r5, r6, r7}
     dbc:	bc08      	pop	{r3}
     dbe:	b004      	add	sp, #16
     dc0:	4718      	bx	r3
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	20000464 	.word	0x20000464
     dc8:	00000bb5 	.word	0x00000bb5
     dcc:	00000b71 	.word	0x00000b71
     dd0:	00000b45 	.word	0x00000b45
     dd4:	00002710 	.word	0x00002710
     dd8:	00000b35 	.word	0x00000b35

00000ddc <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
     ddc:	f3ef 8010 	mrs	r0, PRIMASK
     de0:	b672      	cpsid	i
     de2:	4770      	bx	lr

00000de4 <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
     de4:	f380 8810 	msr	PRIMASK, r0
     de8:	4770      	bx	lr
     dea:	0000      	movs	r0, r0
     dec:	0000      	movs	r0, r0
	...

00000df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     df0:	f3ef 8009 	mrs	r0, PSP
     df4:	4b0e      	ldr	r3, [pc, #56]	; (e30 <pxCurrentTCBConst>)
     df6:	681a      	ldr	r2, [r3, #0]
     df8:	3820      	subs	r0, #32
     dfa:	6010      	str	r0, [r2, #0]
     dfc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     dfe:	4644      	mov	r4, r8
     e00:	464d      	mov	r5, r9
     e02:	4656      	mov	r6, sl
     e04:	465f      	mov	r7, fp
     e06:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     e08:	b508      	push	{r3, lr}
     e0a:	b672      	cpsid	i
     e0c:	f000 f8c6 	bl	f9c <vTaskSwitchContext>
     e10:	b662      	cpsie	i
     e12:	bc0c      	pop	{r2, r3}
     e14:	6811      	ldr	r1, [r2, #0]
     e16:	6808      	ldr	r0, [r1, #0]
     e18:	3010      	adds	r0, #16
     e1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     e1c:	46a0      	mov	r8, r4
     e1e:	46a9      	mov	r9, r5
     e20:	46b2      	mov	sl, r6
     e22:	46bb      	mov	fp, r7
     e24:	f380 8809 	msr	PSP, r0
     e28:	3820      	subs	r0, #32
     e2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     e2c:	4718      	bx	r3
     e2e:	46c0      	nop			; (mov r8, r8)

00000e30 <pxCurrentTCBConst>:
     e30:	20000530 	.word	0x20000530

00000e34 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     e34:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     e36:	4b07      	ldr	r3, [pc, #28]	; (e54 <SysTick_Handler+0x20>)
     e38:	4798      	blx	r3
     e3a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     e3c:	4b06      	ldr	r3, [pc, #24]	; (e58 <SysTick_Handler+0x24>)
     e3e:	4798      	blx	r3
     e40:	2800      	cmp	r0, #0
     e42:	d003      	beq.n	e4c <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     e44:	2280      	movs	r2, #128	; 0x80
     e46:	0552      	lsls	r2, r2, #21
     e48:	4b04      	ldr	r3, [pc, #16]	; (e5c <SysTick_Handler+0x28>)
     e4a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     e4c:	0020      	movs	r0, r4
     e4e:	4b04      	ldr	r3, [pc, #16]	; (e60 <SysTick_Handler+0x2c>)
     e50:	4798      	blx	r3
}
     e52:	bd10      	pop	{r4, pc}
     e54:	00000ddd 	.word	0x00000ddd
     e58:	00000e8d 	.word	0x00000e8d
     e5c:	e000ed04 	.word	0xe000ed04
     e60:	00000de5 	.word	0x00000de5

00000e64 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     e64:	4b08      	ldr	r3, [pc, #32]	; (e88 <prvResetNextTaskUnblockTime+0x24>)
     e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	2b00      	cmp	r3, #0
     e6c:	d006      	beq.n	e7c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     e6e:	4b06      	ldr	r3, [pc, #24]	; (e88 <prvResetNextTaskUnblockTime+0x24>)
     e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     e72:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     e74:	68d2      	ldr	r2, [r2, #12]
     e76:	6852      	ldr	r2, [r2, #4]
     e78:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
     e7a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
     e7c:	2201      	movs	r2, #1
     e7e:	4252      	negs	r2, r2
     e80:	4b01      	ldr	r3, [pc, #4]	; (e88 <prvResetNextTaskUnblockTime+0x24>)
     e82:	62da      	str	r2, [r3, #44]	; 0x2c
     e84:	e7f9      	b.n	e7a <prvResetNextTaskUnblockTime+0x16>
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	2000047c 	.word	0x2000047c

00000e8c <xTaskIncrementTick>:
{
     e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e8e:	46ce      	mov	lr, r9
     e90:	4647      	mov	r7, r8
     e92:	b580      	push	{r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     e94:	4b3b      	ldr	r3, [pc, #236]	; (f84 <xTaskIncrementTick+0xf8>)
     e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     e98:	2b00      	cmp	r3, #0
     e9a:	d164      	bne.n	f66 <xTaskIncrementTick+0xda>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
     e9c:	4b39      	ldr	r3, [pc, #228]	; (f84 <xTaskIncrementTick+0xf8>)
     e9e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
     ea0:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
     ea2:	631e      	str	r6, [r3, #48]	; 0x30
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
     ea4:	2e00      	cmp	r6, #0
     ea6:	d111      	bne.n	ecc <xTaskIncrementTick+0x40>
			taskSWITCH_DELAYED_LISTS();
     ea8:	4b37      	ldr	r3, [pc, #220]	; (f88 <xTaskIncrementTick+0xfc>)
     eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     eac:	681b      	ldr	r3, [r3, #0]
     eae:	2b00      	cmp	r3, #0
     eb0:	d001      	beq.n	eb6 <xTaskIncrementTick+0x2a>
     eb2:	b672      	cpsid	i
     eb4:	e7fe      	b.n	eb4 <xTaskIncrementTick+0x28>
     eb6:	4a34      	ldr	r2, [pc, #208]	; (f88 <xTaskIncrementTick+0xfc>)
     eb8:	6a91      	ldr	r1, [r2, #40]	; 0x28
     eba:	4b32      	ldr	r3, [pc, #200]	; (f84 <xTaskIncrementTick+0xf8>)
     ebc:	6b98      	ldr	r0, [r3, #56]	; 0x38
     ebe:	6290      	str	r0, [r2, #40]	; 0x28
     ec0:	6399      	str	r1, [r3, #56]	; 0x38
     ec2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
     ec4:	3201      	adds	r2, #1
     ec6:	679a      	str	r2, [r3, #120]	; 0x78
     ec8:	4b30      	ldr	r3, [pc, #192]	; (f8c <xTaskIncrementTick+0x100>)
     eca:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
     ecc:	4b2e      	ldr	r3, [pc, #184]	; (f88 <xTaskIncrementTick+0xfc>)
     ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
BaseType_t xSwitchRequired = pdFALSE;
     ed0:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
     ed2:	429e      	cmp	r6, r3
     ed4:	d337      	bcc.n	f46 <xTaskIncrementTick+0xba>
     ed6:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     ed8:	4b2b      	ldr	r3, [pc, #172]	; (f88 <xTaskIncrementTick+0xfc>)
     eda:	4699      	mov	r9, r3
					prvAddTaskToReadyList( pxTCB );
     edc:	224c      	movs	r2, #76	; 0x4c
     ede:	4694      	mov	ip, r2
     ee0:	4463      	add	r3, ip
     ee2:	4698      	mov	r8, r3
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     ee4:	464b      	mov	r3, r9
     ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ee8:	681b      	ldr	r3, [r3, #0]
     eea:	2b00      	cmp	r3, #0
     eec:	d027      	beq.n	f3e <xTaskIncrementTick+0xb2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     eee:	4b26      	ldr	r3, [pc, #152]	; (f88 <xTaskIncrementTick+0xfc>)
     ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ef2:	68db      	ldr	r3, [r3, #12]
     ef4:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
     ef6:	687b      	ldr	r3, [r7, #4]
					if( xConstTickCount < xItemValue )
     ef8:	429e      	cmp	r6, r3
     efa:	d331      	bcc.n	f60 <xTaskIncrementTick+0xd4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     efc:	1d3d      	adds	r5, r7, #4
     efe:	0028      	movs	r0, r5
     f00:	4b23      	ldr	r3, [pc, #140]	; (f90 <xTaskIncrementTick+0x104>)
     f02:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f06:	2b00      	cmp	r3, #0
     f08:	d003      	beq.n	f12 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     f0a:	0038      	movs	r0, r7
     f0c:	3018      	adds	r0, #24
     f0e:	4b20      	ldr	r3, [pc, #128]	; (f90 <xTaskIncrementTick+0x104>)
     f10:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
     f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f14:	4a1b      	ldr	r2, [pc, #108]	; (f84 <xTaskIncrementTick+0xf8>)
     f16:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
     f18:	4293      	cmp	r3, r2
     f1a:	d901      	bls.n	f20 <xTaskIncrementTick+0x94>
     f1c:	4a19      	ldr	r2, [pc, #100]	; (f84 <xTaskIncrementTick+0xf8>)
     f1e:	66d3      	str	r3, [r2, #108]	; 0x6c
     f20:	0098      	lsls	r0, r3, #2
     f22:	18c0      	adds	r0, r0, r3
     f24:	0080      	lsls	r0, r0, #2
     f26:	4440      	add	r0, r8
     f28:	0029      	movs	r1, r5
     f2a:	4b1a      	ldr	r3, [pc, #104]	; (f94 <xTaskIncrementTick+0x108>)
     f2c:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     f2e:	4b15      	ldr	r3, [pc, #84]	; (f84 <xTaskIncrementTick+0xf8>)
     f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     f36:	429a      	cmp	r2, r3
     f38:	d3d4      	bcc.n	ee4 <xTaskIncrementTick+0x58>
							xSwitchRequired = pdTRUE;
     f3a:	2401      	movs	r4, #1
     f3c:	e7d2      	b.n	ee4 <xTaskIncrementTick+0x58>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     f3e:	2201      	movs	r2, #1
     f40:	4252      	negs	r2, r2
     f42:	4b11      	ldr	r3, [pc, #68]	; (f88 <xTaskIncrementTick+0xfc>)
     f44:	62da      	str	r2, [r3, #44]	; 0x2c
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     f46:	4b0f      	ldr	r3, [pc, #60]	; (f84 <xTaskIncrementTick+0xf8>)
     f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     f4c:	0093      	lsls	r3, r2, #2
     f4e:	189b      	adds	r3, r3, r2
     f50:	009b      	lsls	r3, r3, #2
     f52:	4a0d      	ldr	r2, [pc, #52]	; (f88 <xTaskIncrementTick+0xfc>)
     f54:	18d3      	adds	r3, r2, r3
     f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     f58:	2b01      	cmp	r3, #1
     f5a:	d909      	bls.n	f70 <xTaskIncrementTick+0xe4>
				xSwitchRequired = pdTRUE;
     f5c:	2401      	movs	r4, #1
     f5e:	e007      	b.n	f70 <xTaskIncrementTick+0xe4>
						xNextTaskUnblockTime = xItemValue;
     f60:	4a09      	ldr	r2, [pc, #36]	; (f88 <xTaskIncrementTick+0xfc>)
     f62:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
     f64:	e7ef      	b.n	f46 <xTaskIncrementTick+0xba>
		++uxPendedTicks;
     f66:	4a07      	ldr	r2, [pc, #28]	; (f84 <xTaskIncrementTick+0xf8>)
     f68:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
     f6a:	3301      	adds	r3, #1
     f6c:	67d3      	str	r3, [r2, #124]	; 0x7c
BaseType_t xSwitchRequired = pdFALSE;
     f6e:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
     f70:	4b09      	ldr	r3, [pc, #36]	; (f98 <xTaskIncrementTick+0x10c>)
     f72:	681b      	ldr	r3, [r3, #0]
     f74:	2b00      	cmp	r3, #0
     f76:	d000      	beq.n	f7a <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
     f78:	2401      	movs	r4, #1
}
     f7a:	0020      	movs	r0, r4
     f7c:	bc0c      	pop	{r2, r3}
     f7e:	4690      	mov	r8, r2
     f80:	4699      	mov	r9, r3
     f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f84:	200004fc 	.word	0x200004fc
     f88:	2000047c 	.word	0x2000047c
     f8c:	00000e65 	.word	0x00000e65
     f90:	00000b0d 	.word	0x00000b0d
     f94:	00000af5 	.word	0x00000af5
     f98:	2000057c 	.word	0x2000057c

00000f9c <vTaskSwitchContext>:
{
     f9c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     f9e:	4b21      	ldr	r3, [pc, #132]	; (1024 <vTaskSwitchContext+0x88>)
     fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     fa2:	2b00      	cmp	r3, #0
     fa4:	d11a      	bne.n	fdc <vTaskSwitchContext+0x40>
		xYieldPending = pdFALSE;
     fa6:	2200      	movs	r2, #0
     fa8:	4b1f      	ldr	r3, [pc, #124]	; (1028 <vTaskSwitchContext+0x8c>)
     faa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
     fac:	4b1d      	ldr	r3, [pc, #116]	; (1024 <vTaskSwitchContext+0x88>)
     fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     fb0:	009a      	lsls	r2, r3, #2
     fb2:	18d2      	adds	r2, r2, r3
     fb4:	0092      	lsls	r2, r2, #2
     fb6:	491d      	ldr	r1, [pc, #116]	; (102c <vTaskSwitchContext+0x90>)
     fb8:	188a      	adds	r2, r1, r2
     fba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
     fbc:	2a00      	cmp	r2, #0
     fbe:	d111      	bne.n	fe4 <vTaskSwitchContext+0x48>
     fc0:	2b00      	cmp	r3, #0
     fc2:	d009      	beq.n	fd8 <vTaskSwitchContext+0x3c>
     fc4:	3b01      	subs	r3, #1
     fc6:	009a      	lsls	r2, r3, #2
     fc8:	18d2      	adds	r2, r2, r3
     fca:	0092      	lsls	r2, r2, #2
     fcc:	188a      	adds	r2, r1, r2
     fce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
     fd0:	2a00      	cmp	r2, #0
     fd2:	d107      	bne.n	fe4 <vTaskSwitchContext+0x48>
     fd4:	2b00      	cmp	r3, #0
     fd6:	d1f5      	bne.n	fc4 <vTaskSwitchContext+0x28>
     fd8:	b672      	cpsid	i
     fda:	e7fe      	b.n	fda <vTaskSwitchContext+0x3e>
		xYieldPending = pdTRUE;
     fdc:	2201      	movs	r2, #1
     fde:	4b12      	ldr	r3, [pc, #72]	; (1028 <vTaskSwitchContext+0x8c>)
     fe0:	601a      	str	r2, [r3, #0]
}
     fe2:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
     fe4:	4a11      	ldr	r2, [pc, #68]	; (102c <vTaskSwitchContext+0x90>)
     fe6:	0099      	lsls	r1, r3, #2
     fe8:	18c8      	adds	r0, r1, r3
     fea:	0080      	lsls	r0, r0, #2
     fec:	1810      	adds	r0, r2, r0
     fee:	6d04      	ldr	r4, [r0, #80]	; 0x50
     ff0:	6864      	ldr	r4, [r4, #4]
     ff2:	6504      	str	r4, [r0, #80]	; 0x50
     ff4:	18c9      	adds	r1, r1, r3
     ff6:	0089      	lsls	r1, r1, #2
     ff8:	0002      	movs	r2, r0
     ffa:	3254      	adds	r2, #84	; 0x54
     ffc:	4294      	cmp	r4, r2
     ffe:	d00a      	beq.n	1016 <vTaskSwitchContext+0x7a>
    1000:	009a      	lsls	r2, r3, #2
    1002:	18d2      	adds	r2, r2, r3
    1004:	0092      	lsls	r2, r2, #2
    1006:	4909      	ldr	r1, [pc, #36]	; (102c <vTaskSwitchContext+0x90>)
    1008:	188a      	adds	r2, r1, r2
    100a:	6d12      	ldr	r2, [r2, #80]	; 0x50
    100c:	68d1      	ldr	r1, [r2, #12]
    100e:	4a05      	ldr	r2, [pc, #20]	; (1024 <vTaskSwitchContext+0x88>)
    1010:	6351      	str	r1, [r2, #52]	; 0x34
    1012:	66d3      	str	r3, [r2, #108]	; 0x6c
}
    1014:	e7e5      	b.n	fe2 <vTaskSwitchContext+0x46>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1016:	6860      	ldr	r0, [r4, #4]
    1018:	000a      	movs	r2, r1
    101a:	4904      	ldr	r1, [pc, #16]	; (102c <vTaskSwitchContext+0x90>)
    101c:	188a      	adds	r2, r1, r2
    101e:	6510      	str	r0, [r2, #80]	; 0x50
    1020:	e7ee      	b.n	1000 <vTaskSwitchContext+0x64>
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	200004fc 	.word	0x200004fc
    1028:	2000057c 	.word	0x2000057c
    102c:	2000047c 	.word	0x2000047c

00001030 <initUART>:
/* Replace with your library code */
void initUART(void) {

	/* APBCMASK */
   /* SERCOM 0 enable*/
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
    1030:	4a1f      	ldr	r2, [pc, #124]	; (10b0 <initUART+0x80>)
    1032:	6a13      	ldr	r3, [r2, #32]
    1034:	2104      	movs	r1, #4
    1036:	430b      	orrs	r3, r1
    1038:	6213      	str	r3, [r2, #32]

	/*GCLK configuration for sercom0 module: using generic clock generator 0, ID for sercom0, enable GCLK*/
    GCLK->GENCTRL.reg=GCLK_GENCTRL_SRC_OSC8M|GCLK_GENCTRL_ID(0)|
    103a:	4b1e      	ldr	r3, [pc, #120]	; (10b4 <initUART+0x84>)
    103c:	2283      	movs	r2, #131	; 0x83
    103e:	0252      	lsls	r2, r2, #9
    1040:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_GENEN;

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    1042:	4a1d      	ldr	r2, [pc, #116]	; (10b8 <initUART+0x88>)
    1044:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);

  /*CONFIGURAR PA10 y PA11 como salidas tipo C (SERCOM 0) */
  PORT->Group[0].PINCFG[PIN_PA10].reg= PA10_TX;
    1046:	4b1d      	ldr	r3, [pc, #116]	; (10bc <initUART+0x8c>)
    1048:	3903      	subs	r1, #3
    104a:	224a      	movs	r2, #74	; 0x4a
    104c:	5499      	strb	r1, [r3, r2]
  PORT->Group[0].PINCFG[PIN_PA11].reg= PA11_RX;
    104e:	3106      	adds	r1, #6
    1050:	3201      	adds	r2, #1
    1052:	5499      	strb	r1, [r3, r2]
  PORT->Group[0].PMUX[5].bit.PMUXE=Type_C;
    1054:	312e      	adds	r1, #46	; 0x2e
    1056:	5c5a      	ldrb	r2, [r3, r1]
    1058:	200f      	movs	r0, #15
    105a:	4382      	bics	r2, r0
    105c:	2002      	movs	r0, #2
    105e:	4302      	orrs	r2, r0
    1060:	545a      	strb	r2, [r3, r1]
  PORT->Group[0].PMUX[5].bit.PMUXO=Type_C;
    1062:	5c58      	ldrb	r0, [r3, r1]
    1064:	220f      	movs	r2, #15
    1066:	4002      	ands	r2, r0
    1068:	2020      	movs	r0, #32
    106a:	4302      	orrs	r2, r0
    106c:	545a      	strb	r2, [r3, r1]
	
	//desahibilitar UART para inicializacion
	SERCOM0->USART.CTRLA.bit.ENABLE=0;
    106e:	4b14      	ldr	r3, [pc, #80]	; (10c0 <initUART+0x90>)
    1070:	681a      	ldr	r2, [r3, #0]
    1072:	3933      	subs	r1, #51	; 0x33
    1074:	438a      	bics	r2, r1
    1076:	601a      	str	r2, [r3, #0]
   
   DEFINES:
   1)SERCOM_USART_CTRLA_DORD (_U(0x1) << SERCOM_USART_CTRLA_DORD_Pos)
   2)SERCOM_USART_CTRLA_MODE_USART_INT_CLK (0x1 << 2)
   3)SERCOM_USART_CTRLA_RXPO(value) (SERCOM_USART_CTRLA_RXPO_Msk & ((value) << SERCOM_USART_CTRLA_RXPO_Pos) */
	SERCOM0->USART.CTRLA.reg =
    1078:	4a12      	ldr	r2, [pc, #72]	; (10c4 <initUART+0x94>)
    107a:	601a      	str	r2, [r3, #0]
	SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
	SERCOM_USART_CTRLA_RXPO(3) | SERCOM_USART_CTRLA_TXPO(1);
	
	while(SERCOM0->USART.SYNCBUSY.reg){} // waiting loading
    107c:	001a      	movs	r2, r3
    107e:	69d3      	ldr	r3, [r2, #28]
    1080:	2b00      	cmp	r3, #0
    1082:	d1fc      	bne.n	107e <initUART+0x4e>
	uint64_t br = (uint64_t)65536 * (8000000 - 16 * 9600) / 8000000;

	SERCOM0->USART.BAUD.reg = (uint16_t)br;
    1084:	4a10      	ldr	r2, [pc, #64]	; (10c8 <initUART+0x98>)
    1086:	4b0e      	ldr	r3, [pc, #56]	; (10c0 <initUART+0x90>)
    1088:	819a      	strh	r2, [r3, #12]
	
	while(SERCOM0->USART.SYNCBUSY.reg){} // waiting loading
    108a:	001a      	movs	r2, r3
    108c:	69d3      	ldr	r3, [r2, #28]
    108e:	2b00      	cmp	r3, #0
    1090:	d1fc      	bne.n	108c <initUART+0x5c>
	SERCOM0->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_CHSIZE(0/*8 bits*/);
    1092:	22c0      	movs	r2, #192	; 0xc0
    1094:	0292      	lsls	r2, r2, #10
    1096:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <initUART+0x90>)
    1098:	605a      	str	r2, [r3, #4]
    while(SERCOM0->USART.SYNCBUSY.reg){} // waiting loading
    109a:	001a      	movs	r2, r3
    109c:	69d3      	ldr	r3, [r2, #28]
    109e:	2b00      	cmp	r3, #0
    10a0:	d1fc      	bne.n	109c <initUART+0x6c>
	SERCOM0->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    10a2:	4a07      	ldr	r2, [pc, #28]	; (10c0 <initUART+0x90>)
    10a4:	6813      	ldr	r3, [r2, #0]
    10a6:	2102      	movs	r1, #2
    10a8:	430b      	orrs	r3, r1
    10aa:	6013      	str	r3, [r2, #0]
}
    10ac:	4770      	bx	lr
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	40000400 	.word	0x40000400
    10b4:	40000c00 	.word	0x40000c00
    10b8:	00004014 	.word	0x00004014
    10bc:	41004400 	.word	0x41004400
    10c0:	42000800 	.word	0x42000800
    10c4:	40310004 	.word	0x40310004
    10c8:	fffffb15 	.word	0xfffffb15

000010cc <initSPI>:
#include "spi.h"

void initSPI(void) {
	
	// SLAVE SELECT PIN 8 ARDUINO
	REG_PORT_DIRSET0 = PORT_PA06;
    10cc:	4a15      	ldr	r2, [pc, #84]	; (1124 <initSPI+0x58>)
    10ce:	2140      	movs	r1, #64	; 0x40
    10d0:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTSET0 = PORT_PA06;
    10d2:	4b15      	ldr	r3, [pc, #84]	; (1128 <initSPI+0x5c>)
    10d4:	6019      	str	r1, [r3, #0]
	// SLAVE SELECT PIN 9 ARDUINO
	REG_PORT_DIRSET0 = PORT_PA07;
    10d6:	3140      	adds	r1, #64	; 0x40
    10d8:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTSET0 = PORT_PA07;
    10da:	6019      	str	r1, [r3, #0]
	// SLAVE SELECT PIN 10 ARDUINO
	REG_PORT_DIRSET0 = PORT_PA18;
    10dc:	2180      	movs	r1, #128	; 0x80
    10de:	02c9      	lsls	r1, r1, #11
    10e0:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTSET0 = PORT_PA18;
    10e2:	6019      	str	r1, [r3, #0]
	
	// INIT SPI PROTOCOL
	PM->APBCMASK.bit.SERCOM1_ = 1;
    10e4:	4a11      	ldr	r2, [pc, #68]	; (112c <initSPI+0x60>)
    10e6:	6a13      	ldr	r3, [r2, #32]
    10e8:	2108      	movs	r1, #8
    10ea:	430b      	orrs	r3, r1
    10ec:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    10ee:	4a10      	ldr	r2, [pc, #64]	; (1130 <initSPI+0x64>)
    10f0:	4b10      	ldr	r3, [pc, #64]	; (1134 <initSPI+0x68>)
    10f2:	805a      	strh	r2, [r3, #2]
	while(GCLK->STATUS.bit.SYNCBUSY);
    10f4:	001a      	movs	r2, r3
    10f6:	7853      	ldrb	r3, [r2, #1]
    10f8:	09db      	lsrs	r3, r3, #7
    10fa:	d1fc      	bne.n	10f6 <initSPI+0x2a>
		.bit.FORM = 0, // SPI frame
		.bit.DIPO = 3, // MISO on PAD[3]
		.bit.DOPO = 0, // MOSI on PAD[0], SCK on PAD[1], SS_ on PAD[2]
		.bit.MODE = 3  // Master
	};
	SERCOM1->SPI.CTRLA.reg = ctrla.reg;
    10fc:	4a0e      	ldr	r2, [pc, #56]	; (1138 <initSPI+0x6c>)
    10fe:	4b0f      	ldr	r3, [pc, #60]	; (113c <initSPI+0x70>)
    1100:	6811      	ldr	r1, [r2, #0]
    1102:	6019      	str	r1, [r3, #0]
	const SERCOM_SPI_CTRLB_Type ctrlb = {
    1104:	2180      	movs	r1, #128	; 0x80
    1106:	0289      	lsls	r1, r1, #10
		.bit.RXEN = 1,   // RX enabled
		.bit.MSSEN = 0,  // Manual SC
		.bit.CHSIZE = 0 // 8-bit
	};
	SERCOM1->SPI.CTRLB.reg = ctrlb.reg;
    1108:	6059      	str	r1, [r3, #4]

	SERCOM1->SPI.BAUD.reg = 2; // Rate is clock / 2
    110a:	2102      	movs	r1, #2
    110c:	7319      	strb	r1, [r3, #12]
		.bit.PMUX = MUX_PA16C_SERCOM1_PAD0,
		.bit.PMUXEN = 1,
		.bit.HWSEL = 1,
		.bit.PINMASK = (uint16_t)((PORT_PA16 | PORT_PA17 | PORT_PA19) >> 16)
	};
	PORT->Group[0].WRCONFIG.reg = wrconfig.reg;
    110e:	6850      	ldr	r0, [r2, #4]
    1110:	4a0b      	ldr	r2, [pc, #44]	; (1140 <initSPI+0x74>)
    1112:	6290      	str	r0, [r2, #40]	; 0x28

	SERCOM1->SPI.CTRLA.bit.ENABLE = 1;
    1114:	681a      	ldr	r2, [r3, #0]
    1116:	430a      	orrs	r2, r1
    1118:	601a      	str	r2, [r3, #0]
	while(SERCOM1->SPI.SYNCBUSY.bit.ENABLE);
    111a:	001a      	movs	r2, r3
    111c:	69d3      	ldr	r3, [r2, #28]
    111e:	079b      	lsls	r3, r3, #30
    1120:	d4fc      	bmi.n	111c <initSPI+0x50>
}
    1122:	4770      	bx	lr
    1124:	41004408 	.word	0x41004408
    1128:	41004418 	.word	0x41004418
    112c:	40000400 	.word	0x40000400
    1130:	00004015 	.word	0x00004015
    1134:	40000c00 	.word	0x40000c00
    1138:	00002a1c 	.word	0x00002a1c
    113c:	42000c00 	.word	0x42000c00
    1140:	41004400 	.word	0x41004400

00001144 <spiSend>:

uint8_t spiSend(uint8_t data) {
	uint8_t ret;
	while(SERCOM1->SPI.INTFLAG.bit.DRE == 0);
    1144:	4a08      	ldr	r2, [pc, #32]	; (1168 <spiSend+0x24>)
    1146:	7e13      	ldrb	r3, [r2, #24]
    1148:	07db      	lsls	r3, r3, #31
    114a:	d5fc      	bpl.n	1146 <spiSend+0x2>
	SERCOM1->SPI.DATA.reg = data;
    114c:	4b06      	ldr	r3, [pc, #24]	; (1168 <spiSend+0x24>)
    114e:	6298      	str	r0, [r3, #40]	; 0x28
	while(SERCOM1->SPI.INTFLAG.bit.TXC == 0);
    1150:	001a      	movs	r2, r3
    1152:	7e13      	ldrb	r3, [r2, #24]
    1154:	079b      	lsls	r3, r3, #30
    1156:	d5fc      	bpl.n	1152 <spiSend+0xe>
	while(SERCOM1->SPI.INTFLAG.bit.RXC == 0);
    1158:	4a03      	ldr	r2, [pc, #12]	; (1168 <spiSend+0x24>)
    115a:	7e13      	ldrb	r3, [r2, #24]
    115c:	075b      	lsls	r3, r3, #29
    115e:	d5fc      	bpl.n	115a <spiSend+0x16>
	ret = SERCOM1->SPI.DATA.reg;
    1160:	4b01      	ldr	r3, [pc, #4]	; (1168 <spiSend+0x24>)
    1162:	6a98      	ldr	r0, [r3, #40]	; 0x28
	return ret;
    1164:	b2c0      	uxtb	r0, r0
}
    1166:	4770      	bx	lr
    1168:	42000c00 	.word	0x42000c00

0000116c <spiSS>:

uint8_t spiSS(uint8_t device)
{
    116c:	b510      	push	{r4, lr}
    116e:	0004      	movs	r4, r0
	spiSend(0xFF);
    1170:	20ff      	movs	r0, #255	; 0xff
    1172:	4b0d      	ldr	r3, [pc, #52]	; (11a8 <spiSS+0x3c>)
    1174:	4798      	blx	r3
	int ret = 0;
	switch (device)
    1176:	2c01      	cmp	r4, #1
    1178:	d00c      	beq.n	1194 <spiSS+0x28>
    117a:	2c00      	cmp	r4, #0
    117c:	d003      	beq.n	1186 <spiSS+0x1a>
    117e:	2c02      	cmp	r4, #2
    1180:	d00d      	beq.n	119e <spiSS+0x32>
		case SLAVE_CAN_1:
		REG_PORT_OUTCLR0 = PORT_PA06;
		break;
		
		default:
		ret = 1;
    1182:	2001      	movs	r0, #1
    1184:	e004      	b.n	1190 <spiSS+0x24>
		REG_PORT_OUTCLR0 = PORT_PA18;
    1186:	2280      	movs	r2, #128	; 0x80
    1188:	02d2      	lsls	r2, r2, #11
    118a:	4b08      	ldr	r3, [pc, #32]	; (11ac <spiSS+0x40>)
    118c:	601a      	str	r2, [r3, #0]
	int ret = 0;
    118e:	2000      	movs	r0, #0
		break;
	}
	return ret;
    1190:	b2c0      	uxtb	r0, r0
}
    1192:	bd10      	pop	{r4, pc}
		REG_PORT_OUTCLR0 = PORT_PA07;
    1194:	2280      	movs	r2, #128	; 0x80
    1196:	4b05      	ldr	r3, [pc, #20]	; (11ac <spiSS+0x40>)
    1198:	601a      	str	r2, [r3, #0]
	int ret = 0;
    119a:	2000      	movs	r0, #0
		break;
    119c:	e7f8      	b.n	1190 <spiSS+0x24>
		REG_PORT_OUTCLR0 = PORT_PA06;
    119e:	2240      	movs	r2, #64	; 0x40
    11a0:	4b02      	ldr	r3, [pc, #8]	; (11ac <spiSS+0x40>)
    11a2:	601a      	str	r2, [r3, #0]
	int ret = 0;
    11a4:	2000      	movs	r0, #0
		break;
    11a6:	e7f3      	b.n	1190 <spiSS+0x24>
    11a8:	00001145 	.word	0x00001145
    11ac:	41004414 	.word	0x41004414

000011b0 <spiSR>:

uint8_t spiSR(uint8_t device)
{
	int ret = 0;
	switch (device)
    11b0:	2801      	cmp	r0, #1
    11b2:	d00c      	beq.n	11ce <spiSR+0x1e>
    11b4:	2800      	cmp	r0, #0
    11b6:	d003      	beq.n	11c0 <spiSR+0x10>
    11b8:	2802      	cmp	r0, #2
    11ba:	d00d      	beq.n	11d8 <spiSR+0x28>
		case SLAVE_CAN_1:
		REG_PORT_OUTSET0 = PORT_PA06;
		break;
		
		default:
		ret = 1;
    11bc:	2001      	movs	r0, #1
    11be:	e004      	b.n	11ca <spiSR+0x1a>
		REG_PORT_OUTSET0 = PORT_PA18;
    11c0:	2280      	movs	r2, #128	; 0x80
    11c2:	02d2      	lsls	r2, r2, #11
    11c4:	4b07      	ldr	r3, [pc, #28]	; (11e4 <spiSR+0x34>)
    11c6:	601a      	str	r2, [r3, #0]
	int ret = 0;
    11c8:	2000      	movs	r0, #0
		break;
	}
	return ret;
    11ca:	b2c0      	uxtb	r0, r0
    11cc:	4770      	bx	lr
		REG_PORT_OUTSET0 = PORT_PA07;
    11ce:	2280      	movs	r2, #128	; 0x80
    11d0:	4b04      	ldr	r3, [pc, #16]	; (11e4 <spiSR+0x34>)
    11d2:	601a      	str	r2, [r3, #0]
	int ret = 0;
    11d4:	2000      	movs	r0, #0
		break;
    11d6:	e7f8      	b.n	11ca <spiSR+0x1a>
		REG_PORT_OUTSET0 = PORT_PA06;
    11d8:	2240      	movs	r2, #64	; 0x40
    11da:	4b02      	ldr	r3, [pc, #8]	; (11e4 <spiSR+0x34>)
    11dc:	601a      	str	r2, [r3, #0]
	int ret = 0;
    11de:	2000      	movs	r0, #0
		break;
    11e0:	e7f3      	b.n	11ca <spiSR+0x1a>
    11e2:	46c0      	nop			; (mov r8, r8)
    11e4:	41004418 	.word	0x41004418

000011e8 <__udivsi3>:
    11e8:	2200      	movs	r2, #0
    11ea:	0843      	lsrs	r3, r0, #1
    11ec:	428b      	cmp	r3, r1
    11ee:	d374      	bcc.n	12da <__udivsi3+0xf2>
    11f0:	0903      	lsrs	r3, r0, #4
    11f2:	428b      	cmp	r3, r1
    11f4:	d35f      	bcc.n	12b6 <__udivsi3+0xce>
    11f6:	0a03      	lsrs	r3, r0, #8
    11f8:	428b      	cmp	r3, r1
    11fa:	d344      	bcc.n	1286 <__udivsi3+0x9e>
    11fc:	0b03      	lsrs	r3, r0, #12
    11fe:	428b      	cmp	r3, r1
    1200:	d328      	bcc.n	1254 <__udivsi3+0x6c>
    1202:	0c03      	lsrs	r3, r0, #16
    1204:	428b      	cmp	r3, r1
    1206:	d30d      	bcc.n	1224 <__udivsi3+0x3c>
    1208:	22ff      	movs	r2, #255	; 0xff
    120a:	0209      	lsls	r1, r1, #8
    120c:	ba12      	rev	r2, r2
    120e:	0c03      	lsrs	r3, r0, #16
    1210:	428b      	cmp	r3, r1
    1212:	d302      	bcc.n	121a <__udivsi3+0x32>
    1214:	1212      	asrs	r2, r2, #8
    1216:	0209      	lsls	r1, r1, #8
    1218:	d065      	beq.n	12e6 <__udivsi3+0xfe>
    121a:	0b03      	lsrs	r3, r0, #12
    121c:	428b      	cmp	r3, r1
    121e:	d319      	bcc.n	1254 <__udivsi3+0x6c>
    1220:	e000      	b.n	1224 <__udivsi3+0x3c>
    1222:	0a09      	lsrs	r1, r1, #8
    1224:	0bc3      	lsrs	r3, r0, #15
    1226:	428b      	cmp	r3, r1
    1228:	d301      	bcc.n	122e <__udivsi3+0x46>
    122a:	03cb      	lsls	r3, r1, #15
    122c:	1ac0      	subs	r0, r0, r3
    122e:	4152      	adcs	r2, r2
    1230:	0b83      	lsrs	r3, r0, #14
    1232:	428b      	cmp	r3, r1
    1234:	d301      	bcc.n	123a <__udivsi3+0x52>
    1236:	038b      	lsls	r3, r1, #14
    1238:	1ac0      	subs	r0, r0, r3
    123a:	4152      	adcs	r2, r2
    123c:	0b43      	lsrs	r3, r0, #13
    123e:	428b      	cmp	r3, r1
    1240:	d301      	bcc.n	1246 <__udivsi3+0x5e>
    1242:	034b      	lsls	r3, r1, #13
    1244:	1ac0      	subs	r0, r0, r3
    1246:	4152      	adcs	r2, r2
    1248:	0b03      	lsrs	r3, r0, #12
    124a:	428b      	cmp	r3, r1
    124c:	d301      	bcc.n	1252 <__udivsi3+0x6a>
    124e:	030b      	lsls	r3, r1, #12
    1250:	1ac0      	subs	r0, r0, r3
    1252:	4152      	adcs	r2, r2
    1254:	0ac3      	lsrs	r3, r0, #11
    1256:	428b      	cmp	r3, r1
    1258:	d301      	bcc.n	125e <__udivsi3+0x76>
    125a:	02cb      	lsls	r3, r1, #11
    125c:	1ac0      	subs	r0, r0, r3
    125e:	4152      	adcs	r2, r2
    1260:	0a83      	lsrs	r3, r0, #10
    1262:	428b      	cmp	r3, r1
    1264:	d301      	bcc.n	126a <__udivsi3+0x82>
    1266:	028b      	lsls	r3, r1, #10
    1268:	1ac0      	subs	r0, r0, r3
    126a:	4152      	adcs	r2, r2
    126c:	0a43      	lsrs	r3, r0, #9
    126e:	428b      	cmp	r3, r1
    1270:	d301      	bcc.n	1276 <__udivsi3+0x8e>
    1272:	024b      	lsls	r3, r1, #9
    1274:	1ac0      	subs	r0, r0, r3
    1276:	4152      	adcs	r2, r2
    1278:	0a03      	lsrs	r3, r0, #8
    127a:	428b      	cmp	r3, r1
    127c:	d301      	bcc.n	1282 <__udivsi3+0x9a>
    127e:	020b      	lsls	r3, r1, #8
    1280:	1ac0      	subs	r0, r0, r3
    1282:	4152      	adcs	r2, r2
    1284:	d2cd      	bcs.n	1222 <__udivsi3+0x3a>
    1286:	09c3      	lsrs	r3, r0, #7
    1288:	428b      	cmp	r3, r1
    128a:	d301      	bcc.n	1290 <__udivsi3+0xa8>
    128c:	01cb      	lsls	r3, r1, #7
    128e:	1ac0      	subs	r0, r0, r3
    1290:	4152      	adcs	r2, r2
    1292:	0983      	lsrs	r3, r0, #6
    1294:	428b      	cmp	r3, r1
    1296:	d301      	bcc.n	129c <__udivsi3+0xb4>
    1298:	018b      	lsls	r3, r1, #6
    129a:	1ac0      	subs	r0, r0, r3
    129c:	4152      	adcs	r2, r2
    129e:	0943      	lsrs	r3, r0, #5
    12a0:	428b      	cmp	r3, r1
    12a2:	d301      	bcc.n	12a8 <__udivsi3+0xc0>
    12a4:	014b      	lsls	r3, r1, #5
    12a6:	1ac0      	subs	r0, r0, r3
    12a8:	4152      	adcs	r2, r2
    12aa:	0903      	lsrs	r3, r0, #4
    12ac:	428b      	cmp	r3, r1
    12ae:	d301      	bcc.n	12b4 <__udivsi3+0xcc>
    12b0:	010b      	lsls	r3, r1, #4
    12b2:	1ac0      	subs	r0, r0, r3
    12b4:	4152      	adcs	r2, r2
    12b6:	08c3      	lsrs	r3, r0, #3
    12b8:	428b      	cmp	r3, r1
    12ba:	d301      	bcc.n	12c0 <__udivsi3+0xd8>
    12bc:	00cb      	lsls	r3, r1, #3
    12be:	1ac0      	subs	r0, r0, r3
    12c0:	4152      	adcs	r2, r2
    12c2:	0883      	lsrs	r3, r0, #2
    12c4:	428b      	cmp	r3, r1
    12c6:	d301      	bcc.n	12cc <__udivsi3+0xe4>
    12c8:	008b      	lsls	r3, r1, #2
    12ca:	1ac0      	subs	r0, r0, r3
    12cc:	4152      	adcs	r2, r2
    12ce:	0843      	lsrs	r3, r0, #1
    12d0:	428b      	cmp	r3, r1
    12d2:	d301      	bcc.n	12d8 <__udivsi3+0xf0>
    12d4:	004b      	lsls	r3, r1, #1
    12d6:	1ac0      	subs	r0, r0, r3
    12d8:	4152      	adcs	r2, r2
    12da:	1a41      	subs	r1, r0, r1
    12dc:	d200      	bcs.n	12e0 <__udivsi3+0xf8>
    12de:	4601      	mov	r1, r0
    12e0:	4152      	adcs	r2, r2
    12e2:	4610      	mov	r0, r2
    12e4:	4770      	bx	lr
    12e6:	e7ff      	b.n	12e8 <__udivsi3+0x100>
    12e8:	b501      	push	{r0, lr}
    12ea:	2000      	movs	r0, #0
    12ec:	f000 f806 	bl	12fc <__aeabi_idiv0>
    12f0:	bd02      	pop	{r1, pc}
    12f2:	46c0      	nop			; (mov r8, r8)

000012f4 <__aeabi_uidivmod>:
    12f4:	2900      	cmp	r1, #0
    12f6:	d0f7      	beq.n	12e8 <__udivsi3+0x100>
    12f8:	e776      	b.n	11e8 <__udivsi3>
    12fa:	4770      	bx	lr

000012fc <__aeabi_idiv0>:
    12fc:	4770      	bx	lr
    12fe:	46c0      	nop			; (mov r8, r8)

00001300 <__aeabi_d2uiz>:
    1300:	b570      	push	{r4, r5, r6, lr}
    1302:	2200      	movs	r2, #0
    1304:	4b0c      	ldr	r3, [pc, #48]	; (1338 <__aeabi_d2uiz+0x38>)
    1306:	0004      	movs	r4, r0
    1308:	000d      	movs	r5, r1
    130a:	f001 f95d 	bl	25c8 <__aeabi_dcmpge>
    130e:	2800      	cmp	r0, #0
    1310:	d104      	bne.n	131c <__aeabi_d2uiz+0x1c>
    1312:	0020      	movs	r0, r4
    1314:	0029      	movs	r1, r5
    1316:	f001 f8b7 	bl	2488 <__aeabi_d2iz>
    131a:	bd70      	pop	{r4, r5, r6, pc}
    131c:	4b06      	ldr	r3, [pc, #24]	; (1338 <__aeabi_d2uiz+0x38>)
    131e:	2200      	movs	r2, #0
    1320:	0020      	movs	r0, r4
    1322:	0029      	movs	r1, r5
    1324:	f000 fd9a 	bl	1e5c <__aeabi_dsub>
    1328:	f001 f8ae 	bl	2488 <__aeabi_d2iz>
    132c:	2380      	movs	r3, #128	; 0x80
    132e:	061b      	lsls	r3, r3, #24
    1330:	469c      	mov	ip, r3
    1332:	4460      	add	r0, ip
    1334:	e7f1      	b.n	131a <__aeabi_d2uiz+0x1a>
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	41e00000 	.word	0x41e00000

0000133c <__aeabi_dadd>:
    133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    133e:	4645      	mov	r5, r8
    1340:	46de      	mov	lr, fp
    1342:	4657      	mov	r7, sl
    1344:	464e      	mov	r6, r9
    1346:	030c      	lsls	r4, r1, #12
    1348:	b5e0      	push	{r5, r6, r7, lr}
    134a:	004e      	lsls	r6, r1, #1
    134c:	0fc9      	lsrs	r1, r1, #31
    134e:	4688      	mov	r8, r1
    1350:	000d      	movs	r5, r1
    1352:	0a61      	lsrs	r1, r4, #9
    1354:	0f44      	lsrs	r4, r0, #29
    1356:	430c      	orrs	r4, r1
    1358:	00c7      	lsls	r7, r0, #3
    135a:	0319      	lsls	r1, r3, #12
    135c:	0058      	lsls	r0, r3, #1
    135e:	0fdb      	lsrs	r3, r3, #31
    1360:	469b      	mov	fp, r3
    1362:	0a4b      	lsrs	r3, r1, #9
    1364:	0f51      	lsrs	r1, r2, #29
    1366:	430b      	orrs	r3, r1
    1368:	0d76      	lsrs	r6, r6, #21
    136a:	0d40      	lsrs	r0, r0, #21
    136c:	0019      	movs	r1, r3
    136e:	00d2      	lsls	r2, r2, #3
    1370:	45d8      	cmp	r8, fp
    1372:	d100      	bne.n	1376 <__aeabi_dadd+0x3a>
    1374:	e0ae      	b.n	14d4 <__aeabi_dadd+0x198>
    1376:	1a35      	subs	r5, r6, r0
    1378:	2d00      	cmp	r5, #0
    137a:	dc00      	bgt.n	137e <__aeabi_dadd+0x42>
    137c:	e0f6      	b.n	156c <__aeabi_dadd+0x230>
    137e:	2800      	cmp	r0, #0
    1380:	d10f      	bne.n	13a2 <__aeabi_dadd+0x66>
    1382:	4313      	orrs	r3, r2
    1384:	d100      	bne.n	1388 <__aeabi_dadd+0x4c>
    1386:	e0db      	b.n	1540 <__aeabi_dadd+0x204>
    1388:	1e6b      	subs	r3, r5, #1
    138a:	2b00      	cmp	r3, #0
    138c:	d000      	beq.n	1390 <__aeabi_dadd+0x54>
    138e:	e137      	b.n	1600 <__aeabi_dadd+0x2c4>
    1390:	1aba      	subs	r2, r7, r2
    1392:	4297      	cmp	r7, r2
    1394:	41bf      	sbcs	r7, r7
    1396:	1a64      	subs	r4, r4, r1
    1398:	427f      	negs	r7, r7
    139a:	1be4      	subs	r4, r4, r7
    139c:	2601      	movs	r6, #1
    139e:	0017      	movs	r7, r2
    13a0:	e024      	b.n	13ec <__aeabi_dadd+0xb0>
    13a2:	4bc6      	ldr	r3, [pc, #792]	; (16bc <__aeabi_dadd+0x380>)
    13a4:	429e      	cmp	r6, r3
    13a6:	d04d      	beq.n	1444 <__aeabi_dadd+0x108>
    13a8:	2380      	movs	r3, #128	; 0x80
    13aa:	041b      	lsls	r3, r3, #16
    13ac:	4319      	orrs	r1, r3
    13ae:	2d38      	cmp	r5, #56	; 0x38
    13b0:	dd00      	ble.n	13b4 <__aeabi_dadd+0x78>
    13b2:	e107      	b.n	15c4 <__aeabi_dadd+0x288>
    13b4:	2d1f      	cmp	r5, #31
    13b6:	dd00      	ble.n	13ba <__aeabi_dadd+0x7e>
    13b8:	e138      	b.n	162c <__aeabi_dadd+0x2f0>
    13ba:	2020      	movs	r0, #32
    13bc:	1b43      	subs	r3, r0, r5
    13be:	469a      	mov	sl, r3
    13c0:	000b      	movs	r3, r1
    13c2:	4650      	mov	r0, sl
    13c4:	4083      	lsls	r3, r0
    13c6:	4699      	mov	r9, r3
    13c8:	0013      	movs	r3, r2
    13ca:	4648      	mov	r0, r9
    13cc:	40eb      	lsrs	r3, r5
    13ce:	4318      	orrs	r0, r3
    13d0:	0003      	movs	r3, r0
    13d2:	4650      	mov	r0, sl
    13d4:	4082      	lsls	r2, r0
    13d6:	1e50      	subs	r0, r2, #1
    13d8:	4182      	sbcs	r2, r0
    13da:	40e9      	lsrs	r1, r5
    13dc:	431a      	orrs	r2, r3
    13de:	1aba      	subs	r2, r7, r2
    13e0:	1a61      	subs	r1, r4, r1
    13e2:	4297      	cmp	r7, r2
    13e4:	41a4      	sbcs	r4, r4
    13e6:	0017      	movs	r7, r2
    13e8:	4264      	negs	r4, r4
    13ea:	1b0c      	subs	r4, r1, r4
    13ec:	0223      	lsls	r3, r4, #8
    13ee:	d562      	bpl.n	14b6 <__aeabi_dadd+0x17a>
    13f0:	0264      	lsls	r4, r4, #9
    13f2:	0a65      	lsrs	r5, r4, #9
    13f4:	2d00      	cmp	r5, #0
    13f6:	d100      	bne.n	13fa <__aeabi_dadd+0xbe>
    13f8:	e0df      	b.n	15ba <__aeabi_dadd+0x27e>
    13fa:	0028      	movs	r0, r5
    13fc:	f001 f8ee 	bl	25dc <__clzsi2>
    1400:	0003      	movs	r3, r0
    1402:	3b08      	subs	r3, #8
    1404:	2b1f      	cmp	r3, #31
    1406:	dd00      	ble.n	140a <__aeabi_dadd+0xce>
    1408:	e0d2      	b.n	15b0 <__aeabi_dadd+0x274>
    140a:	2220      	movs	r2, #32
    140c:	003c      	movs	r4, r7
    140e:	1ad2      	subs	r2, r2, r3
    1410:	409d      	lsls	r5, r3
    1412:	40d4      	lsrs	r4, r2
    1414:	409f      	lsls	r7, r3
    1416:	4325      	orrs	r5, r4
    1418:	429e      	cmp	r6, r3
    141a:	dd00      	ble.n	141e <__aeabi_dadd+0xe2>
    141c:	e0c4      	b.n	15a8 <__aeabi_dadd+0x26c>
    141e:	1b9e      	subs	r6, r3, r6
    1420:	1c73      	adds	r3, r6, #1
    1422:	2b1f      	cmp	r3, #31
    1424:	dd00      	ble.n	1428 <__aeabi_dadd+0xec>
    1426:	e0f1      	b.n	160c <__aeabi_dadd+0x2d0>
    1428:	2220      	movs	r2, #32
    142a:	0038      	movs	r0, r7
    142c:	0029      	movs	r1, r5
    142e:	1ad2      	subs	r2, r2, r3
    1430:	40d8      	lsrs	r0, r3
    1432:	4091      	lsls	r1, r2
    1434:	4097      	lsls	r7, r2
    1436:	002c      	movs	r4, r5
    1438:	4301      	orrs	r1, r0
    143a:	1e78      	subs	r0, r7, #1
    143c:	4187      	sbcs	r7, r0
    143e:	40dc      	lsrs	r4, r3
    1440:	2600      	movs	r6, #0
    1442:	430f      	orrs	r7, r1
    1444:	077b      	lsls	r3, r7, #29
    1446:	d009      	beq.n	145c <__aeabi_dadd+0x120>
    1448:	230f      	movs	r3, #15
    144a:	403b      	ands	r3, r7
    144c:	2b04      	cmp	r3, #4
    144e:	d005      	beq.n	145c <__aeabi_dadd+0x120>
    1450:	1d3b      	adds	r3, r7, #4
    1452:	42bb      	cmp	r3, r7
    1454:	41bf      	sbcs	r7, r7
    1456:	427f      	negs	r7, r7
    1458:	19e4      	adds	r4, r4, r7
    145a:	001f      	movs	r7, r3
    145c:	0223      	lsls	r3, r4, #8
    145e:	d52c      	bpl.n	14ba <__aeabi_dadd+0x17e>
    1460:	4b96      	ldr	r3, [pc, #600]	; (16bc <__aeabi_dadd+0x380>)
    1462:	3601      	adds	r6, #1
    1464:	429e      	cmp	r6, r3
    1466:	d100      	bne.n	146a <__aeabi_dadd+0x12e>
    1468:	e09a      	b.n	15a0 <__aeabi_dadd+0x264>
    146a:	4645      	mov	r5, r8
    146c:	4b94      	ldr	r3, [pc, #592]	; (16c0 <__aeabi_dadd+0x384>)
    146e:	08ff      	lsrs	r7, r7, #3
    1470:	401c      	ands	r4, r3
    1472:	0760      	lsls	r0, r4, #29
    1474:	0576      	lsls	r6, r6, #21
    1476:	0264      	lsls	r4, r4, #9
    1478:	4307      	orrs	r7, r0
    147a:	0b24      	lsrs	r4, r4, #12
    147c:	0d76      	lsrs	r6, r6, #21
    147e:	2100      	movs	r1, #0
    1480:	0324      	lsls	r4, r4, #12
    1482:	0b23      	lsrs	r3, r4, #12
    1484:	0d0c      	lsrs	r4, r1, #20
    1486:	4a8f      	ldr	r2, [pc, #572]	; (16c4 <__aeabi_dadd+0x388>)
    1488:	0524      	lsls	r4, r4, #20
    148a:	431c      	orrs	r4, r3
    148c:	4014      	ands	r4, r2
    148e:	0533      	lsls	r3, r6, #20
    1490:	4323      	orrs	r3, r4
    1492:	005b      	lsls	r3, r3, #1
    1494:	07ed      	lsls	r5, r5, #31
    1496:	085b      	lsrs	r3, r3, #1
    1498:	432b      	orrs	r3, r5
    149a:	0038      	movs	r0, r7
    149c:	0019      	movs	r1, r3
    149e:	bc3c      	pop	{r2, r3, r4, r5}
    14a0:	4690      	mov	r8, r2
    14a2:	4699      	mov	r9, r3
    14a4:	46a2      	mov	sl, r4
    14a6:	46ab      	mov	fp, r5
    14a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14aa:	4664      	mov	r4, ip
    14ac:	4304      	orrs	r4, r0
    14ae:	d100      	bne.n	14b2 <__aeabi_dadd+0x176>
    14b0:	e211      	b.n	18d6 <__aeabi_dadd+0x59a>
    14b2:	0004      	movs	r4, r0
    14b4:	4667      	mov	r7, ip
    14b6:	077b      	lsls	r3, r7, #29
    14b8:	d1c6      	bne.n	1448 <__aeabi_dadd+0x10c>
    14ba:	4645      	mov	r5, r8
    14bc:	0760      	lsls	r0, r4, #29
    14be:	08ff      	lsrs	r7, r7, #3
    14c0:	4307      	orrs	r7, r0
    14c2:	08e4      	lsrs	r4, r4, #3
    14c4:	4b7d      	ldr	r3, [pc, #500]	; (16bc <__aeabi_dadd+0x380>)
    14c6:	429e      	cmp	r6, r3
    14c8:	d030      	beq.n	152c <__aeabi_dadd+0x1f0>
    14ca:	0324      	lsls	r4, r4, #12
    14cc:	0576      	lsls	r6, r6, #21
    14ce:	0b24      	lsrs	r4, r4, #12
    14d0:	0d76      	lsrs	r6, r6, #21
    14d2:	e7d4      	b.n	147e <__aeabi_dadd+0x142>
    14d4:	1a33      	subs	r3, r6, r0
    14d6:	469a      	mov	sl, r3
    14d8:	2b00      	cmp	r3, #0
    14da:	dd78      	ble.n	15ce <__aeabi_dadd+0x292>
    14dc:	2800      	cmp	r0, #0
    14de:	d031      	beq.n	1544 <__aeabi_dadd+0x208>
    14e0:	4876      	ldr	r0, [pc, #472]	; (16bc <__aeabi_dadd+0x380>)
    14e2:	4286      	cmp	r6, r0
    14e4:	d0ae      	beq.n	1444 <__aeabi_dadd+0x108>
    14e6:	2080      	movs	r0, #128	; 0x80
    14e8:	0400      	lsls	r0, r0, #16
    14ea:	4301      	orrs	r1, r0
    14ec:	4653      	mov	r3, sl
    14ee:	2b38      	cmp	r3, #56	; 0x38
    14f0:	dc00      	bgt.n	14f4 <__aeabi_dadd+0x1b8>
    14f2:	e0e9      	b.n	16c8 <__aeabi_dadd+0x38c>
    14f4:	430a      	orrs	r2, r1
    14f6:	1e51      	subs	r1, r2, #1
    14f8:	418a      	sbcs	r2, r1
    14fa:	2100      	movs	r1, #0
    14fc:	19d2      	adds	r2, r2, r7
    14fe:	42ba      	cmp	r2, r7
    1500:	41bf      	sbcs	r7, r7
    1502:	1909      	adds	r1, r1, r4
    1504:	427c      	negs	r4, r7
    1506:	0017      	movs	r7, r2
    1508:	190c      	adds	r4, r1, r4
    150a:	0223      	lsls	r3, r4, #8
    150c:	d5d3      	bpl.n	14b6 <__aeabi_dadd+0x17a>
    150e:	4b6b      	ldr	r3, [pc, #428]	; (16bc <__aeabi_dadd+0x380>)
    1510:	3601      	adds	r6, #1
    1512:	429e      	cmp	r6, r3
    1514:	d100      	bne.n	1518 <__aeabi_dadd+0x1dc>
    1516:	e13a      	b.n	178e <__aeabi_dadd+0x452>
    1518:	2001      	movs	r0, #1
    151a:	4b69      	ldr	r3, [pc, #420]	; (16c0 <__aeabi_dadd+0x384>)
    151c:	401c      	ands	r4, r3
    151e:	087b      	lsrs	r3, r7, #1
    1520:	4007      	ands	r7, r0
    1522:	431f      	orrs	r7, r3
    1524:	07e0      	lsls	r0, r4, #31
    1526:	4307      	orrs	r7, r0
    1528:	0864      	lsrs	r4, r4, #1
    152a:	e78b      	b.n	1444 <__aeabi_dadd+0x108>
    152c:	0023      	movs	r3, r4
    152e:	433b      	orrs	r3, r7
    1530:	d100      	bne.n	1534 <__aeabi_dadd+0x1f8>
    1532:	e1cb      	b.n	18cc <__aeabi_dadd+0x590>
    1534:	2280      	movs	r2, #128	; 0x80
    1536:	0312      	lsls	r2, r2, #12
    1538:	4314      	orrs	r4, r2
    153a:	0324      	lsls	r4, r4, #12
    153c:	0b24      	lsrs	r4, r4, #12
    153e:	e79e      	b.n	147e <__aeabi_dadd+0x142>
    1540:	002e      	movs	r6, r5
    1542:	e77f      	b.n	1444 <__aeabi_dadd+0x108>
    1544:	0008      	movs	r0, r1
    1546:	4310      	orrs	r0, r2
    1548:	d100      	bne.n	154c <__aeabi_dadd+0x210>
    154a:	e0b4      	b.n	16b6 <__aeabi_dadd+0x37a>
    154c:	1e58      	subs	r0, r3, #1
    154e:	2800      	cmp	r0, #0
    1550:	d000      	beq.n	1554 <__aeabi_dadd+0x218>
    1552:	e0de      	b.n	1712 <__aeabi_dadd+0x3d6>
    1554:	18ba      	adds	r2, r7, r2
    1556:	42ba      	cmp	r2, r7
    1558:	419b      	sbcs	r3, r3
    155a:	1864      	adds	r4, r4, r1
    155c:	425b      	negs	r3, r3
    155e:	18e4      	adds	r4, r4, r3
    1560:	0017      	movs	r7, r2
    1562:	2601      	movs	r6, #1
    1564:	0223      	lsls	r3, r4, #8
    1566:	d5a6      	bpl.n	14b6 <__aeabi_dadd+0x17a>
    1568:	2602      	movs	r6, #2
    156a:	e7d5      	b.n	1518 <__aeabi_dadd+0x1dc>
    156c:	2d00      	cmp	r5, #0
    156e:	d16e      	bne.n	164e <__aeabi_dadd+0x312>
    1570:	1c70      	adds	r0, r6, #1
    1572:	0540      	lsls	r0, r0, #21
    1574:	0d40      	lsrs	r0, r0, #21
    1576:	2801      	cmp	r0, #1
    1578:	dc00      	bgt.n	157c <__aeabi_dadd+0x240>
    157a:	e0f9      	b.n	1770 <__aeabi_dadd+0x434>
    157c:	1ab8      	subs	r0, r7, r2
    157e:	4684      	mov	ip, r0
    1580:	4287      	cmp	r7, r0
    1582:	4180      	sbcs	r0, r0
    1584:	1ae5      	subs	r5, r4, r3
    1586:	4240      	negs	r0, r0
    1588:	1a2d      	subs	r5, r5, r0
    158a:	0228      	lsls	r0, r5, #8
    158c:	d400      	bmi.n	1590 <__aeabi_dadd+0x254>
    158e:	e089      	b.n	16a4 <__aeabi_dadd+0x368>
    1590:	1bd7      	subs	r7, r2, r7
    1592:	42ba      	cmp	r2, r7
    1594:	4192      	sbcs	r2, r2
    1596:	1b1c      	subs	r4, r3, r4
    1598:	4252      	negs	r2, r2
    159a:	1aa5      	subs	r5, r4, r2
    159c:	46d8      	mov	r8, fp
    159e:	e729      	b.n	13f4 <__aeabi_dadd+0xb8>
    15a0:	4645      	mov	r5, r8
    15a2:	2400      	movs	r4, #0
    15a4:	2700      	movs	r7, #0
    15a6:	e76a      	b.n	147e <__aeabi_dadd+0x142>
    15a8:	4c45      	ldr	r4, [pc, #276]	; (16c0 <__aeabi_dadd+0x384>)
    15aa:	1af6      	subs	r6, r6, r3
    15ac:	402c      	ands	r4, r5
    15ae:	e749      	b.n	1444 <__aeabi_dadd+0x108>
    15b0:	003d      	movs	r5, r7
    15b2:	3828      	subs	r0, #40	; 0x28
    15b4:	4085      	lsls	r5, r0
    15b6:	2700      	movs	r7, #0
    15b8:	e72e      	b.n	1418 <__aeabi_dadd+0xdc>
    15ba:	0038      	movs	r0, r7
    15bc:	f001 f80e 	bl	25dc <__clzsi2>
    15c0:	3020      	adds	r0, #32
    15c2:	e71d      	b.n	1400 <__aeabi_dadd+0xc4>
    15c4:	430a      	orrs	r2, r1
    15c6:	1e51      	subs	r1, r2, #1
    15c8:	418a      	sbcs	r2, r1
    15ca:	2100      	movs	r1, #0
    15cc:	e707      	b.n	13de <__aeabi_dadd+0xa2>
    15ce:	2b00      	cmp	r3, #0
    15d0:	d000      	beq.n	15d4 <__aeabi_dadd+0x298>
    15d2:	e0f3      	b.n	17bc <__aeabi_dadd+0x480>
    15d4:	1c70      	adds	r0, r6, #1
    15d6:	0543      	lsls	r3, r0, #21
    15d8:	0d5b      	lsrs	r3, r3, #21
    15da:	2b01      	cmp	r3, #1
    15dc:	dc00      	bgt.n	15e0 <__aeabi_dadd+0x2a4>
    15de:	e0ad      	b.n	173c <__aeabi_dadd+0x400>
    15e0:	4b36      	ldr	r3, [pc, #216]	; (16bc <__aeabi_dadd+0x380>)
    15e2:	4298      	cmp	r0, r3
    15e4:	d100      	bne.n	15e8 <__aeabi_dadd+0x2ac>
    15e6:	e0d1      	b.n	178c <__aeabi_dadd+0x450>
    15e8:	18ba      	adds	r2, r7, r2
    15ea:	42ba      	cmp	r2, r7
    15ec:	41bf      	sbcs	r7, r7
    15ee:	1864      	adds	r4, r4, r1
    15f0:	427f      	negs	r7, r7
    15f2:	19e4      	adds	r4, r4, r7
    15f4:	07e7      	lsls	r7, r4, #31
    15f6:	0852      	lsrs	r2, r2, #1
    15f8:	4317      	orrs	r7, r2
    15fa:	0864      	lsrs	r4, r4, #1
    15fc:	0006      	movs	r6, r0
    15fe:	e721      	b.n	1444 <__aeabi_dadd+0x108>
    1600:	482e      	ldr	r0, [pc, #184]	; (16bc <__aeabi_dadd+0x380>)
    1602:	4285      	cmp	r5, r0
    1604:	d100      	bne.n	1608 <__aeabi_dadd+0x2cc>
    1606:	e093      	b.n	1730 <__aeabi_dadd+0x3f4>
    1608:	001d      	movs	r5, r3
    160a:	e6d0      	b.n	13ae <__aeabi_dadd+0x72>
    160c:	0029      	movs	r1, r5
    160e:	3e1f      	subs	r6, #31
    1610:	40f1      	lsrs	r1, r6
    1612:	2b20      	cmp	r3, #32
    1614:	d100      	bne.n	1618 <__aeabi_dadd+0x2dc>
    1616:	e08d      	b.n	1734 <__aeabi_dadd+0x3f8>
    1618:	2240      	movs	r2, #64	; 0x40
    161a:	1ad3      	subs	r3, r2, r3
    161c:	409d      	lsls	r5, r3
    161e:	432f      	orrs	r7, r5
    1620:	1e7d      	subs	r5, r7, #1
    1622:	41af      	sbcs	r7, r5
    1624:	2400      	movs	r4, #0
    1626:	430f      	orrs	r7, r1
    1628:	2600      	movs	r6, #0
    162a:	e744      	b.n	14b6 <__aeabi_dadd+0x17a>
    162c:	002b      	movs	r3, r5
    162e:	0008      	movs	r0, r1
    1630:	3b20      	subs	r3, #32
    1632:	40d8      	lsrs	r0, r3
    1634:	0003      	movs	r3, r0
    1636:	2d20      	cmp	r5, #32
    1638:	d100      	bne.n	163c <__aeabi_dadd+0x300>
    163a:	e07d      	b.n	1738 <__aeabi_dadd+0x3fc>
    163c:	2040      	movs	r0, #64	; 0x40
    163e:	1b45      	subs	r5, r0, r5
    1640:	40a9      	lsls	r1, r5
    1642:	430a      	orrs	r2, r1
    1644:	1e51      	subs	r1, r2, #1
    1646:	418a      	sbcs	r2, r1
    1648:	2100      	movs	r1, #0
    164a:	431a      	orrs	r2, r3
    164c:	e6c7      	b.n	13de <__aeabi_dadd+0xa2>
    164e:	2e00      	cmp	r6, #0
    1650:	d050      	beq.n	16f4 <__aeabi_dadd+0x3b8>
    1652:	4e1a      	ldr	r6, [pc, #104]	; (16bc <__aeabi_dadd+0x380>)
    1654:	42b0      	cmp	r0, r6
    1656:	d057      	beq.n	1708 <__aeabi_dadd+0x3cc>
    1658:	2680      	movs	r6, #128	; 0x80
    165a:	426b      	negs	r3, r5
    165c:	4699      	mov	r9, r3
    165e:	0436      	lsls	r6, r6, #16
    1660:	4334      	orrs	r4, r6
    1662:	464b      	mov	r3, r9
    1664:	2b38      	cmp	r3, #56	; 0x38
    1666:	dd00      	ble.n	166a <__aeabi_dadd+0x32e>
    1668:	e0d6      	b.n	1818 <__aeabi_dadd+0x4dc>
    166a:	2b1f      	cmp	r3, #31
    166c:	dd00      	ble.n	1670 <__aeabi_dadd+0x334>
    166e:	e135      	b.n	18dc <__aeabi_dadd+0x5a0>
    1670:	2620      	movs	r6, #32
    1672:	1af5      	subs	r5, r6, r3
    1674:	0026      	movs	r6, r4
    1676:	40ae      	lsls	r6, r5
    1678:	46b2      	mov	sl, r6
    167a:	003e      	movs	r6, r7
    167c:	40de      	lsrs	r6, r3
    167e:	46ac      	mov	ip, r5
    1680:	0035      	movs	r5, r6
    1682:	4656      	mov	r6, sl
    1684:	432e      	orrs	r6, r5
    1686:	4665      	mov	r5, ip
    1688:	40af      	lsls	r7, r5
    168a:	1e7d      	subs	r5, r7, #1
    168c:	41af      	sbcs	r7, r5
    168e:	40dc      	lsrs	r4, r3
    1690:	4337      	orrs	r7, r6
    1692:	1bd7      	subs	r7, r2, r7
    1694:	42ba      	cmp	r2, r7
    1696:	4192      	sbcs	r2, r2
    1698:	1b0c      	subs	r4, r1, r4
    169a:	4252      	negs	r2, r2
    169c:	1aa4      	subs	r4, r4, r2
    169e:	0006      	movs	r6, r0
    16a0:	46d8      	mov	r8, fp
    16a2:	e6a3      	b.n	13ec <__aeabi_dadd+0xb0>
    16a4:	4664      	mov	r4, ip
    16a6:	4667      	mov	r7, ip
    16a8:	432c      	orrs	r4, r5
    16aa:	d000      	beq.n	16ae <__aeabi_dadd+0x372>
    16ac:	e6a2      	b.n	13f4 <__aeabi_dadd+0xb8>
    16ae:	2500      	movs	r5, #0
    16b0:	2600      	movs	r6, #0
    16b2:	2700      	movs	r7, #0
    16b4:	e706      	b.n	14c4 <__aeabi_dadd+0x188>
    16b6:	001e      	movs	r6, r3
    16b8:	e6c4      	b.n	1444 <__aeabi_dadd+0x108>
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	000007ff 	.word	0x000007ff
    16c0:	ff7fffff 	.word	0xff7fffff
    16c4:	800fffff 	.word	0x800fffff
    16c8:	2b1f      	cmp	r3, #31
    16ca:	dc63      	bgt.n	1794 <__aeabi_dadd+0x458>
    16cc:	2020      	movs	r0, #32
    16ce:	1ac3      	subs	r3, r0, r3
    16d0:	0008      	movs	r0, r1
    16d2:	4098      	lsls	r0, r3
    16d4:	469c      	mov	ip, r3
    16d6:	4683      	mov	fp, r0
    16d8:	4653      	mov	r3, sl
    16da:	0010      	movs	r0, r2
    16dc:	40d8      	lsrs	r0, r3
    16de:	0003      	movs	r3, r0
    16e0:	4658      	mov	r0, fp
    16e2:	4318      	orrs	r0, r3
    16e4:	4663      	mov	r3, ip
    16e6:	409a      	lsls	r2, r3
    16e8:	1e53      	subs	r3, r2, #1
    16ea:	419a      	sbcs	r2, r3
    16ec:	4653      	mov	r3, sl
    16ee:	4302      	orrs	r2, r0
    16f0:	40d9      	lsrs	r1, r3
    16f2:	e703      	b.n	14fc <__aeabi_dadd+0x1c0>
    16f4:	0026      	movs	r6, r4
    16f6:	433e      	orrs	r6, r7
    16f8:	d006      	beq.n	1708 <__aeabi_dadd+0x3cc>
    16fa:	43eb      	mvns	r3, r5
    16fc:	4699      	mov	r9, r3
    16fe:	2b00      	cmp	r3, #0
    1700:	d0c7      	beq.n	1692 <__aeabi_dadd+0x356>
    1702:	4e94      	ldr	r6, [pc, #592]	; (1954 <__aeabi_dadd+0x618>)
    1704:	42b0      	cmp	r0, r6
    1706:	d1ac      	bne.n	1662 <__aeabi_dadd+0x326>
    1708:	000c      	movs	r4, r1
    170a:	0017      	movs	r7, r2
    170c:	0006      	movs	r6, r0
    170e:	46d8      	mov	r8, fp
    1710:	e698      	b.n	1444 <__aeabi_dadd+0x108>
    1712:	4b90      	ldr	r3, [pc, #576]	; (1954 <__aeabi_dadd+0x618>)
    1714:	459a      	cmp	sl, r3
    1716:	d00b      	beq.n	1730 <__aeabi_dadd+0x3f4>
    1718:	4682      	mov	sl, r0
    171a:	e6e7      	b.n	14ec <__aeabi_dadd+0x1b0>
    171c:	2800      	cmp	r0, #0
    171e:	d000      	beq.n	1722 <__aeabi_dadd+0x3e6>
    1720:	e09e      	b.n	1860 <__aeabi_dadd+0x524>
    1722:	0018      	movs	r0, r3
    1724:	4310      	orrs	r0, r2
    1726:	d100      	bne.n	172a <__aeabi_dadd+0x3ee>
    1728:	e0e9      	b.n	18fe <__aeabi_dadd+0x5c2>
    172a:	001c      	movs	r4, r3
    172c:	0017      	movs	r7, r2
    172e:	46d8      	mov	r8, fp
    1730:	4e88      	ldr	r6, [pc, #544]	; (1954 <__aeabi_dadd+0x618>)
    1732:	e687      	b.n	1444 <__aeabi_dadd+0x108>
    1734:	2500      	movs	r5, #0
    1736:	e772      	b.n	161e <__aeabi_dadd+0x2e2>
    1738:	2100      	movs	r1, #0
    173a:	e782      	b.n	1642 <__aeabi_dadd+0x306>
    173c:	0023      	movs	r3, r4
    173e:	433b      	orrs	r3, r7
    1740:	2e00      	cmp	r6, #0
    1742:	d000      	beq.n	1746 <__aeabi_dadd+0x40a>
    1744:	e0ab      	b.n	189e <__aeabi_dadd+0x562>
    1746:	2b00      	cmp	r3, #0
    1748:	d100      	bne.n	174c <__aeabi_dadd+0x410>
    174a:	e0e7      	b.n	191c <__aeabi_dadd+0x5e0>
    174c:	000b      	movs	r3, r1
    174e:	4313      	orrs	r3, r2
    1750:	d100      	bne.n	1754 <__aeabi_dadd+0x418>
    1752:	e677      	b.n	1444 <__aeabi_dadd+0x108>
    1754:	18ba      	adds	r2, r7, r2
    1756:	42ba      	cmp	r2, r7
    1758:	41bf      	sbcs	r7, r7
    175a:	1864      	adds	r4, r4, r1
    175c:	427f      	negs	r7, r7
    175e:	19e4      	adds	r4, r4, r7
    1760:	0223      	lsls	r3, r4, #8
    1762:	d400      	bmi.n	1766 <__aeabi_dadd+0x42a>
    1764:	e0f2      	b.n	194c <__aeabi_dadd+0x610>
    1766:	4b7c      	ldr	r3, [pc, #496]	; (1958 <__aeabi_dadd+0x61c>)
    1768:	0017      	movs	r7, r2
    176a:	401c      	ands	r4, r3
    176c:	0006      	movs	r6, r0
    176e:	e669      	b.n	1444 <__aeabi_dadd+0x108>
    1770:	0020      	movs	r0, r4
    1772:	4338      	orrs	r0, r7
    1774:	2e00      	cmp	r6, #0
    1776:	d1d1      	bne.n	171c <__aeabi_dadd+0x3e0>
    1778:	2800      	cmp	r0, #0
    177a:	d15b      	bne.n	1834 <__aeabi_dadd+0x4f8>
    177c:	001c      	movs	r4, r3
    177e:	4314      	orrs	r4, r2
    1780:	d100      	bne.n	1784 <__aeabi_dadd+0x448>
    1782:	e0a8      	b.n	18d6 <__aeabi_dadd+0x59a>
    1784:	001c      	movs	r4, r3
    1786:	0017      	movs	r7, r2
    1788:	46d8      	mov	r8, fp
    178a:	e65b      	b.n	1444 <__aeabi_dadd+0x108>
    178c:	0006      	movs	r6, r0
    178e:	2400      	movs	r4, #0
    1790:	2700      	movs	r7, #0
    1792:	e697      	b.n	14c4 <__aeabi_dadd+0x188>
    1794:	4650      	mov	r0, sl
    1796:	000b      	movs	r3, r1
    1798:	3820      	subs	r0, #32
    179a:	40c3      	lsrs	r3, r0
    179c:	4699      	mov	r9, r3
    179e:	4653      	mov	r3, sl
    17a0:	2b20      	cmp	r3, #32
    17a2:	d100      	bne.n	17a6 <__aeabi_dadd+0x46a>
    17a4:	e095      	b.n	18d2 <__aeabi_dadd+0x596>
    17a6:	2340      	movs	r3, #64	; 0x40
    17a8:	4650      	mov	r0, sl
    17aa:	1a1b      	subs	r3, r3, r0
    17ac:	4099      	lsls	r1, r3
    17ae:	430a      	orrs	r2, r1
    17b0:	1e51      	subs	r1, r2, #1
    17b2:	418a      	sbcs	r2, r1
    17b4:	464b      	mov	r3, r9
    17b6:	2100      	movs	r1, #0
    17b8:	431a      	orrs	r2, r3
    17ba:	e69f      	b.n	14fc <__aeabi_dadd+0x1c0>
    17bc:	2e00      	cmp	r6, #0
    17be:	d130      	bne.n	1822 <__aeabi_dadd+0x4e6>
    17c0:	0026      	movs	r6, r4
    17c2:	433e      	orrs	r6, r7
    17c4:	d067      	beq.n	1896 <__aeabi_dadd+0x55a>
    17c6:	43db      	mvns	r3, r3
    17c8:	469a      	mov	sl, r3
    17ca:	2b00      	cmp	r3, #0
    17cc:	d01c      	beq.n	1808 <__aeabi_dadd+0x4cc>
    17ce:	4e61      	ldr	r6, [pc, #388]	; (1954 <__aeabi_dadd+0x618>)
    17d0:	42b0      	cmp	r0, r6
    17d2:	d060      	beq.n	1896 <__aeabi_dadd+0x55a>
    17d4:	4653      	mov	r3, sl
    17d6:	2b38      	cmp	r3, #56	; 0x38
    17d8:	dd00      	ble.n	17dc <__aeabi_dadd+0x4a0>
    17da:	e096      	b.n	190a <__aeabi_dadd+0x5ce>
    17dc:	2b1f      	cmp	r3, #31
    17de:	dd00      	ble.n	17e2 <__aeabi_dadd+0x4a6>
    17e0:	e09f      	b.n	1922 <__aeabi_dadd+0x5e6>
    17e2:	2620      	movs	r6, #32
    17e4:	1af3      	subs	r3, r6, r3
    17e6:	0026      	movs	r6, r4
    17e8:	409e      	lsls	r6, r3
    17ea:	469c      	mov	ip, r3
    17ec:	46b3      	mov	fp, r6
    17ee:	4653      	mov	r3, sl
    17f0:	003e      	movs	r6, r7
    17f2:	40de      	lsrs	r6, r3
    17f4:	0033      	movs	r3, r6
    17f6:	465e      	mov	r6, fp
    17f8:	431e      	orrs	r6, r3
    17fa:	4663      	mov	r3, ip
    17fc:	409f      	lsls	r7, r3
    17fe:	1e7b      	subs	r3, r7, #1
    1800:	419f      	sbcs	r7, r3
    1802:	4653      	mov	r3, sl
    1804:	40dc      	lsrs	r4, r3
    1806:	4337      	orrs	r7, r6
    1808:	18bf      	adds	r7, r7, r2
    180a:	4297      	cmp	r7, r2
    180c:	4192      	sbcs	r2, r2
    180e:	1864      	adds	r4, r4, r1
    1810:	4252      	negs	r2, r2
    1812:	18a4      	adds	r4, r4, r2
    1814:	0006      	movs	r6, r0
    1816:	e678      	b.n	150a <__aeabi_dadd+0x1ce>
    1818:	4327      	orrs	r7, r4
    181a:	1e7c      	subs	r4, r7, #1
    181c:	41a7      	sbcs	r7, r4
    181e:	2400      	movs	r4, #0
    1820:	e737      	b.n	1692 <__aeabi_dadd+0x356>
    1822:	4e4c      	ldr	r6, [pc, #304]	; (1954 <__aeabi_dadd+0x618>)
    1824:	42b0      	cmp	r0, r6
    1826:	d036      	beq.n	1896 <__aeabi_dadd+0x55a>
    1828:	2680      	movs	r6, #128	; 0x80
    182a:	425b      	negs	r3, r3
    182c:	0436      	lsls	r6, r6, #16
    182e:	469a      	mov	sl, r3
    1830:	4334      	orrs	r4, r6
    1832:	e7cf      	b.n	17d4 <__aeabi_dadd+0x498>
    1834:	0018      	movs	r0, r3
    1836:	4310      	orrs	r0, r2
    1838:	d100      	bne.n	183c <__aeabi_dadd+0x500>
    183a:	e603      	b.n	1444 <__aeabi_dadd+0x108>
    183c:	1ab8      	subs	r0, r7, r2
    183e:	4684      	mov	ip, r0
    1840:	4567      	cmp	r7, ip
    1842:	41ad      	sbcs	r5, r5
    1844:	1ae0      	subs	r0, r4, r3
    1846:	426d      	negs	r5, r5
    1848:	1b40      	subs	r0, r0, r5
    184a:	0205      	lsls	r5, r0, #8
    184c:	d400      	bmi.n	1850 <__aeabi_dadd+0x514>
    184e:	e62c      	b.n	14aa <__aeabi_dadd+0x16e>
    1850:	1bd7      	subs	r7, r2, r7
    1852:	42ba      	cmp	r2, r7
    1854:	4192      	sbcs	r2, r2
    1856:	1b1c      	subs	r4, r3, r4
    1858:	4252      	negs	r2, r2
    185a:	1aa4      	subs	r4, r4, r2
    185c:	46d8      	mov	r8, fp
    185e:	e5f1      	b.n	1444 <__aeabi_dadd+0x108>
    1860:	0018      	movs	r0, r3
    1862:	4310      	orrs	r0, r2
    1864:	d100      	bne.n	1868 <__aeabi_dadd+0x52c>
    1866:	e763      	b.n	1730 <__aeabi_dadd+0x3f4>
    1868:	08f8      	lsrs	r0, r7, #3
    186a:	0767      	lsls	r7, r4, #29
    186c:	4307      	orrs	r7, r0
    186e:	2080      	movs	r0, #128	; 0x80
    1870:	08e4      	lsrs	r4, r4, #3
    1872:	0300      	lsls	r0, r0, #12
    1874:	4204      	tst	r4, r0
    1876:	d008      	beq.n	188a <__aeabi_dadd+0x54e>
    1878:	08dd      	lsrs	r5, r3, #3
    187a:	4205      	tst	r5, r0
    187c:	d105      	bne.n	188a <__aeabi_dadd+0x54e>
    187e:	08d2      	lsrs	r2, r2, #3
    1880:	0759      	lsls	r1, r3, #29
    1882:	4311      	orrs	r1, r2
    1884:	000f      	movs	r7, r1
    1886:	002c      	movs	r4, r5
    1888:	46d8      	mov	r8, fp
    188a:	0f7b      	lsrs	r3, r7, #29
    188c:	00e4      	lsls	r4, r4, #3
    188e:	431c      	orrs	r4, r3
    1890:	00ff      	lsls	r7, r7, #3
    1892:	4e30      	ldr	r6, [pc, #192]	; (1954 <__aeabi_dadd+0x618>)
    1894:	e5d6      	b.n	1444 <__aeabi_dadd+0x108>
    1896:	000c      	movs	r4, r1
    1898:	0017      	movs	r7, r2
    189a:	0006      	movs	r6, r0
    189c:	e5d2      	b.n	1444 <__aeabi_dadd+0x108>
    189e:	2b00      	cmp	r3, #0
    18a0:	d038      	beq.n	1914 <__aeabi_dadd+0x5d8>
    18a2:	000b      	movs	r3, r1
    18a4:	4313      	orrs	r3, r2
    18a6:	d100      	bne.n	18aa <__aeabi_dadd+0x56e>
    18a8:	e742      	b.n	1730 <__aeabi_dadd+0x3f4>
    18aa:	08f8      	lsrs	r0, r7, #3
    18ac:	0767      	lsls	r7, r4, #29
    18ae:	4307      	orrs	r7, r0
    18b0:	2080      	movs	r0, #128	; 0x80
    18b2:	08e4      	lsrs	r4, r4, #3
    18b4:	0300      	lsls	r0, r0, #12
    18b6:	4204      	tst	r4, r0
    18b8:	d0e7      	beq.n	188a <__aeabi_dadd+0x54e>
    18ba:	08cb      	lsrs	r3, r1, #3
    18bc:	4203      	tst	r3, r0
    18be:	d1e4      	bne.n	188a <__aeabi_dadd+0x54e>
    18c0:	08d2      	lsrs	r2, r2, #3
    18c2:	0749      	lsls	r1, r1, #29
    18c4:	4311      	orrs	r1, r2
    18c6:	000f      	movs	r7, r1
    18c8:	001c      	movs	r4, r3
    18ca:	e7de      	b.n	188a <__aeabi_dadd+0x54e>
    18cc:	2700      	movs	r7, #0
    18ce:	2400      	movs	r4, #0
    18d0:	e5d5      	b.n	147e <__aeabi_dadd+0x142>
    18d2:	2100      	movs	r1, #0
    18d4:	e76b      	b.n	17ae <__aeabi_dadd+0x472>
    18d6:	2500      	movs	r5, #0
    18d8:	2700      	movs	r7, #0
    18da:	e5f3      	b.n	14c4 <__aeabi_dadd+0x188>
    18dc:	464e      	mov	r6, r9
    18de:	0025      	movs	r5, r4
    18e0:	3e20      	subs	r6, #32
    18e2:	40f5      	lsrs	r5, r6
    18e4:	464b      	mov	r3, r9
    18e6:	002e      	movs	r6, r5
    18e8:	2b20      	cmp	r3, #32
    18ea:	d02d      	beq.n	1948 <__aeabi_dadd+0x60c>
    18ec:	2540      	movs	r5, #64	; 0x40
    18ee:	1aed      	subs	r5, r5, r3
    18f0:	40ac      	lsls	r4, r5
    18f2:	4327      	orrs	r7, r4
    18f4:	1e7c      	subs	r4, r7, #1
    18f6:	41a7      	sbcs	r7, r4
    18f8:	2400      	movs	r4, #0
    18fa:	4337      	orrs	r7, r6
    18fc:	e6c9      	b.n	1692 <__aeabi_dadd+0x356>
    18fe:	2480      	movs	r4, #128	; 0x80
    1900:	2500      	movs	r5, #0
    1902:	0324      	lsls	r4, r4, #12
    1904:	4e13      	ldr	r6, [pc, #76]	; (1954 <__aeabi_dadd+0x618>)
    1906:	2700      	movs	r7, #0
    1908:	e5dc      	b.n	14c4 <__aeabi_dadd+0x188>
    190a:	4327      	orrs	r7, r4
    190c:	1e7c      	subs	r4, r7, #1
    190e:	41a7      	sbcs	r7, r4
    1910:	2400      	movs	r4, #0
    1912:	e779      	b.n	1808 <__aeabi_dadd+0x4cc>
    1914:	000c      	movs	r4, r1
    1916:	0017      	movs	r7, r2
    1918:	4e0e      	ldr	r6, [pc, #56]	; (1954 <__aeabi_dadd+0x618>)
    191a:	e593      	b.n	1444 <__aeabi_dadd+0x108>
    191c:	000c      	movs	r4, r1
    191e:	0017      	movs	r7, r2
    1920:	e590      	b.n	1444 <__aeabi_dadd+0x108>
    1922:	4656      	mov	r6, sl
    1924:	0023      	movs	r3, r4
    1926:	3e20      	subs	r6, #32
    1928:	40f3      	lsrs	r3, r6
    192a:	4699      	mov	r9, r3
    192c:	4653      	mov	r3, sl
    192e:	2b20      	cmp	r3, #32
    1930:	d00e      	beq.n	1950 <__aeabi_dadd+0x614>
    1932:	2340      	movs	r3, #64	; 0x40
    1934:	4656      	mov	r6, sl
    1936:	1b9b      	subs	r3, r3, r6
    1938:	409c      	lsls	r4, r3
    193a:	4327      	orrs	r7, r4
    193c:	1e7c      	subs	r4, r7, #1
    193e:	41a7      	sbcs	r7, r4
    1940:	464b      	mov	r3, r9
    1942:	2400      	movs	r4, #0
    1944:	431f      	orrs	r7, r3
    1946:	e75f      	b.n	1808 <__aeabi_dadd+0x4cc>
    1948:	2400      	movs	r4, #0
    194a:	e7d2      	b.n	18f2 <__aeabi_dadd+0x5b6>
    194c:	0017      	movs	r7, r2
    194e:	e5b2      	b.n	14b6 <__aeabi_dadd+0x17a>
    1950:	2400      	movs	r4, #0
    1952:	e7f2      	b.n	193a <__aeabi_dadd+0x5fe>
    1954:	000007ff 	.word	0x000007ff
    1958:	ff7fffff 	.word	0xff7fffff

0000195c <__aeabi_dmul>:
    195c:	b5f0      	push	{r4, r5, r6, r7, lr}
    195e:	4657      	mov	r7, sl
    1960:	4645      	mov	r5, r8
    1962:	46de      	mov	lr, fp
    1964:	464e      	mov	r6, r9
    1966:	b5e0      	push	{r5, r6, r7, lr}
    1968:	030c      	lsls	r4, r1, #12
    196a:	4698      	mov	r8, r3
    196c:	004e      	lsls	r6, r1, #1
    196e:	0b23      	lsrs	r3, r4, #12
    1970:	b087      	sub	sp, #28
    1972:	0007      	movs	r7, r0
    1974:	4692      	mov	sl, r2
    1976:	469b      	mov	fp, r3
    1978:	0d76      	lsrs	r6, r6, #21
    197a:	0fcd      	lsrs	r5, r1, #31
    197c:	2e00      	cmp	r6, #0
    197e:	d06b      	beq.n	1a58 <__aeabi_dmul+0xfc>
    1980:	4b6d      	ldr	r3, [pc, #436]	; (1b38 <__aeabi_dmul+0x1dc>)
    1982:	429e      	cmp	r6, r3
    1984:	d035      	beq.n	19f2 <__aeabi_dmul+0x96>
    1986:	2480      	movs	r4, #128	; 0x80
    1988:	465b      	mov	r3, fp
    198a:	0f42      	lsrs	r2, r0, #29
    198c:	0424      	lsls	r4, r4, #16
    198e:	00db      	lsls	r3, r3, #3
    1990:	4314      	orrs	r4, r2
    1992:	431c      	orrs	r4, r3
    1994:	00c3      	lsls	r3, r0, #3
    1996:	4699      	mov	r9, r3
    1998:	4b68      	ldr	r3, [pc, #416]	; (1b3c <__aeabi_dmul+0x1e0>)
    199a:	46a3      	mov	fp, r4
    199c:	469c      	mov	ip, r3
    199e:	2300      	movs	r3, #0
    19a0:	2700      	movs	r7, #0
    19a2:	4466      	add	r6, ip
    19a4:	9302      	str	r3, [sp, #8]
    19a6:	4643      	mov	r3, r8
    19a8:	031c      	lsls	r4, r3, #12
    19aa:	005a      	lsls	r2, r3, #1
    19ac:	0fdb      	lsrs	r3, r3, #31
    19ae:	4650      	mov	r0, sl
    19b0:	0b24      	lsrs	r4, r4, #12
    19b2:	0d52      	lsrs	r2, r2, #21
    19b4:	4698      	mov	r8, r3
    19b6:	d100      	bne.n	19ba <__aeabi_dmul+0x5e>
    19b8:	e076      	b.n	1aa8 <__aeabi_dmul+0x14c>
    19ba:	4b5f      	ldr	r3, [pc, #380]	; (1b38 <__aeabi_dmul+0x1dc>)
    19bc:	429a      	cmp	r2, r3
    19be:	d06d      	beq.n	1a9c <__aeabi_dmul+0x140>
    19c0:	2380      	movs	r3, #128	; 0x80
    19c2:	0f41      	lsrs	r1, r0, #29
    19c4:	041b      	lsls	r3, r3, #16
    19c6:	430b      	orrs	r3, r1
    19c8:	495c      	ldr	r1, [pc, #368]	; (1b3c <__aeabi_dmul+0x1e0>)
    19ca:	00e4      	lsls	r4, r4, #3
    19cc:	468c      	mov	ip, r1
    19ce:	431c      	orrs	r4, r3
    19d0:	00c3      	lsls	r3, r0, #3
    19d2:	2000      	movs	r0, #0
    19d4:	4462      	add	r2, ip
    19d6:	4641      	mov	r1, r8
    19d8:	18b6      	adds	r6, r6, r2
    19da:	4069      	eors	r1, r5
    19dc:	1c72      	adds	r2, r6, #1
    19de:	9101      	str	r1, [sp, #4]
    19e0:	4694      	mov	ip, r2
    19e2:	4307      	orrs	r7, r0
    19e4:	2f0f      	cmp	r7, #15
    19e6:	d900      	bls.n	19ea <__aeabi_dmul+0x8e>
    19e8:	e0b0      	b.n	1b4c <__aeabi_dmul+0x1f0>
    19ea:	4a55      	ldr	r2, [pc, #340]	; (1b40 <__aeabi_dmul+0x1e4>)
    19ec:	00bf      	lsls	r7, r7, #2
    19ee:	59d2      	ldr	r2, [r2, r7]
    19f0:	4697      	mov	pc, r2
    19f2:	465b      	mov	r3, fp
    19f4:	4303      	orrs	r3, r0
    19f6:	4699      	mov	r9, r3
    19f8:	d000      	beq.n	19fc <__aeabi_dmul+0xa0>
    19fa:	e087      	b.n	1b0c <__aeabi_dmul+0x1b0>
    19fc:	2300      	movs	r3, #0
    19fe:	469b      	mov	fp, r3
    1a00:	3302      	adds	r3, #2
    1a02:	2708      	movs	r7, #8
    1a04:	9302      	str	r3, [sp, #8]
    1a06:	e7ce      	b.n	19a6 <__aeabi_dmul+0x4a>
    1a08:	4642      	mov	r2, r8
    1a0a:	9201      	str	r2, [sp, #4]
    1a0c:	2802      	cmp	r0, #2
    1a0e:	d067      	beq.n	1ae0 <__aeabi_dmul+0x184>
    1a10:	2803      	cmp	r0, #3
    1a12:	d100      	bne.n	1a16 <__aeabi_dmul+0xba>
    1a14:	e20e      	b.n	1e34 <__aeabi_dmul+0x4d8>
    1a16:	2801      	cmp	r0, #1
    1a18:	d000      	beq.n	1a1c <__aeabi_dmul+0xc0>
    1a1a:	e162      	b.n	1ce2 <__aeabi_dmul+0x386>
    1a1c:	2300      	movs	r3, #0
    1a1e:	2400      	movs	r4, #0
    1a20:	2200      	movs	r2, #0
    1a22:	4699      	mov	r9, r3
    1a24:	9901      	ldr	r1, [sp, #4]
    1a26:	4001      	ands	r1, r0
    1a28:	b2cd      	uxtb	r5, r1
    1a2a:	2100      	movs	r1, #0
    1a2c:	0312      	lsls	r2, r2, #12
    1a2e:	0d0b      	lsrs	r3, r1, #20
    1a30:	0b12      	lsrs	r2, r2, #12
    1a32:	051b      	lsls	r3, r3, #20
    1a34:	4313      	orrs	r3, r2
    1a36:	4a43      	ldr	r2, [pc, #268]	; (1b44 <__aeabi_dmul+0x1e8>)
    1a38:	0524      	lsls	r4, r4, #20
    1a3a:	4013      	ands	r3, r2
    1a3c:	431c      	orrs	r4, r3
    1a3e:	0064      	lsls	r4, r4, #1
    1a40:	07ed      	lsls	r5, r5, #31
    1a42:	0864      	lsrs	r4, r4, #1
    1a44:	432c      	orrs	r4, r5
    1a46:	4648      	mov	r0, r9
    1a48:	0021      	movs	r1, r4
    1a4a:	b007      	add	sp, #28
    1a4c:	bc3c      	pop	{r2, r3, r4, r5}
    1a4e:	4690      	mov	r8, r2
    1a50:	4699      	mov	r9, r3
    1a52:	46a2      	mov	sl, r4
    1a54:	46ab      	mov	fp, r5
    1a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a58:	4303      	orrs	r3, r0
    1a5a:	4699      	mov	r9, r3
    1a5c:	d04f      	beq.n	1afe <__aeabi_dmul+0x1a2>
    1a5e:	465b      	mov	r3, fp
    1a60:	2b00      	cmp	r3, #0
    1a62:	d100      	bne.n	1a66 <__aeabi_dmul+0x10a>
    1a64:	e189      	b.n	1d7a <__aeabi_dmul+0x41e>
    1a66:	4658      	mov	r0, fp
    1a68:	f000 fdb8 	bl	25dc <__clzsi2>
    1a6c:	0003      	movs	r3, r0
    1a6e:	3b0b      	subs	r3, #11
    1a70:	2b1c      	cmp	r3, #28
    1a72:	dd00      	ble.n	1a76 <__aeabi_dmul+0x11a>
    1a74:	e17a      	b.n	1d6c <__aeabi_dmul+0x410>
    1a76:	221d      	movs	r2, #29
    1a78:	1ad3      	subs	r3, r2, r3
    1a7a:	003a      	movs	r2, r7
    1a7c:	0001      	movs	r1, r0
    1a7e:	465c      	mov	r4, fp
    1a80:	40da      	lsrs	r2, r3
    1a82:	3908      	subs	r1, #8
    1a84:	408c      	lsls	r4, r1
    1a86:	0013      	movs	r3, r2
    1a88:	408f      	lsls	r7, r1
    1a8a:	4323      	orrs	r3, r4
    1a8c:	469b      	mov	fp, r3
    1a8e:	46b9      	mov	r9, r7
    1a90:	2300      	movs	r3, #0
    1a92:	4e2d      	ldr	r6, [pc, #180]	; (1b48 <__aeabi_dmul+0x1ec>)
    1a94:	2700      	movs	r7, #0
    1a96:	1a36      	subs	r6, r6, r0
    1a98:	9302      	str	r3, [sp, #8]
    1a9a:	e784      	b.n	19a6 <__aeabi_dmul+0x4a>
    1a9c:	4653      	mov	r3, sl
    1a9e:	4323      	orrs	r3, r4
    1aa0:	d12a      	bne.n	1af8 <__aeabi_dmul+0x19c>
    1aa2:	2400      	movs	r4, #0
    1aa4:	2002      	movs	r0, #2
    1aa6:	e796      	b.n	19d6 <__aeabi_dmul+0x7a>
    1aa8:	4653      	mov	r3, sl
    1aaa:	4323      	orrs	r3, r4
    1aac:	d020      	beq.n	1af0 <__aeabi_dmul+0x194>
    1aae:	2c00      	cmp	r4, #0
    1ab0:	d100      	bne.n	1ab4 <__aeabi_dmul+0x158>
    1ab2:	e157      	b.n	1d64 <__aeabi_dmul+0x408>
    1ab4:	0020      	movs	r0, r4
    1ab6:	f000 fd91 	bl	25dc <__clzsi2>
    1aba:	0003      	movs	r3, r0
    1abc:	3b0b      	subs	r3, #11
    1abe:	2b1c      	cmp	r3, #28
    1ac0:	dd00      	ble.n	1ac4 <__aeabi_dmul+0x168>
    1ac2:	e149      	b.n	1d58 <__aeabi_dmul+0x3fc>
    1ac4:	211d      	movs	r1, #29
    1ac6:	1acb      	subs	r3, r1, r3
    1ac8:	4651      	mov	r1, sl
    1aca:	0002      	movs	r2, r0
    1acc:	40d9      	lsrs	r1, r3
    1ace:	4653      	mov	r3, sl
    1ad0:	3a08      	subs	r2, #8
    1ad2:	4094      	lsls	r4, r2
    1ad4:	4093      	lsls	r3, r2
    1ad6:	430c      	orrs	r4, r1
    1ad8:	4a1b      	ldr	r2, [pc, #108]	; (1b48 <__aeabi_dmul+0x1ec>)
    1ada:	1a12      	subs	r2, r2, r0
    1adc:	2000      	movs	r0, #0
    1ade:	e77a      	b.n	19d6 <__aeabi_dmul+0x7a>
    1ae0:	2501      	movs	r5, #1
    1ae2:	9b01      	ldr	r3, [sp, #4]
    1ae4:	4c14      	ldr	r4, [pc, #80]	; (1b38 <__aeabi_dmul+0x1dc>)
    1ae6:	401d      	ands	r5, r3
    1ae8:	2300      	movs	r3, #0
    1aea:	2200      	movs	r2, #0
    1aec:	4699      	mov	r9, r3
    1aee:	e79c      	b.n	1a2a <__aeabi_dmul+0xce>
    1af0:	2400      	movs	r4, #0
    1af2:	2200      	movs	r2, #0
    1af4:	2001      	movs	r0, #1
    1af6:	e76e      	b.n	19d6 <__aeabi_dmul+0x7a>
    1af8:	4653      	mov	r3, sl
    1afa:	2003      	movs	r0, #3
    1afc:	e76b      	b.n	19d6 <__aeabi_dmul+0x7a>
    1afe:	2300      	movs	r3, #0
    1b00:	469b      	mov	fp, r3
    1b02:	3301      	adds	r3, #1
    1b04:	2704      	movs	r7, #4
    1b06:	2600      	movs	r6, #0
    1b08:	9302      	str	r3, [sp, #8]
    1b0a:	e74c      	b.n	19a6 <__aeabi_dmul+0x4a>
    1b0c:	2303      	movs	r3, #3
    1b0e:	4681      	mov	r9, r0
    1b10:	270c      	movs	r7, #12
    1b12:	9302      	str	r3, [sp, #8]
    1b14:	e747      	b.n	19a6 <__aeabi_dmul+0x4a>
    1b16:	2280      	movs	r2, #128	; 0x80
    1b18:	2300      	movs	r3, #0
    1b1a:	2500      	movs	r5, #0
    1b1c:	0312      	lsls	r2, r2, #12
    1b1e:	4699      	mov	r9, r3
    1b20:	4c05      	ldr	r4, [pc, #20]	; (1b38 <__aeabi_dmul+0x1dc>)
    1b22:	e782      	b.n	1a2a <__aeabi_dmul+0xce>
    1b24:	465c      	mov	r4, fp
    1b26:	464b      	mov	r3, r9
    1b28:	9802      	ldr	r0, [sp, #8]
    1b2a:	e76f      	b.n	1a0c <__aeabi_dmul+0xb0>
    1b2c:	465c      	mov	r4, fp
    1b2e:	464b      	mov	r3, r9
    1b30:	9501      	str	r5, [sp, #4]
    1b32:	9802      	ldr	r0, [sp, #8]
    1b34:	e76a      	b.n	1a0c <__aeabi_dmul+0xb0>
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	000007ff 	.word	0x000007ff
    1b3c:	fffffc01 	.word	0xfffffc01
    1b40:	00002a24 	.word	0x00002a24
    1b44:	800fffff 	.word	0x800fffff
    1b48:	fffffc0d 	.word	0xfffffc0d
    1b4c:	464a      	mov	r2, r9
    1b4e:	4649      	mov	r1, r9
    1b50:	0c17      	lsrs	r7, r2, #16
    1b52:	0c1a      	lsrs	r2, r3, #16
    1b54:	041b      	lsls	r3, r3, #16
    1b56:	0c1b      	lsrs	r3, r3, #16
    1b58:	0408      	lsls	r0, r1, #16
    1b5a:	0019      	movs	r1, r3
    1b5c:	0c00      	lsrs	r0, r0, #16
    1b5e:	4341      	muls	r1, r0
    1b60:	0015      	movs	r5, r2
    1b62:	4688      	mov	r8, r1
    1b64:	0019      	movs	r1, r3
    1b66:	437d      	muls	r5, r7
    1b68:	4379      	muls	r1, r7
    1b6a:	9503      	str	r5, [sp, #12]
    1b6c:	4689      	mov	r9, r1
    1b6e:	0029      	movs	r1, r5
    1b70:	0015      	movs	r5, r2
    1b72:	4345      	muls	r5, r0
    1b74:	444d      	add	r5, r9
    1b76:	9502      	str	r5, [sp, #8]
    1b78:	4645      	mov	r5, r8
    1b7a:	0c2d      	lsrs	r5, r5, #16
    1b7c:	46aa      	mov	sl, r5
    1b7e:	9d02      	ldr	r5, [sp, #8]
    1b80:	4455      	add	r5, sl
    1b82:	45a9      	cmp	r9, r5
    1b84:	d906      	bls.n	1b94 <__aeabi_dmul+0x238>
    1b86:	468a      	mov	sl, r1
    1b88:	2180      	movs	r1, #128	; 0x80
    1b8a:	0249      	lsls	r1, r1, #9
    1b8c:	4689      	mov	r9, r1
    1b8e:	44ca      	add	sl, r9
    1b90:	4651      	mov	r1, sl
    1b92:	9103      	str	r1, [sp, #12]
    1b94:	0c29      	lsrs	r1, r5, #16
    1b96:	9104      	str	r1, [sp, #16]
    1b98:	4641      	mov	r1, r8
    1b9a:	0409      	lsls	r1, r1, #16
    1b9c:	042d      	lsls	r5, r5, #16
    1b9e:	0c09      	lsrs	r1, r1, #16
    1ba0:	4688      	mov	r8, r1
    1ba2:	0029      	movs	r1, r5
    1ba4:	0c25      	lsrs	r5, r4, #16
    1ba6:	0424      	lsls	r4, r4, #16
    1ba8:	4441      	add	r1, r8
    1baa:	0c24      	lsrs	r4, r4, #16
    1bac:	9105      	str	r1, [sp, #20]
    1bae:	0021      	movs	r1, r4
    1bb0:	4341      	muls	r1, r0
    1bb2:	4688      	mov	r8, r1
    1bb4:	0021      	movs	r1, r4
    1bb6:	4379      	muls	r1, r7
    1bb8:	468a      	mov	sl, r1
    1bba:	4368      	muls	r0, r5
    1bbc:	4641      	mov	r1, r8
    1bbe:	4450      	add	r0, sl
    1bc0:	4681      	mov	r9, r0
    1bc2:	0c08      	lsrs	r0, r1, #16
    1bc4:	4448      	add	r0, r9
    1bc6:	436f      	muls	r7, r5
    1bc8:	4582      	cmp	sl, r0
    1bca:	d903      	bls.n	1bd4 <__aeabi_dmul+0x278>
    1bcc:	2180      	movs	r1, #128	; 0x80
    1bce:	0249      	lsls	r1, r1, #9
    1bd0:	4689      	mov	r9, r1
    1bd2:	444f      	add	r7, r9
    1bd4:	0c01      	lsrs	r1, r0, #16
    1bd6:	4689      	mov	r9, r1
    1bd8:	0039      	movs	r1, r7
    1bda:	4449      	add	r1, r9
    1bdc:	9102      	str	r1, [sp, #8]
    1bde:	4641      	mov	r1, r8
    1be0:	040f      	lsls	r7, r1, #16
    1be2:	9904      	ldr	r1, [sp, #16]
    1be4:	0c3f      	lsrs	r7, r7, #16
    1be6:	4688      	mov	r8, r1
    1be8:	0400      	lsls	r0, r0, #16
    1bea:	19c0      	adds	r0, r0, r7
    1bec:	4480      	add	r8, r0
    1bee:	4641      	mov	r1, r8
    1bf0:	9104      	str	r1, [sp, #16]
    1bf2:	4659      	mov	r1, fp
    1bf4:	0c0f      	lsrs	r7, r1, #16
    1bf6:	0409      	lsls	r1, r1, #16
    1bf8:	0c09      	lsrs	r1, r1, #16
    1bfa:	4688      	mov	r8, r1
    1bfc:	4359      	muls	r1, r3
    1bfe:	468a      	mov	sl, r1
    1c00:	0039      	movs	r1, r7
    1c02:	4351      	muls	r1, r2
    1c04:	4689      	mov	r9, r1
    1c06:	4641      	mov	r1, r8
    1c08:	434a      	muls	r2, r1
    1c0a:	4651      	mov	r1, sl
    1c0c:	0c09      	lsrs	r1, r1, #16
    1c0e:	468b      	mov	fp, r1
    1c10:	437b      	muls	r3, r7
    1c12:	18d2      	adds	r2, r2, r3
    1c14:	445a      	add	r2, fp
    1c16:	4293      	cmp	r3, r2
    1c18:	d903      	bls.n	1c22 <__aeabi_dmul+0x2c6>
    1c1a:	2380      	movs	r3, #128	; 0x80
    1c1c:	025b      	lsls	r3, r3, #9
    1c1e:	469b      	mov	fp, r3
    1c20:	44d9      	add	r9, fp
    1c22:	4651      	mov	r1, sl
    1c24:	0409      	lsls	r1, r1, #16
    1c26:	0c09      	lsrs	r1, r1, #16
    1c28:	468a      	mov	sl, r1
    1c2a:	4641      	mov	r1, r8
    1c2c:	4361      	muls	r1, r4
    1c2e:	437c      	muls	r4, r7
    1c30:	0c13      	lsrs	r3, r2, #16
    1c32:	0412      	lsls	r2, r2, #16
    1c34:	444b      	add	r3, r9
    1c36:	4452      	add	r2, sl
    1c38:	46a1      	mov	r9, r4
    1c3a:	468a      	mov	sl, r1
    1c3c:	003c      	movs	r4, r7
    1c3e:	4641      	mov	r1, r8
    1c40:	436c      	muls	r4, r5
    1c42:	434d      	muls	r5, r1
    1c44:	4651      	mov	r1, sl
    1c46:	444d      	add	r5, r9
    1c48:	0c0f      	lsrs	r7, r1, #16
    1c4a:	197d      	adds	r5, r7, r5
    1c4c:	45a9      	cmp	r9, r5
    1c4e:	d903      	bls.n	1c58 <__aeabi_dmul+0x2fc>
    1c50:	2180      	movs	r1, #128	; 0x80
    1c52:	0249      	lsls	r1, r1, #9
    1c54:	4688      	mov	r8, r1
    1c56:	4444      	add	r4, r8
    1c58:	9f04      	ldr	r7, [sp, #16]
    1c5a:	9903      	ldr	r1, [sp, #12]
    1c5c:	46b8      	mov	r8, r7
    1c5e:	4441      	add	r1, r8
    1c60:	468b      	mov	fp, r1
    1c62:	4583      	cmp	fp, r0
    1c64:	4180      	sbcs	r0, r0
    1c66:	4241      	negs	r1, r0
    1c68:	4688      	mov	r8, r1
    1c6a:	4651      	mov	r1, sl
    1c6c:	0408      	lsls	r0, r1, #16
    1c6e:	042f      	lsls	r7, r5, #16
    1c70:	0c00      	lsrs	r0, r0, #16
    1c72:	183f      	adds	r7, r7, r0
    1c74:	4658      	mov	r0, fp
    1c76:	9902      	ldr	r1, [sp, #8]
    1c78:	1810      	adds	r0, r2, r0
    1c7a:	4689      	mov	r9, r1
    1c7c:	4290      	cmp	r0, r2
    1c7e:	4192      	sbcs	r2, r2
    1c80:	444f      	add	r7, r9
    1c82:	46ba      	mov	sl, r7
    1c84:	4252      	negs	r2, r2
    1c86:	4699      	mov	r9, r3
    1c88:	4693      	mov	fp, r2
    1c8a:	44c2      	add	sl, r8
    1c8c:	44d1      	add	r9, sl
    1c8e:	44cb      	add	fp, r9
    1c90:	428f      	cmp	r7, r1
    1c92:	41bf      	sbcs	r7, r7
    1c94:	45c2      	cmp	sl, r8
    1c96:	4189      	sbcs	r1, r1
    1c98:	4599      	cmp	r9, r3
    1c9a:	419b      	sbcs	r3, r3
    1c9c:	4593      	cmp	fp, r2
    1c9e:	4192      	sbcs	r2, r2
    1ca0:	427f      	negs	r7, r7
    1ca2:	4249      	negs	r1, r1
    1ca4:	0c2d      	lsrs	r5, r5, #16
    1ca6:	4252      	negs	r2, r2
    1ca8:	430f      	orrs	r7, r1
    1caa:	425b      	negs	r3, r3
    1cac:	4313      	orrs	r3, r2
    1cae:	197f      	adds	r7, r7, r5
    1cb0:	18ff      	adds	r7, r7, r3
    1cb2:	465b      	mov	r3, fp
    1cb4:	193c      	adds	r4, r7, r4
    1cb6:	0ddb      	lsrs	r3, r3, #23
    1cb8:	9a05      	ldr	r2, [sp, #20]
    1cba:	0264      	lsls	r4, r4, #9
    1cbc:	431c      	orrs	r4, r3
    1cbe:	0243      	lsls	r3, r0, #9
    1cc0:	4313      	orrs	r3, r2
    1cc2:	1e5d      	subs	r5, r3, #1
    1cc4:	41ab      	sbcs	r3, r5
    1cc6:	465a      	mov	r2, fp
    1cc8:	0dc0      	lsrs	r0, r0, #23
    1cca:	4303      	orrs	r3, r0
    1ccc:	0252      	lsls	r2, r2, #9
    1cce:	4313      	orrs	r3, r2
    1cd0:	01e2      	lsls	r2, r4, #7
    1cd2:	d556      	bpl.n	1d82 <__aeabi_dmul+0x426>
    1cd4:	2001      	movs	r0, #1
    1cd6:	085a      	lsrs	r2, r3, #1
    1cd8:	4003      	ands	r3, r0
    1cda:	4313      	orrs	r3, r2
    1cdc:	07e2      	lsls	r2, r4, #31
    1cde:	4313      	orrs	r3, r2
    1ce0:	0864      	lsrs	r4, r4, #1
    1ce2:	485a      	ldr	r0, [pc, #360]	; (1e4c <__aeabi_dmul+0x4f0>)
    1ce4:	4460      	add	r0, ip
    1ce6:	2800      	cmp	r0, #0
    1ce8:	dd4d      	ble.n	1d86 <__aeabi_dmul+0x42a>
    1cea:	075a      	lsls	r2, r3, #29
    1cec:	d009      	beq.n	1d02 <__aeabi_dmul+0x3a6>
    1cee:	220f      	movs	r2, #15
    1cf0:	401a      	ands	r2, r3
    1cf2:	2a04      	cmp	r2, #4
    1cf4:	d005      	beq.n	1d02 <__aeabi_dmul+0x3a6>
    1cf6:	1d1a      	adds	r2, r3, #4
    1cf8:	429a      	cmp	r2, r3
    1cfa:	419b      	sbcs	r3, r3
    1cfc:	425b      	negs	r3, r3
    1cfe:	18e4      	adds	r4, r4, r3
    1d00:	0013      	movs	r3, r2
    1d02:	01e2      	lsls	r2, r4, #7
    1d04:	d504      	bpl.n	1d10 <__aeabi_dmul+0x3b4>
    1d06:	2080      	movs	r0, #128	; 0x80
    1d08:	4a51      	ldr	r2, [pc, #324]	; (1e50 <__aeabi_dmul+0x4f4>)
    1d0a:	00c0      	lsls	r0, r0, #3
    1d0c:	4014      	ands	r4, r2
    1d0e:	4460      	add	r0, ip
    1d10:	4a50      	ldr	r2, [pc, #320]	; (1e54 <__aeabi_dmul+0x4f8>)
    1d12:	4290      	cmp	r0, r2
    1d14:	dd00      	ble.n	1d18 <__aeabi_dmul+0x3bc>
    1d16:	e6e3      	b.n	1ae0 <__aeabi_dmul+0x184>
    1d18:	2501      	movs	r5, #1
    1d1a:	08db      	lsrs	r3, r3, #3
    1d1c:	0762      	lsls	r2, r4, #29
    1d1e:	431a      	orrs	r2, r3
    1d20:	0264      	lsls	r4, r4, #9
    1d22:	9b01      	ldr	r3, [sp, #4]
    1d24:	4691      	mov	r9, r2
    1d26:	0b22      	lsrs	r2, r4, #12
    1d28:	0544      	lsls	r4, r0, #21
    1d2a:	0d64      	lsrs	r4, r4, #21
    1d2c:	401d      	ands	r5, r3
    1d2e:	e67c      	b.n	1a2a <__aeabi_dmul+0xce>
    1d30:	2280      	movs	r2, #128	; 0x80
    1d32:	4659      	mov	r1, fp
    1d34:	0312      	lsls	r2, r2, #12
    1d36:	4211      	tst	r1, r2
    1d38:	d008      	beq.n	1d4c <__aeabi_dmul+0x3f0>
    1d3a:	4214      	tst	r4, r2
    1d3c:	d106      	bne.n	1d4c <__aeabi_dmul+0x3f0>
    1d3e:	4322      	orrs	r2, r4
    1d40:	0312      	lsls	r2, r2, #12
    1d42:	0b12      	lsrs	r2, r2, #12
    1d44:	4645      	mov	r5, r8
    1d46:	4699      	mov	r9, r3
    1d48:	4c43      	ldr	r4, [pc, #268]	; (1e58 <__aeabi_dmul+0x4fc>)
    1d4a:	e66e      	b.n	1a2a <__aeabi_dmul+0xce>
    1d4c:	465b      	mov	r3, fp
    1d4e:	431a      	orrs	r2, r3
    1d50:	0312      	lsls	r2, r2, #12
    1d52:	0b12      	lsrs	r2, r2, #12
    1d54:	4c40      	ldr	r4, [pc, #256]	; (1e58 <__aeabi_dmul+0x4fc>)
    1d56:	e668      	b.n	1a2a <__aeabi_dmul+0xce>
    1d58:	0003      	movs	r3, r0
    1d5a:	4654      	mov	r4, sl
    1d5c:	3b28      	subs	r3, #40	; 0x28
    1d5e:	409c      	lsls	r4, r3
    1d60:	2300      	movs	r3, #0
    1d62:	e6b9      	b.n	1ad8 <__aeabi_dmul+0x17c>
    1d64:	f000 fc3a 	bl	25dc <__clzsi2>
    1d68:	3020      	adds	r0, #32
    1d6a:	e6a6      	b.n	1aba <__aeabi_dmul+0x15e>
    1d6c:	0003      	movs	r3, r0
    1d6e:	3b28      	subs	r3, #40	; 0x28
    1d70:	409f      	lsls	r7, r3
    1d72:	2300      	movs	r3, #0
    1d74:	46bb      	mov	fp, r7
    1d76:	4699      	mov	r9, r3
    1d78:	e68a      	b.n	1a90 <__aeabi_dmul+0x134>
    1d7a:	f000 fc2f 	bl	25dc <__clzsi2>
    1d7e:	3020      	adds	r0, #32
    1d80:	e674      	b.n	1a6c <__aeabi_dmul+0x110>
    1d82:	46b4      	mov	ip, r6
    1d84:	e7ad      	b.n	1ce2 <__aeabi_dmul+0x386>
    1d86:	2501      	movs	r5, #1
    1d88:	1a2a      	subs	r2, r5, r0
    1d8a:	2a38      	cmp	r2, #56	; 0x38
    1d8c:	dd06      	ble.n	1d9c <__aeabi_dmul+0x440>
    1d8e:	9b01      	ldr	r3, [sp, #4]
    1d90:	2400      	movs	r4, #0
    1d92:	401d      	ands	r5, r3
    1d94:	2300      	movs	r3, #0
    1d96:	2200      	movs	r2, #0
    1d98:	4699      	mov	r9, r3
    1d9a:	e646      	b.n	1a2a <__aeabi_dmul+0xce>
    1d9c:	2a1f      	cmp	r2, #31
    1d9e:	dc21      	bgt.n	1de4 <__aeabi_dmul+0x488>
    1da0:	2520      	movs	r5, #32
    1da2:	0020      	movs	r0, r4
    1da4:	1aad      	subs	r5, r5, r2
    1da6:	001e      	movs	r6, r3
    1da8:	40ab      	lsls	r3, r5
    1daa:	40a8      	lsls	r0, r5
    1dac:	40d6      	lsrs	r6, r2
    1dae:	1e5d      	subs	r5, r3, #1
    1db0:	41ab      	sbcs	r3, r5
    1db2:	4330      	orrs	r0, r6
    1db4:	4318      	orrs	r0, r3
    1db6:	40d4      	lsrs	r4, r2
    1db8:	0743      	lsls	r3, r0, #29
    1dba:	d009      	beq.n	1dd0 <__aeabi_dmul+0x474>
    1dbc:	230f      	movs	r3, #15
    1dbe:	4003      	ands	r3, r0
    1dc0:	2b04      	cmp	r3, #4
    1dc2:	d005      	beq.n	1dd0 <__aeabi_dmul+0x474>
    1dc4:	0003      	movs	r3, r0
    1dc6:	1d18      	adds	r0, r3, #4
    1dc8:	4298      	cmp	r0, r3
    1dca:	419b      	sbcs	r3, r3
    1dcc:	425b      	negs	r3, r3
    1dce:	18e4      	adds	r4, r4, r3
    1dd0:	0223      	lsls	r3, r4, #8
    1dd2:	d521      	bpl.n	1e18 <__aeabi_dmul+0x4bc>
    1dd4:	2501      	movs	r5, #1
    1dd6:	9b01      	ldr	r3, [sp, #4]
    1dd8:	2401      	movs	r4, #1
    1dda:	401d      	ands	r5, r3
    1ddc:	2300      	movs	r3, #0
    1dde:	2200      	movs	r2, #0
    1de0:	4699      	mov	r9, r3
    1de2:	e622      	b.n	1a2a <__aeabi_dmul+0xce>
    1de4:	251f      	movs	r5, #31
    1de6:	0021      	movs	r1, r4
    1de8:	426d      	negs	r5, r5
    1dea:	1a28      	subs	r0, r5, r0
    1dec:	40c1      	lsrs	r1, r0
    1dee:	0008      	movs	r0, r1
    1df0:	2a20      	cmp	r2, #32
    1df2:	d01d      	beq.n	1e30 <__aeabi_dmul+0x4d4>
    1df4:	355f      	adds	r5, #95	; 0x5f
    1df6:	1aaa      	subs	r2, r5, r2
    1df8:	4094      	lsls	r4, r2
    1dfa:	4323      	orrs	r3, r4
    1dfc:	1e5c      	subs	r4, r3, #1
    1dfe:	41a3      	sbcs	r3, r4
    1e00:	2507      	movs	r5, #7
    1e02:	4303      	orrs	r3, r0
    1e04:	401d      	ands	r5, r3
    1e06:	2200      	movs	r2, #0
    1e08:	2d00      	cmp	r5, #0
    1e0a:	d009      	beq.n	1e20 <__aeabi_dmul+0x4c4>
    1e0c:	220f      	movs	r2, #15
    1e0e:	2400      	movs	r4, #0
    1e10:	401a      	ands	r2, r3
    1e12:	0018      	movs	r0, r3
    1e14:	2a04      	cmp	r2, #4
    1e16:	d1d6      	bne.n	1dc6 <__aeabi_dmul+0x46a>
    1e18:	0003      	movs	r3, r0
    1e1a:	0765      	lsls	r5, r4, #29
    1e1c:	0264      	lsls	r4, r4, #9
    1e1e:	0b22      	lsrs	r2, r4, #12
    1e20:	08db      	lsrs	r3, r3, #3
    1e22:	432b      	orrs	r3, r5
    1e24:	2501      	movs	r5, #1
    1e26:	4699      	mov	r9, r3
    1e28:	9b01      	ldr	r3, [sp, #4]
    1e2a:	2400      	movs	r4, #0
    1e2c:	401d      	ands	r5, r3
    1e2e:	e5fc      	b.n	1a2a <__aeabi_dmul+0xce>
    1e30:	2400      	movs	r4, #0
    1e32:	e7e2      	b.n	1dfa <__aeabi_dmul+0x49e>
    1e34:	2280      	movs	r2, #128	; 0x80
    1e36:	2501      	movs	r5, #1
    1e38:	0312      	lsls	r2, r2, #12
    1e3a:	4322      	orrs	r2, r4
    1e3c:	9901      	ldr	r1, [sp, #4]
    1e3e:	0312      	lsls	r2, r2, #12
    1e40:	0b12      	lsrs	r2, r2, #12
    1e42:	400d      	ands	r5, r1
    1e44:	4699      	mov	r9, r3
    1e46:	4c04      	ldr	r4, [pc, #16]	; (1e58 <__aeabi_dmul+0x4fc>)
    1e48:	e5ef      	b.n	1a2a <__aeabi_dmul+0xce>
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	000003ff 	.word	0x000003ff
    1e50:	feffffff 	.word	0xfeffffff
    1e54:	000007fe 	.word	0x000007fe
    1e58:	000007ff 	.word	0x000007ff

00001e5c <__aeabi_dsub>:
    1e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e5e:	4646      	mov	r6, r8
    1e60:	46d6      	mov	lr, sl
    1e62:	464f      	mov	r7, r9
    1e64:	030c      	lsls	r4, r1, #12
    1e66:	b5c0      	push	{r6, r7, lr}
    1e68:	0fcd      	lsrs	r5, r1, #31
    1e6a:	004e      	lsls	r6, r1, #1
    1e6c:	0a61      	lsrs	r1, r4, #9
    1e6e:	0f44      	lsrs	r4, r0, #29
    1e70:	430c      	orrs	r4, r1
    1e72:	00c1      	lsls	r1, r0, #3
    1e74:	0058      	lsls	r0, r3, #1
    1e76:	0d40      	lsrs	r0, r0, #21
    1e78:	4684      	mov	ip, r0
    1e7a:	468a      	mov	sl, r1
    1e7c:	000f      	movs	r7, r1
    1e7e:	0319      	lsls	r1, r3, #12
    1e80:	0f50      	lsrs	r0, r2, #29
    1e82:	0a49      	lsrs	r1, r1, #9
    1e84:	4301      	orrs	r1, r0
    1e86:	48c6      	ldr	r0, [pc, #792]	; (21a0 <STACK_SIZE+0x1a0>)
    1e88:	0d76      	lsrs	r6, r6, #21
    1e8a:	46a8      	mov	r8, r5
    1e8c:	0fdb      	lsrs	r3, r3, #31
    1e8e:	00d2      	lsls	r2, r2, #3
    1e90:	4584      	cmp	ip, r0
    1e92:	d100      	bne.n	1e96 <__aeabi_dsub+0x3a>
    1e94:	e0d8      	b.n	2048 <STACK_SIZE+0x48>
    1e96:	2001      	movs	r0, #1
    1e98:	4043      	eors	r3, r0
    1e9a:	42ab      	cmp	r3, r5
    1e9c:	d100      	bne.n	1ea0 <__aeabi_dsub+0x44>
    1e9e:	e0a6      	b.n	1fee <__aeabi_dsub+0x192>
    1ea0:	4660      	mov	r0, ip
    1ea2:	1a35      	subs	r5, r6, r0
    1ea4:	2d00      	cmp	r5, #0
    1ea6:	dc00      	bgt.n	1eaa <__aeabi_dsub+0x4e>
    1ea8:	e105      	b.n	20b6 <STACK_SIZE+0xb6>
    1eaa:	2800      	cmp	r0, #0
    1eac:	d110      	bne.n	1ed0 <__aeabi_dsub+0x74>
    1eae:	000b      	movs	r3, r1
    1eb0:	4313      	orrs	r3, r2
    1eb2:	d100      	bne.n	1eb6 <__aeabi_dsub+0x5a>
    1eb4:	e0d7      	b.n	2066 <STACK_SIZE+0x66>
    1eb6:	1e6b      	subs	r3, r5, #1
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d000      	beq.n	1ebe <__aeabi_dsub+0x62>
    1ebc:	e14b      	b.n	2156 <STACK_SIZE+0x156>
    1ebe:	4653      	mov	r3, sl
    1ec0:	1a9f      	subs	r7, r3, r2
    1ec2:	45ba      	cmp	sl, r7
    1ec4:	4180      	sbcs	r0, r0
    1ec6:	1a64      	subs	r4, r4, r1
    1ec8:	4240      	negs	r0, r0
    1eca:	1a24      	subs	r4, r4, r0
    1ecc:	2601      	movs	r6, #1
    1ece:	e01e      	b.n	1f0e <__aeabi_dsub+0xb2>
    1ed0:	4bb3      	ldr	r3, [pc, #716]	; (21a0 <STACK_SIZE+0x1a0>)
    1ed2:	429e      	cmp	r6, r3
    1ed4:	d048      	beq.n	1f68 <__aeabi_dsub+0x10c>
    1ed6:	2380      	movs	r3, #128	; 0x80
    1ed8:	041b      	lsls	r3, r3, #16
    1eda:	4319      	orrs	r1, r3
    1edc:	2d38      	cmp	r5, #56	; 0x38
    1ede:	dd00      	ble.n	1ee2 <__aeabi_dsub+0x86>
    1ee0:	e119      	b.n	2116 <STACK_SIZE+0x116>
    1ee2:	2d1f      	cmp	r5, #31
    1ee4:	dd00      	ble.n	1ee8 <__aeabi_dsub+0x8c>
    1ee6:	e14c      	b.n	2182 <STACK_SIZE+0x182>
    1ee8:	2320      	movs	r3, #32
    1eea:	000f      	movs	r7, r1
    1eec:	1b5b      	subs	r3, r3, r5
    1eee:	0010      	movs	r0, r2
    1ef0:	409a      	lsls	r2, r3
    1ef2:	409f      	lsls	r7, r3
    1ef4:	40e8      	lsrs	r0, r5
    1ef6:	1e53      	subs	r3, r2, #1
    1ef8:	419a      	sbcs	r2, r3
    1efa:	40e9      	lsrs	r1, r5
    1efc:	4307      	orrs	r7, r0
    1efe:	4317      	orrs	r7, r2
    1f00:	4653      	mov	r3, sl
    1f02:	1bdf      	subs	r7, r3, r7
    1f04:	1a61      	subs	r1, r4, r1
    1f06:	45ba      	cmp	sl, r7
    1f08:	41a4      	sbcs	r4, r4
    1f0a:	4264      	negs	r4, r4
    1f0c:	1b0c      	subs	r4, r1, r4
    1f0e:	0223      	lsls	r3, r4, #8
    1f10:	d400      	bmi.n	1f14 <__aeabi_dsub+0xb8>
    1f12:	e0c5      	b.n	20a0 <STACK_SIZE+0xa0>
    1f14:	0264      	lsls	r4, r4, #9
    1f16:	0a65      	lsrs	r5, r4, #9
    1f18:	2d00      	cmp	r5, #0
    1f1a:	d100      	bne.n	1f1e <__aeabi_dsub+0xc2>
    1f1c:	e0f6      	b.n	210c <STACK_SIZE+0x10c>
    1f1e:	0028      	movs	r0, r5
    1f20:	f000 fb5c 	bl	25dc <__clzsi2>
    1f24:	0003      	movs	r3, r0
    1f26:	3b08      	subs	r3, #8
    1f28:	2b1f      	cmp	r3, #31
    1f2a:	dd00      	ble.n	1f2e <__aeabi_dsub+0xd2>
    1f2c:	e0e9      	b.n	2102 <STACK_SIZE+0x102>
    1f2e:	2220      	movs	r2, #32
    1f30:	003c      	movs	r4, r7
    1f32:	1ad2      	subs	r2, r2, r3
    1f34:	409d      	lsls	r5, r3
    1f36:	40d4      	lsrs	r4, r2
    1f38:	409f      	lsls	r7, r3
    1f3a:	4325      	orrs	r5, r4
    1f3c:	429e      	cmp	r6, r3
    1f3e:	dd00      	ble.n	1f42 <__aeabi_dsub+0xe6>
    1f40:	e0db      	b.n	20fa <STACK_SIZE+0xfa>
    1f42:	1b9e      	subs	r6, r3, r6
    1f44:	1c73      	adds	r3, r6, #1
    1f46:	2b1f      	cmp	r3, #31
    1f48:	dd00      	ble.n	1f4c <__aeabi_dsub+0xf0>
    1f4a:	e10a      	b.n	2162 <STACK_SIZE+0x162>
    1f4c:	2220      	movs	r2, #32
    1f4e:	0038      	movs	r0, r7
    1f50:	1ad2      	subs	r2, r2, r3
    1f52:	0029      	movs	r1, r5
    1f54:	4097      	lsls	r7, r2
    1f56:	002c      	movs	r4, r5
    1f58:	4091      	lsls	r1, r2
    1f5a:	40d8      	lsrs	r0, r3
    1f5c:	1e7a      	subs	r2, r7, #1
    1f5e:	4197      	sbcs	r7, r2
    1f60:	40dc      	lsrs	r4, r3
    1f62:	2600      	movs	r6, #0
    1f64:	4301      	orrs	r1, r0
    1f66:	430f      	orrs	r7, r1
    1f68:	077b      	lsls	r3, r7, #29
    1f6a:	d009      	beq.n	1f80 <__aeabi_dsub+0x124>
    1f6c:	230f      	movs	r3, #15
    1f6e:	403b      	ands	r3, r7
    1f70:	2b04      	cmp	r3, #4
    1f72:	d005      	beq.n	1f80 <__aeabi_dsub+0x124>
    1f74:	1d3b      	adds	r3, r7, #4
    1f76:	42bb      	cmp	r3, r7
    1f78:	41bf      	sbcs	r7, r7
    1f7a:	427f      	negs	r7, r7
    1f7c:	19e4      	adds	r4, r4, r7
    1f7e:	001f      	movs	r7, r3
    1f80:	0223      	lsls	r3, r4, #8
    1f82:	d525      	bpl.n	1fd0 <__aeabi_dsub+0x174>
    1f84:	4b86      	ldr	r3, [pc, #536]	; (21a0 <STACK_SIZE+0x1a0>)
    1f86:	3601      	adds	r6, #1
    1f88:	429e      	cmp	r6, r3
    1f8a:	d100      	bne.n	1f8e <__aeabi_dsub+0x132>
    1f8c:	e0af      	b.n	20ee <STACK_SIZE+0xee>
    1f8e:	4b85      	ldr	r3, [pc, #532]	; (21a4 <STACK_SIZE+0x1a4>)
    1f90:	2501      	movs	r5, #1
    1f92:	401c      	ands	r4, r3
    1f94:	4643      	mov	r3, r8
    1f96:	0762      	lsls	r2, r4, #29
    1f98:	08ff      	lsrs	r7, r7, #3
    1f9a:	0264      	lsls	r4, r4, #9
    1f9c:	0576      	lsls	r6, r6, #21
    1f9e:	4317      	orrs	r7, r2
    1fa0:	0b24      	lsrs	r4, r4, #12
    1fa2:	0d76      	lsrs	r6, r6, #21
    1fa4:	401d      	ands	r5, r3
    1fa6:	2100      	movs	r1, #0
    1fa8:	0324      	lsls	r4, r4, #12
    1faa:	0b23      	lsrs	r3, r4, #12
    1fac:	0d0c      	lsrs	r4, r1, #20
    1fae:	4a7e      	ldr	r2, [pc, #504]	; (21a8 <STACK_SIZE+0x1a8>)
    1fb0:	0524      	lsls	r4, r4, #20
    1fb2:	431c      	orrs	r4, r3
    1fb4:	4014      	ands	r4, r2
    1fb6:	0533      	lsls	r3, r6, #20
    1fb8:	4323      	orrs	r3, r4
    1fba:	005b      	lsls	r3, r3, #1
    1fbc:	07ed      	lsls	r5, r5, #31
    1fbe:	085b      	lsrs	r3, r3, #1
    1fc0:	432b      	orrs	r3, r5
    1fc2:	0038      	movs	r0, r7
    1fc4:	0019      	movs	r1, r3
    1fc6:	bc1c      	pop	{r2, r3, r4}
    1fc8:	4690      	mov	r8, r2
    1fca:	4699      	mov	r9, r3
    1fcc:	46a2      	mov	sl, r4
    1fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fd0:	2501      	movs	r5, #1
    1fd2:	4643      	mov	r3, r8
    1fd4:	0762      	lsls	r2, r4, #29
    1fd6:	08ff      	lsrs	r7, r7, #3
    1fd8:	4317      	orrs	r7, r2
    1fda:	08e4      	lsrs	r4, r4, #3
    1fdc:	401d      	ands	r5, r3
    1fde:	4b70      	ldr	r3, [pc, #448]	; (21a0 <STACK_SIZE+0x1a0>)
    1fe0:	429e      	cmp	r6, r3
    1fe2:	d036      	beq.n	2052 <STACK_SIZE+0x52>
    1fe4:	0324      	lsls	r4, r4, #12
    1fe6:	0576      	lsls	r6, r6, #21
    1fe8:	0b24      	lsrs	r4, r4, #12
    1fea:	0d76      	lsrs	r6, r6, #21
    1fec:	e7db      	b.n	1fa6 <__aeabi_dsub+0x14a>
    1fee:	4663      	mov	r3, ip
    1ff0:	1af3      	subs	r3, r6, r3
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	dc00      	bgt.n	1ff8 <__aeabi_dsub+0x19c>
    1ff6:	e094      	b.n	2122 <STACK_SIZE+0x122>
    1ff8:	4660      	mov	r0, ip
    1ffa:	2800      	cmp	r0, #0
    1ffc:	d035      	beq.n	206a <STACK_SIZE+0x6a>
    1ffe:	4868      	ldr	r0, [pc, #416]	; (21a0 <STACK_SIZE+0x1a0>)
    2000:	4286      	cmp	r6, r0
    2002:	d0b1      	beq.n	1f68 <__aeabi_dsub+0x10c>
    2004:	2780      	movs	r7, #128	; 0x80
    2006:	043f      	lsls	r7, r7, #16
    2008:	4339      	orrs	r1, r7
    200a:	2b38      	cmp	r3, #56	; 0x38
    200c:	dc00      	bgt.n	2010 <STACK_SIZE+0x10>
    200e:	e0fd      	b.n	220c <STACK_SIZE+0x20c>
    2010:	430a      	orrs	r2, r1
    2012:	0017      	movs	r7, r2
    2014:	2100      	movs	r1, #0
    2016:	1e7a      	subs	r2, r7, #1
    2018:	4197      	sbcs	r7, r2
    201a:	4457      	add	r7, sl
    201c:	4557      	cmp	r7, sl
    201e:	4180      	sbcs	r0, r0
    2020:	1909      	adds	r1, r1, r4
    2022:	4244      	negs	r4, r0
    2024:	190c      	adds	r4, r1, r4
    2026:	0223      	lsls	r3, r4, #8
    2028:	d53a      	bpl.n	20a0 <STACK_SIZE+0xa0>
    202a:	4b5d      	ldr	r3, [pc, #372]	; (21a0 <STACK_SIZE+0x1a0>)
    202c:	3601      	adds	r6, #1
    202e:	429e      	cmp	r6, r3
    2030:	d100      	bne.n	2034 <STACK_SIZE+0x34>
    2032:	e14b      	b.n	22cc <STACK_SIZE+0x2cc>
    2034:	2201      	movs	r2, #1
    2036:	4b5b      	ldr	r3, [pc, #364]	; (21a4 <STACK_SIZE+0x1a4>)
    2038:	401c      	ands	r4, r3
    203a:	087b      	lsrs	r3, r7, #1
    203c:	4017      	ands	r7, r2
    203e:	431f      	orrs	r7, r3
    2040:	07e2      	lsls	r2, r4, #31
    2042:	4317      	orrs	r7, r2
    2044:	0864      	lsrs	r4, r4, #1
    2046:	e78f      	b.n	1f68 <__aeabi_dsub+0x10c>
    2048:	0008      	movs	r0, r1
    204a:	4310      	orrs	r0, r2
    204c:	d000      	beq.n	2050 <STACK_SIZE+0x50>
    204e:	e724      	b.n	1e9a <__aeabi_dsub+0x3e>
    2050:	e721      	b.n	1e96 <__aeabi_dsub+0x3a>
    2052:	0023      	movs	r3, r4
    2054:	433b      	orrs	r3, r7
    2056:	d100      	bne.n	205a <STACK_SIZE+0x5a>
    2058:	e1b9      	b.n	23ce <STACK_SIZE+0x3ce>
    205a:	2280      	movs	r2, #128	; 0x80
    205c:	0312      	lsls	r2, r2, #12
    205e:	4314      	orrs	r4, r2
    2060:	0324      	lsls	r4, r4, #12
    2062:	0b24      	lsrs	r4, r4, #12
    2064:	e79f      	b.n	1fa6 <__aeabi_dsub+0x14a>
    2066:	002e      	movs	r6, r5
    2068:	e77e      	b.n	1f68 <__aeabi_dsub+0x10c>
    206a:	0008      	movs	r0, r1
    206c:	4310      	orrs	r0, r2
    206e:	d100      	bne.n	2072 <STACK_SIZE+0x72>
    2070:	e0ca      	b.n	2208 <STACK_SIZE+0x208>
    2072:	1e58      	subs	r0, r3, #1
    2074:	4684      	mov	ip, r0
    2076:	2800      	cmp	r0, #0
    2078:	d000      	beq.n	207c <STACK_SIZE+0x7c>
    207a:	e0e7      	b.n	224c <STACK_SIZE+0x24c>
    207c:	4452      	add	r2, sl
    207e:	4552      	cmp	r2, sl
    2080:	4180      	sbcs	r0, r0
    2082:	1864      	adds	r4, r4, r1
    2084:	4240      	negs	r0, r0
    2086:	1824      	adds	r4, r4, r0
    2088:	0017      	movs	r7, r2
    208a:	2601      	movs	r6, #1
    208c:	0223      	lsls	r3, r4, #8
    208e:	d507      	bpl.n	20a0 <STACK_SIZE+0xa0>
    2090:	2602      	movs	r6, #2
    2092:	e7cf      	b.n	2034 <STACK_SIZE+0x34>
    2094:	4664      	mov	r4, ip
    2096:	432c      	orrs	r4, r5
    2098:	d100      	bne.n	209c <STACK_SIZE+0x9c>
    209a:	e1b3      	b.n	2404 <STACK_SIZE+0x404>
    209c:	002c      	movs	r4, r5
    209e:	4667      	mov	r7, ip
    20a0:	077b      	lsls	r3, r7, #29
    20a2:	d000      	beq.n	20a6 <STACK_SIZE+0xa6>
    20a4:	e762      	b.n	1f6c <__aeabi_dsub+0x110>
    20a6:	0763      	lsls	r3, r4, #29
    20a8:	08ff      	lsrs	r7, r7, #3
    20aa:	431f      	orrs	r7, r3
    20ac:	2501      	movs	r5, #1
    20ae:	4643      	mov	r3, r8
    20b0:	08e4      	lsrs	r4, r4, #3
    20b2:	401d      	ands	r5, r3
    20b4:	e793      	b.n	1fde <__aeabi_dsub+0x182>
    20b6:	2d00      	cmp	r5, #0
    20b8:	d178      	bne.n	21ac <STACK_SIZE+0x1ac>
    20ba:	1c75      	adds	r5, r6, #1
    20bc:	056d      	lsls	r5, r5, #21
    20be:	0d6d      	lsrs	r5, r5, #21
    20c0:	2d01      	cmp	r5, #1
    20c2:	dc00      	bgt.n	20c6 <STACK_SIZE+0xc6>
    20c4:	e0f2      	b.n	22ac <STACK_SIZE+0x2ac>
    20c6:	4650      	mov	r0, sl
    20c8:	1a80      	subs	r0, r0, r2
    20ca:	4582      	cmp	sl, r0
    20cc:	41bf      	sbcs	r7, r7
    20ce:	1a65      	subs	r5, r4, r1
    20d0:	427f      	negs	r7, r7
    20d2:	1bed      	subs	r5, r5, r7
    20d4:	4684      	mov	ip, r0
    20d6:	0228      	lsls	r0, r5, #8
    20d8:	d400      	bmi.n	20dc <STACK_SIZE+0xdc>
    20da:	e08c      	b.n	21f6 <STACK_SIZE+0x1f6>
    20dc:	4650      	mov	r0, sl
    20de:	1a17      	subs	r7, r2, r0
    20e0:	42ba      	cmp	r2, r7
    20e2:	4192      	sbcs	r2, r2
    20e4:	1b0c      	subs	r4, r1, r4
    20e6:	4255      	negs	r5, r2
    20e8:	1b65      	subs	r5, r4, r5
    20ea:	4698      	mov	r8, r3
    20ec:	e714      	b.n	1f18 <__aeabi_dsub+0xbc>
    20ee:	2501      	movs	r5, #1
    20f0:	4643      	mov	r3, r8
    20f2:	2400      	movs	r4, #0
    20f4:	401d      	ands	r5, r3
    20f6:	2700      	movs	r7, #0
    20f8:	e755      	b.n	1fa6 <__aeabi_dsub+0x14a>
    20fa:	4c2a      	ldr	r4, [pc, #168]	; (21a4 <STACK_SIZE+0x1a4>)
    20fc:	1af6      	subs	r6, r6, r3
    20fe:	402c      	ands	r4, r5
    2100:	e732      	b.n	1f68 <__aeabi_dsub+0x10c>
    2102:	003d      	movs	r5, r7
    2104:	3828      	subs	r0, #40	; 0x28
    2106:	4085      	lsls	r5, r0
    2108:	2700      	movs	r7, #0
    210a:	e717      	b.n	1f3c <__aeabi_dsub+0xe0>
    210c:	0038      	movs	r0, r7
    210e:	f000 fa65 	bl	25dc <__clzsi2>
    2112:	3020      	adds	r0, #32
    2114:	e706      	b.n	1f24 <__aeabi_dsub+0xc8>
    2116:	430a      	orrs	r2, r1
    2118:	0017      	movs	r7, r2
    211a:	2100      	movs	r1, #0
    211c:	1e7a      	subs	r2, r7, #1
    211e:	4197      	sbcs	r7, r2
    2120:	e6ee      	b.n	1f00 <__aeabi_dsub+0xa4>
    2122:	2b00      	cmp	r3, #0
    2124:	d000      	beq.n	2128 <STACK_SIZE+0x128>
    2126:	e0e5      	b.n	22f4 <STACK_SIZE+0x2f4>
    2128:	1c73      	adds	r3, r6, #1
    212a:	469c      	mov	ip, r3
    212c:	055b      	lsls	r3, r3, #21
    212e:	0d5b      	lsrs	r3, r3, #21
    2130:	2b01      	cmp	r3, #1
    2132:	dc00      	bgt.n	2136 <STACK_SIZE+0x136>
    2134:	e09f      	b.n	2276 <STACK_SIZE+0x276>
    2136:	4b1a      	ldr	r3, [pc, #104]	; (21a0 <STACK_SIZE+0x1a0>)
    2138:	459c      	cmp	ip, r3
    213a:	d100      	bne.n	213e <STACK_SIZE+0x13e>
    213c:	e0c5      	b.n	22ca <STACK_SIZE+0x2ca>
    213e:	4452      	add	r2, sl
    2140:	4552      	cmp	r2, sl
    2142:	4180      	sbcs	r0, r0
    2144:	1864      	adds	r4, r4, r1
    2146:	4240      	negs	r0, r0
    2148:	1824      	adds	r4, r4, r0
    214a:	07e7      	lsls	r7, r4, #31
    214c:	0852      	lsrs	r2, r2, #1
    214e:	4317      	orrs	r7, r2
    2150:	0864      	lsrs	r4, r4, #1
    2152:	4666      	mov	r6, ip
    2154:	e708      	b.n	1f68 <__aeabi_dsub+0x10c>
    2156:	4812      	ldr	r0, [pc, #72]	; (21a0 <STACK_SIZE+0x1a0>)
    2158:	4285      	cmp	r5, r0
    215a:	d100      	bne.n	215e <STACK_SIZE+0x15e>
    215c:	e085      	b.n	226a <STACK_SIZE+0x26a>
    215e:	001d      	movs	r5, r3
    2160:	e6bc      	b.n	1edc <__aeabi_dsub+0x80>
    2162:	0029      	movs	r1, r5
    2164:	3e1f      	subs	r6, #31
    2166:	40f1      	lsrs	r1, r6
    2168:	2b20      	cmp	r3, #32
    216a:	d100      	bne.n	216e <STACK_SIZE+0x16e>
    216c:	e07f      	b.n	226e <STACK_SIZE+0x26e>
    216e:	2240      	movs	r2, #64	; 0x40
    2170:	1ad3      	subs	r3, r2, r3
    2172:	409d      	lsls	r5, r3
    2174:	432f      	orrs	r7, r5
    2176:	1e7d      	subs	r5, r7, #1
    2178:	41af      	sbcs	r7, r5
    217a:	2400      	movs	r4, #0
    217c:	430f      	orrs	r7, r1
    217e:	2600      	movs	r6, #0
    2180:	e78e      	b.n	20a0 <STACK_SIZE+0xa0>
    2182:	002b      	movs	r3, r5
    2184:	000f      	movs	r7, r1
    2186:	3b20      	subs	r3, #32
    2188:	40df      	lsrs	r7, r3
    218a:	2d20      	cmp	r5, #32
    218c:	d071      	beq.n	2272 <STACK_SIZE+0x272>
    218e:	2340      	movs	r3, #64	; 0x40
    2190:	1b5d      	subs	r5, r3, r5
    2192:	40a9      	lsls	r1, r5
    2194:	430a      	orrs	r2, r1
    2196:	1e51      	subs	r1, r2, #1
    2198:	418a      	sbcs	r2, r1
    219a:	2100      	movs	r1, #0
    219c:	4317      	orrs	r7, r2
    219e:	e6af      	b.n	1f00 <__aeabi_dsub+0xa4>
    21a0:	000007ff 	.word	0x000007ff
    21a4:	ff7fffff 	.word	0xff7fffff
    21a8:	800fffff 	.word	0x800fffff
    21ac:	2e00      	cmp	r6, #0
    21ae:	d03e      	beq.n	222e <STACK_SIZE+0x22e>
    21b0:	4eb3      	ldr	r6, [pc, #716]	; (2480 <STACK_SIZE+0x480>)
    21b2:	45b4      	cmp	ip, r6
    21b4:	d045      	beq.n	2242 <STACK_SIZE+0x242>
    21b6:	2680      	movs	r6, #128	; 0x80
    21b8:	0436      	lsls	r6, r6, #16
    21ba:	426d      	negs	r5, r5
    21bc:	4334      	orrs	r4, r6
    21be:	2d38      	cmp	r5, #56	; 0x38
    21c0:	dd00      	ble.n	21c4 <STACK_SIZE+0x1c4>
    21c2:	e0a8      	b.n	2316 <STACK_SIZE+0x316>
    21c4:	2d1f      	cmp	r5, #31
    21c6:	dd00      	ble.n	21ca <STACK_SIZE+0x1ca>
    21c8:	e11f      	b.n	240a <STACK_SIZE+0x40a>
    21ca:	2620      	movs	r6, #32
    21cc:	0027      	movs	r7, r4
    21ce:	4650      	mov	r0, sl
    21d0:	1b76      	subs	r6, r6, r5
    21d2:	40b7      	lsls	r7, r6
    21d4:	40e8      	lsrs	r0, r5
    21d6:	4307      	orrs	r7, r0
    21d8:	4650      	mov	r0, sl
    21da:	40b0      	lsls	r0, r6
    21dc:	1e46      	subs	r6, r0, #1
    21de:	41b0      	sbcs	r0, r6
    21e0:	40ec      	lsrs	r4, r5
    21e2:	4338      	orrs	r0, r7
    21e4:	1a17      	subs	r7, r2, r0
    21e6:	42ba      	cmp	r2, r7
    21e8:	4192      	sbcs	r2, r2
    21ea:	1b0c      	subs	r4, r1, r4
    21ec:	4252      	negs	r2, r2
    21ee:	1aa4      	subs	r4, r4, r2
    21f0:	4666      	mov	r6, ip
    21f2:	4698      	mov	r8, r3
    21f4:	e68b      	b.n	1f0e <__aeabi_dsub+0xb2>
    21f6:	4664      	mov	r4, ip
    21f8:	4667      	mov	r7, ip
    21fa:	432c      	orrs	r4, r5
    21fc:	d000      	beq.n	2200 <STACK_SIZE+0x200>
    21fe:	e68b      	b.n	1f18 <__aeabi_dsub+0xbc>
    2200:	2500      	movs	r5, #0
    2202:	2600      	movs	r6, #0
    2204:	2700      	movs	r7, #0
    2206:	e6ea      	b.n	1fde <__aeabi_dsub+0x182>
    2208:	001e      	movs	r6, r3
    220a:	e6ad      	b.n	1f68 <__aeabi_dsub+0x10c>
    220c:	2b1f      	cmp	r3, #31
    220e:	dc60      	bgt.n	22d2 <STACK_SIZE+0x2d2>
    2210:	2720      	movs	r7, #32
    2212:	1af8      	subs	r0, r7, r3
    2214:	000f      	movs	r7, r1
    2216:	4684      	mov	ip, r0
    2218:	4087      	lsls	r7, r0
    221a:	0010      	movs	r0, r2
    221c:	40d8      	lsrs	r0, r3
    221e:	4307      	orrs	r7, r0
    2220:	4660      	mov	r0, ip
    2222:	4082      	lsls	r2, r0
    2224:	1e50      	subs	r0, r2, #1
    2226:	4182      	sbcs	r2, r0
    2228:	40d9      	lsrs	r1, r3
    222a:	4317      	orrs	r7, r2
    222c:	e6f5      	b.n	201a <STACK_SIZE+0x1a>
    222e:	0026      	movs	r6, r4
    2230:	4650      	mov	r0, sl
    2232:	4306      	orrs	r6, r0
    2234:	d005      	beq.n	2242 <STACK_SIZE+0x242>
    2236:	43ed      	mvns	r5, r5
    2238:	2d00      	cmp	r5, #0
    223a:	d0d3      	beq.n	21e4 <STACK_SIZE+0x1e4>
    223c:	4e90      	ldr	r6, [pc, #576]	; (2480 <STACK_SIZE+0x480>)
    223e:	45b4      	cmp	ip, r6
    2240:	d1bd      	bne.n	21be <STACK_SIZE+0x1be>
    2242:	000c      	movs	r4, r1
    2244:	0017      	movs	r7, r2
    2246:	4666      	mov	r6, ip
    2248:	4698      	mov	r8, r3
    224a:	e68d      	b.n	1f68 <__aeabi_dsub+0x10c>
    224c:	488c      	ldr	r0, [pc, #560]	; (2480 <STACK_SIZE+0x480>)
    224e:	4283      	cmp	r3, r0
    2250:	d00b      	beq.n	226a <STACK_SIZE+0x26a>
    2252:	4663      	mov	r3, ip
    2254:	e6d9      	b.n	200a <STACK_SIZE+0xa>
    2256:	2d00      	cmp	r5, #0
    2258:	d000      	beq.n	225c <STACK_SIZE+0x25c>
    225a:	e096      	b.n	238a <STACK_SIZE+0x38a>
    225c:	0008      	movs	r0, r1
    225e:	4310      	orrs	r0, r2
    2260:	d100      	bne.n	2264 <STACK_SIZE+0x264>
    2262:	e0e2      	b.n	242a <STACK_SIZE+0x42a>
    2264:	000c      	movs	r4, r1
    2266:	0017      	movs	r7, r2
    2268:	4698      	mov	r8, r3
    226a:	4e85      	ldr	r6, [pc, #532]	; (2480 <STACK_SIZE+0x480>)
    226c:	e67c      	b.n	1f68 <__aeabi_dsub+0x10c>
    226e:	2500      	movs	r5, #0
    2270:	e780      	b.n	2174 <STACK_SIZE+0x174>
    2272:	2100      	movs	r1, #0
    2274:	e78e      	b.n	2194 <STACK_SIZE+0x194>
    2276:	0023      	movs	r3, r4
    2278:	4650      	mov	r0, sl
    227a:	4303      	orrs	r3, r0
    227c:	2e00      	cmp	r6, #0
    227e:	d000      	beq.n	2282 <STACK_SIZE+0x282>
    2280:	e0a8      	b.n	23d4 <STACK_SIZE+0x3d4>
    2282:	2b00      	cmp	r3, #0
    2284:	d100      	bne.n	2288 <STACK_SIZE+0x288>
    2286:	e0de      	b.n	2446 <STACK_SIZE+0x446>
    2288:	000b      	movs	r3, r1
    228a:	4313      	orrs	r3, r2
    228c:	d100      	bne.n	2290 <STACK_SIZE+0x290>
    228e:	e66b      	b.n	1f68 <__aeabi_dsub+0x10c>
    2290:	4452      	add	r2, sl
    2292:	4552      	cmp	r2, sl
    2294:	4180      	sbcs	r0, r0
    2296:	1864      	adds	r4, r4, r1
    2298:	4240      	negs	r0, r0
    229a:	1824      	adds	r4, r4, r0
    229c:	0017      	movs	r7, r2
    229e:	0223      	lsls	r3, r4, #8
    22a0:	d400      	bmi.n	22a4 <STACK_SIZE+0x2a4>
    22a2:	e6fd      	b.n	20a0 <STACK_SIZE+0xa0>
    22a4:	4b77      	ldr	r3, [pc, #476]	; (2484 <STACK_SIZE+0x484>)
    22a6:	4666      	mov	r6, ip
    22a8:	401c      	ands	r4, r3
    22aa:	e65d      	b.n	1f68 <__aeabi_dsub+0x10c>
    22ac:	0025      	movs	r5, r4
    22ae:	4650      	mov	r0, sl
    22b0:	4305      	orrs	r5, r0
    22b2:	2e00      	cmp	r6, #0
    22b4:	d1cf      	bne.n	2256 <STACK_SIZE+0x256>
    22b6:	2d00      	cmp	r5, #0
    22b8:	d14f      	bne.n	235a <STACK_SIZE+0x35a>
    22ba:	000c      	movs	r4, r1
    22bc:	4314      	orrs	r4, r2
    22be:	d100      	bne.n	22c2 <STACK_SIZE+0x2c2>
    22c0:	e0a0      	b.n	2404 <STACK_SIZE+0x404>
    22c2:	000c      	movs	r4, r1
    22c4:	0017      	movs	r7, r2
    22c6:	4698      	mov	r8, r3
    22c8:	e64e      	b.n	1f68 <__aeabi_dsub+0x10c>
    22ca:	4666      	mov	r6, ip
    22cc:	2400      	movs	r4, #0
    22ce:	2700      	movs	r7, #0
    22d0:	e685      	b.n	1fde <__aeabi_dsub+0x182>
    22d2:	001f      	movs	r7, r3
    22d4:	0008      	movs	r0, r1
    22d6:	3f20      	subs	r7, #32
    22d8:	40f8      	lsrs	r0, r7
    22da:	0007      	movs	r7, r0
    22dc:	2b20      	cmp	r3, #32
    22de:	d100      	bne.n	22e2 <STACK_SIZE+0x2e2>
    22e0:	e08e      	b.n	2400 <STACK_SIZE+0x400>
    22e2:	2040      	movs	r0, #64	; 0x40
    22e4:	1ac3      	subs	r3, r0, r3
    22e6:	4099      	lsls	r1, r3
    22e8:	430a      	orrs	r2, r1
    22ea:	1e51      	subs	r1, r2, #1
    22ec:	418a      	sbcs	r2, r1
    22ee:	2100      	movs	r1, #0
    22f0:	4317      	orrs	r7, r2
    22f2:	e692      	b.n	201a <STACK_SIZE+0x1a>
    22f4:	2e00      	cmp	r6, #0
    22f6:	d114      	bne.n	2322 <STACK_SIZE+0x322>
    22f8:	0026      	movs	r6, r4
    22fa:	4650      	mov	r0, sl
    22fc:	4306      	orrs	r6, r0
    22fe:	d062      	beq.n	23c6 <STACK_SIZE+0x3c6>
    2300:	43db      	mvns	r3, r3
    2302:	2b00      	cmp	r3, #0
    2304:	d15c      	bne.n	23c0 <STACK_SIZE+0x3c0>
    2306:	1887      	adds	r7, r0, r2
    2308:	4297      	cmp	r7, r2
    230a:	4192      	sbcs	r2, r2
    230c:	1864      	adds	r4, r4, r1
    230e:	4252      	negs	r2, r2
    2310:	18a4      	adds	r4, r4, r2
    2312:	4666      	mov	r6, ip
    2314:	e687      	b.n	2026 <STACK_SIZE+0x26>
    2316:	4650      	mov	r0, sl
    2318:	4320      	orrs	r0, r4
    231a:	1e44      	subs	r4, r0, #1
    231c:	41a0      	sbcs	r0, r4
    231e:	2400      	movs	r4, #0
    2320:	e760      	b.n	21e4 <STACK_SIZE+0x1e4>
    2322:	4e57      	ldr	r6, [pc, #348]	; (2480 <STACK_SIZE+0x480>)
    2324:	45b4      	cmp	ip, r6
    2326:	d04e      	beq.n	23c6 <STACK_SIZE+0x3c6>
    2328:	2680      	movs	r6, #128	; 0x80
    232a:	0436      	lsls	r6, r6, #16
    232c:	425b      	negs	r3, r3
    232e:	4334      	orrs	r4, r6
    2330:	2b38      	cmp	r3, #56	; 0x38
    2332:	dd00      	ble.n	2336 <STACK_SIZE+0x336>
    2334:	e07f      	b.n	2436 <STACK_SIZE+0x436>
    2336:	2b1f      	cmp	r3, #31
    2338:	dd00      	ble.n	233c <STACK_SIZE+0x33c>
    233a:	e08b      	b.n	2454 <STACK_SIZE+0x454>
    233c:	2620      	movs	r6, #32
    233e:	0027      	movs	r7, r4
    2340:	4650      	mov	r0, sl
    2342:	1af6      	subs	r6, r6, r3
    2344:	40b7      	lsls	r7, r6
    2346:	40d8      	lsrs	r0, r3
    2348:	4307      	orrs	r7, r0
    234a:	4650      	mov	r0, sl
    234c:	40b0      	lsls	r0, r6
    234e:	1e46      	subs	r6, r0, #1
    2350:	41b0      	sbcs	r0, r6
    2352:	4307      	orrs	r7, r0
    2354:	40dc      	lsrs	r4, r3
    2356:	18bf      	adds	r7, r7, r2
    2358:	e7d6      	b.n	2308 <STACK_SIZE+0x308>
    235a:	000d      	movs	r5, r1
    235c:	4315      	orrs	r5, r2
    235e:	d100      	bne.n	2362 <STACK_SIZE+0x362>
    2360:	e602      	b.n	1f68 <__aeabi_dsub+0x10c>
    2362:	4650      	mov	r0, sl
    2364:	1a80      	subs	r0, r0, r2
    2366:	4582      	cmp	sl, r0
    2368:	41bf      	sbcs	r7, r7
    236a:	1a65      	subs	r5, r4, r1
    236c:	427f      	negs	r7, r7
    236e:	1bed      	subs	r5, r5, r7
    2370:	4684      	mov	ip, r0
    2372:	0228      	lsls	r0, r5, #8
    2374:	d400      	bmi.n	2378 <STACK_SIZE+0x378>
    2376:	e68d      	b.n	2094 <STACK_SIZE+0x94>
    2378:	4650      	mov	r0, sl
    237a:	1a17      	subs	r7, r2, r0
    237c:	42ba      	cmp	r2, r7
    237e:	4192      	sbcs	r2, r2
    2380:	1b0c      	subs	r4, r1, r4
    2382:	4252      	negs	r2, r2
    2384:	1aa4      	subs	r4, r4, r2
    2386:	4698      	mov	r8, r3
    2388:	e5ee      	b.n	1f68 <__aeabi_dsub+0x10c>
    238a:	000d      	movs	r5, r1
    238c:	4315      	orrs	r5, r2
    238e:	d100      	bne.n	2392 <STACK_SIZE+0x392>
    2390:	e76b      	b.n	226a <STACK_SIZE+0x26a>
    2392:	4650      	mov	r0, sl
    2394:	0767      	lsls	r7, r4, #29
    2396:	08c0      	lsrs	r0, r0, #3
    2398:	4307      	orrs	r7, r0
    239a:	2080      	movs	r0, #128	; 0x80
    239c:	08e4      	lsrs	r4, r4, #3
    239e:	0300      	lsls	r0, r0, #12
    23a0:	4204      	tst	r4, r0
    23a2:	d007      	beq.n	23b4 <STACK_SIZE+0x3b4>
    23a4:	08cd      	lsrs	r5, r1, #3
    23a6:	4205      	tst	r5, r0
    23a8:	d104      	bne.n	23b4 <STACK_SIZE+0x3b4>
    23aa:	002c      	movs	r4, r5
    23ac:	4698      	mov	r8, r3
    23ae:	08d7      	lsrs	r7, r2, #3
    23b0:	0749      	lsls	r1, r1, #29
    23b2:	430f      	orrs	r7, r1
    23b4:	0f7b      	lsrs	r3, r7, #29
    23b6:	00e4      	lsls	r4, r4, #3
    23b8:	431c      	orrs	r4, r3
    23ba:	00ff      	lsls	r7, r7, #3
    23bc:	4e30      	ldr	r6, [pc, #192]	; (2480 <STACK_SIZE+0x480>)
    23be:	e5d3      	b.n	1f68 <__aeabi_dsub+0x10c>
    23c0:	4e2f      	ldr	r6, [pc, #188]	; (2480 <STACK_SIZE+0x480>)
    23c2:	45b4      	cmp	ip, r6
    23c4:	d1b4      	bne.n	2330 <STACK_SIZE+0x330>
    23c6:	000c      	movs	r4, r1
    23c8:	0017      	movs	r7, r2
    23ca:	4666      	mov	r6, ip
    23cc:	e5cc      	b.n	1f68 <__aeabi_dsub+0x10c>
    23ce:	2700      	movs	r7, #0
    23d0:	2400      	movs	r4, #0
    23d2:	e5e8      	b.n	1fa6 <__aeabi_dsub+0x14a>
    23d4:	2b00      	cmp	r3, #0
    23d6:	d039      	beq.n	244c <STACK_SIZE+0x44c>
    23d8:	000b      	movs	r3, r1
    23da:	4313      	orrs	r3, r2
    23dc:	d100      	bne.n	23e0 <STACK_SIZE+0x3e0>
    23de:	e744      	b.n	226a <STACK_SIZE+0x26a>
    23e0:	08c0      	lsrs	r0, r0, #3
    23e2:	0767      	lsls	r7, r4, #29
    23e4:	4307      	orrs	r7, r0
    23e6:	2080      	movs	r0, #128	; 0x80
    23e8:	08e4      	lsrs	r4, r4, #3
    23ea:	0300      	lsls	r0, r0, #12
    23ec:	4204      	tst	r4, r0
    23ee:	d0e1      	beq.n	23b4 <STACK_SIZE+0x3b4>
    23f0:	08cb      	lsrs	r3, r1, #3
    23f2:	4203      	tst	r3, r0
    23f4:	d1de      	bne.n	23b4 <STACK_SIZE+0x3b4>
    23f6:	08d7      	lsrs	r7, r2, #3
    23f8:	0749      	lsls	r1, r1, #29
    23fa:	430f      	orrs	r7, r1
    23fc:	001c      	movs	r4, r3
    23fe:	e7d9      	b.n	23b4 <STACK_SIZE+0x3b4>
    2400:	2100      	movs	r1, #0
    2402:	e771      	b.n	22e8 <STACK_SIZE+0x2e8>
    2404:	2500      	movs	r5, #0
    2406:	2700      	movs	r7, #0
    2408:	e5e9      	b.n	1fde <__aeabi_dsub+0x182>
    240a:	002e      	movs	r6, r5
    240c:	0027      	movs	r7, r4
    240e:	3e20      	subs	r6, #32
    2410:	40f7      	lsrs	r7, r6
    2412:	2d20      	cmp	r5, #32
    2414:	d02f      	beq.n	2476 <STACK_SIZE+0x476>
    2416:	2640      	movs	r6, #64	; 0x40
    2418:	1b75      	subs	r5, r6, r5
    241a:	40ac      	lsls	r4, r5
    241c:	4650      	mov	r0, sl
    241e:	4320      	orrs	r0, r4
    2420:	1e44      	subs	r4, r0, #1
    2422:	41a0      	sbcs	r0, r4
    2424:	2400      	movs	r4, #0
    2426:	4338      	orrs	r0, r7
    2428:	e6dc      	b.n	21e4 <STACK_SIZE+0x1e4>
    242a:	2480      	movs	r4, #128	; 0x80
    242c:	2500      	movs	r5, #0
    242e:	0324      	lsls	r4, r4, #12
    2430:	4e13      	ldr	r6, [pc, #76]	; (2480 <STACK_SIZE+0x480>)
    2432:	2700      	movs	r7, #0
    2434:	e5d3      	b.n	1fde <__aeabi_dsub+0x182>
    2436:	4650      	mov	r0, sl
    2438:	4320      	orrs	r0, r4
    243a:	0007      	movs	r7, r0
    243c:	1e78      	subs	r0, r7, #1
    243e:	4187      	sbcs	r7, r0
    2440:	2400      	movs	r4, #0
    2442:	18bf      	adds	r7, r7, r2
    2444:	e760      	b.n	2308 <STACK_SIZE+0x308>
    2446:	000c      	movs	r4, r1
    2448:	0017      	movs	r7, r2
    244a:	e58d      	b.n	1f68 <__aeabi_dsub+0x10c>
    244c:	000c      	movs	r4, r1
    244e:	0017      	movs	r7, r2
    2450:	4e0b      	ldr	r6, [pc, #44]	; (2480 <STACK_SIZE+0x480>)
    2452:	e589      	b.n	1f68 <__aeabi_dsub+0x10c>
    2454:	001e      	movs	r6, r3
    2456:	0027      	movs	r7, r4
    2458:	3e20      	subs	r6, #32
    245a:	40f7      	lsrs	r7, r6
    245c:	2b20      	cmp	r3, #32
    245e:	d00c      	beq.n	247a <STACK_SIZE+0x47a>
    2460:	2640      	movs	r6, #64	; 0x40
    2462:	1af3      	subs	r3, r6, r3
    2464:	409c      	lsls	r4, r3
    2466:	4650      	mov	r0, sl
    2468:	4320      	orrs	r0, r4
    246a:	1e44      	subs	r4, r0, #1
    246c:	41a0      	sbcs	r0, r4
    246e:	4307      	orrs	r7, r0
    2470:	2400      	movs	r4, #0
    2472:	18bf      	adds	r7, r7, r2
    2474:	e748      	b.n	2308 <STACK_SIZE+0x308>
    2476:	2400      	movs	r4, #0
    2478:	e7d0      	b.n	241c <STACK_SIZE+0x41c>
    247a:	2400      	movs	r4, #0
    247c:	e7f3      	b.n	2466 <STACK_SIZE+0x466>
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	000007ff 	.word	0x000007ff
    2484:	ff7fffff 	.word	0xff7fffff

00002488 <__aeabi_d2iz>:
    2488:	b530      	push	{r4, r5, lr}
    248a:	4d13      	ldr	r5, [pc, #76]	; (24d8 <__aeabi_d2iz+0x50>)
    248c:	030a      	lsls	r2, r1, #12
    248e:	004b      	lsls	r3, r1, #1
    2490:	0b12      	lsrs	r2, r2, #12
    2492:	0d5b      	lsrs	r3, r3, #21
    2494:	0fc9      	lsrs	r1, r1, #31
    2496:	2400      	movs	r4, #0
    2498:	42ab      	cmp	r3, r5
    249a:	dd10      	ble.n	24be <__aeabi_d2iz+0x36>
    249c:	4c0f      	ldr	r4, [pc, #60]	; (24dc <__aeabi_d2iz+0x54>)
    249e:	42a3      	cmp	r3, r4
    24a0:	dc0f      	bgt.n	24c2 <__aeabi_d2iz+0x3a>
    24a2:	2480      	movs	r4, #128	; 0x80
    24a4:	4d0e      	ldr	r5, [pc, #56]	; (24e0 <__aeabi_d2iz+0x58>)
    24a6:	0364      	lsls	r4, r4, #13
    24a8:	4322      	orrs	r2, r4
    24aa:	1aed      	subs	r5, r5, r3
    24ac:	2d1f      	cmp	r5, #31
    24ae:	dd0b      	ble.n	24c8 <__aeabi_d2iz+0x40>
    24b0:	480c      	ldr	r0, [pc, #48]	; (24e4 <__aeabi_d2iz+0x5c>)
    24b2:	1ac3      	subs	r3, r0, r3
    24b4:	40da      	lsrs	r2, r3
    24b6:	4254      	negs	r4, r2
    24b8:	2900      	cmp	r1, #0
    24ba:	d100      	bne.n	24be <__aeabi_d2iz+0x36>
    24bc:	0014      	movs	r4, r2
    24be:	0020      	movs	r0, r4
    24c0:	bd30      	pop	{r4, r5, pc}
    24c2:	4b09      	ldr	r3, [pc, #36]	; (24e8 <__aeabi_d2iz+0x60>)
    24c4:	18cc      	adds	r4, r1, r3
    24c6:	e7fa      	b.n	24be <__aeabi_d2iz+0x36>
    24c8:	4c08      	ldr	r4, [pc, #32]	; (24ec <__aeabi_d2iz+0x64>)
    24ca:	40e8      	lsrs	r0, r5
    24cc:	46a4      	mov	ip, r4
    24ce:	4463      	add	r3, ip
    24d0:	409a      	lsls	r2, r3
    24d2:	4302      	orrs	r2, r0
    24d4:	e7ef      	b.n	24b6 <__aeabi_d2iz+0x2e>
    24d6:	46c0      	nop			; (mov r8, r8)
    24d8:	000003fe 	.word	0x000003fe
    24dc:	0000041d 	.word	0x0000041d
    24e0:	00000433 	.word	0x00000433
    24e4:	00000413 	.word	0x00000413
    24e8:	7fffffff 	.word	0x7fffffff
    24ec:	fffffbed 	.word	0xfffffbed

000024f0 <__aeabi_ui2d>:
    24f0:	b510      	push	{r4, lr}
    24f2:	1e04      	subs	r4, r0, #0
    24f4:	d028      	beq.n	2548 <__aeabi_ui2d+0x58>
    24f6:	f000 f871 	bl	25dc <__clzsi2>
    24fa:	4b15      	ldr	r3, [pc, #84]	; (2550 <__aeabi_ui2d+0x60>)
    24fc:	4a15      	ldr	r2, [pc, #84]	; (2554 <__aeabi_ui2d+0x64>)
    24fe:	1a1b      	subs	r3, r3, r0
    2500:	1ad2      	subs	r2, r2, r3
    2502:	2a1f      	cmp	r2, #31
    2504:	dd15      	ble.n	2532 <__aeabi_ui2d+0x42>
    2506:	4a14      	ldr	r2, [pc, #80]	; (2558 <__aeabi_ui2d+0x68>)
    2508:	1ad2      	subs	r2, r2, r3
    250a:	4094      	lsls	r4, r2
    250c:	2200      	movs	r2, #0
    250e:	0324      	lsls	r4, r4, #12
    2510:	055b      	lsls	r3, r3, #21
    2512:	0b24      	lsrs	r4, r4, #12
    2514:	0d5b      	lsrs	r3, r3, #21
    2516:	2100      	movs	r1, #0
    2518:	0010      	movs	r0, r2
    251a:	0324      	lsls	r4, r4, #12
    251c:	0d0a      	lsrs	r2, r1, #20
    251e:	0b24      	lsrs	r4, r4, #12
    2520:	0512      	lsls	r2, r2, #20
    2522:	4322      	orrs	r2, r4
    2524:	4c0d      	ldr	r4, [pc, #52]	; (255c <__aeabi_ui2d+0x6c>)
    2526:	051b      	lsls	r3, r3, #20
    2528:	4022      	ands	r2, r4
    252a:	4313      	orrs	r3, r2
    252c:	005b      	lsls	r3, r3, #1
    252e:	0859      	lsrs	r1, r3, #1
    2530:	bd10      	pop	{r4, pc}
    2532:	0021      	movs	r1, r4
    2534:	4091      	lsls	r1, r2
    2536:	000a      	movs	r2, r1
    2538:	210b      	movs	r1, #11
    253a:	1a08      	subs	r0, r1, r0
    253c:	40c4      	lsrs	r4, r0
    253e:	055b      	lsls	r3, r3, #21
    2540:	0324      	lsls	r4, r4, #12
    2542:	0b24      	lsrs	r4, r4, #12
    2544:	0d5b      	lsrs	r3, r3, #21
    2546:	e7e6      	b.n	2516 <__aeabi_ui2d+0x26>
    2548:	2300      	movs	r3, #0
    254a:	2400      	movs	r4, #0
    254c:	2200      	movs	r2, #0
    254e:	e7e2      	b.n	2516 <__aeabi_ui2d+0x26>
    2550:	0000041e 	.word	0x0000041e
    2554:	00000433 	.word	0x00000433
    2558:	00000413 	.word	0x00000413
    255c:	800fffff 	.word	0x800fffff

00002560 <__aeabi_cdrcmple>:
    2560:	4684      	mov	ip, r0
    2562:	1c10      	adds	r0, r2, #0
    2564:	4662      	mov	r2, ip
    2566:	468c      	mov	ip, r1
    2568:	1c19      	adds	r1, r3, #0
    256a:	4663      	mov	r3, ip
    256c:	e000      	b.n	2570 <__aeabi_cdcmpeq>
    256e:	46c0      	nop			; (mov r8, r8)

00002570 <__aeabi_cdcmpeq>:
    2570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2572:	f000 f8ef 	bl	2754 <__ledf2>
    2576:	2800      	cmp	r0, #0
    2578:	d401      	bmi.n	257e <__aeabi_cdcmpeq+0xe>
    257a:	2100      	movs	r1, #0
    257c:	42c8      	cmn	r0, r1
    257e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002580 <__aeabi_dcmpeq>:
    2580:	b510      	push	{r4, lr}
    2582:	f000 f849 	bl	2618 <__eqdf2>
    2586:	4240      	negs	r0, r0
    2588:	3001      	adds	r0, #1
    258a:	bd10      	pop	{r4, pc}

0000258c <__aeabi_dcmplt>:
    258c:	b510      	push	{r4, lr}
    258e:	f000 f8e1 	bl	2754 <__ledf2>
    2592:	2800      	cmp	r0, #0
    2594:	db01      	blt.n	259a <__aeabi_dcmplt+0xe>
    2596:	2000      	movs	r0, #0
    2598:	bd10      	pop	{r4, pc}
    259a:	2001      	movs	r0, #1
    259c:	bd10      	pop	{r4, pc}
    259e:	46c0      	nop			; (mov r8, r8)

000025a0 <__aeabi_dcmple>:
    25a0:	b510      	push	{r4, lr}
    25a2:	f000 f8d7 	bl	2754 <__ledf2>
    25a6:	2800      	cmp	r0, #0
    25a8:	dd01      	ble.n	25ae <__aeabi_dcmple+0xe>
    25aa:	2000      	movs	r0, #0
    25ac:	bd10      	pop	{r4, pc}
    25ae:	2001      	movs	r0, #1
    25b0:	bd10      	pop	{r4, pc}
    25b2:	46c0      	nop			; (mov r8, r8)

000025b4 <__aeabi_dcmpgt>:
    25b4:	b510      	push	{r4, lr}
    25b6:	f000 f869 	bl	268c <__gedf2>
    25ba:	2800      	cmp	r0, #0
    25bc:	dc01      	bgt.n	25c2 <__aeabi_dcmpgt+0xe>
    25be:	2000      	movs	r0, #0
    25c0:	bd10      	pop	{r4, pc}
    25c2:	2001      	movs	r0, #1
    25c4:	bd10      	pop	{r4, pc}
    25c6:	46c0      	nop			; (mov r8, r8)

000025c8 <__aeabi_dcmpge>:
    25c8:	b510      	push	{r4, lr}
    25ca:	f000 f85f 	bl	268c <__gedf2>
    25ce:	2800      	cmp	r0, #0
    25d0:	da01      	bge.n	25d6 <__aeabi_dcmpge+0xe>
    25d2:	2000      	movs	r0, #0
    25d4:	bd10      	pop	{r4, pc}
    25d6:	2001      	movs	r0, #1
    25d8:	bd10      	pop	{r4, pc}
    25da:	46c0      	nop			; (mov r8, r8)

000025dc <__clzsi2>:
    25dc:	211c      	movs	r1, #28
    25de:	2301      	movs	r3, #1
    25e0:	041b      	lsls	r3, r3, #16
    25e2:	4298      	cmp	r0, r3
    25e4:	d301      	bcc.n	25ea <__clzsi2+0xe>
    25e6:	0c00      	lsrs	r0, r0, #16
    25e8:	3910      	subs	r1, #16
    25ea:	0a1b      	lsrs	r3, r3, #8
    25ec:	4298      	cmp	r0, r3
    25ee:	d301      	bcc.n	25f4 <__clzsi2+0x18>
    25f0:	0a00      	lsrs	r0, r0, #8
    25f2:	3908      	subs	r1, #8
    25f4:	091b      	lsrs	r3, r3, #4
    25f6:	4298      	cmp	r0, r3
    25f8:	d301      	bcc.n	25fe <__clzsi2+0x22>
    25fa:	0900      	lsrs	r0, r0, #4
    25fc:	3904      	subs	r1, #4
    25fe:	a202      	add	r2, pc, #8	; (adr r2, 2608 <__clzsi2+0x2c>)
    2600:	5c10      	ldrb	r0, [r2, r0]
    2602:	1840      	adds	r0, r0, r1
    2604:	4770      	bx	lr
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	02020304 	.word	0x02020304
    260c:	01010101 	.word	0x01010101
	...

00002618 <__eqdf2>:
    2618:	b5f0      	push	{r4, r5, r6, r7, lr}
    261a:	464f      	mov	r7, r9
    261c:	4646      	mov	r6, r8
    261e:	46d6      	mov	lr, sl
    2620:	005c      	lsls	r4, r3, #1
    2622:	b5c0      	push	{r6, r7, lr}
    2624:	031f      	lsls	r7, r3, #12
    2626:	0fdb      	lsrs	r3, r3, #31
    2628:	469a      	mov	sl, r3
    262a:	4b17      	ldr	r3, [pc, #92]	; (2688 <__eqdf2+0x70>)
    262c:	030e      	lsls	r6, r1, #12
    262e:	004d      	lsls	r5, r1, #1
    2630:	4684      	mov	ip, r0
    2632:	4680      	mov	r8, r0
    2634:	0b36      	lsrs	r6, r6, #12
    2636:	0d6d      	lsrs	r5, r5, #21
    2638:	0fc9      	lsrs	r1, r1, #31
    263a:	4691      	mov	r9, r2
    263c:	0b3f      	lsrs	r7, r7, #12
    263e:	0d64      	lsrs	r4, r4, #21
    2640:	2001      	movs	r0, #1
    2642:	429d      	cmp	r5, r3
    2644:	d008      	beq.n	2658 <__eqdf2+0x40>
    2646:	429c      	cmp	r4, r3
    2648:	d001      	beq.n	264e <__eqdf2+0x36>
    264a:	42a5      	cmp	r5, r4
    264c:	d00b      	beq.n	2666 <__eqdf2+0x4e>
    264e:	bc1c      	pop	{r2, r3, r4}
    2650:	4690      	mov	r8, r2
    2652:	4699      	mov	r9, r3
    2654:	46a2      	mov	sl, r4
    2656:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2658:	4663      	mov	r3, ip
    265a:	4333      	orrs	r3, r6
    265c:	d1f7      	bne.n	264e <__eqdf2+0x36>
    265e:	42ac      	cmp	r4, r5
    2660:	d1f5      	bne.n	264e <__eqdf2+0x36>
    2662:	433a      	orrs	r2, r7
    2664:	d1f3      	bne.n	264e <__eqdf2+0x36>
    2666:	2001      	movs	r0, #1
    2668:	42be      	cmp	r6, r7
    266a:	d1f0      	bne.n	264e <__eqdf2+0x36>
    266c:	45c8      	cmp	r8, r9
    266e:	d1ee      	bne.n	264e <__eqdf2+0x36>
    2670:	4551      	cmp	r1, sl
    2672:	d007      	beq.n	2684 <__eqdf2+0x6c>
    2674:	2d00      	cmp	r5, #0
    2676:	d1ea      	bne.n	264e <__eqdf2+0x36>
    2678:	4663      	mov	r3, ip
    267a:	431e      	orrs	r6, r3
    267c:	0030      	movs	r0, r6
    267e:	1e46      	subs	r6, r0, #1
    2680:	41b0      	sbcs	r0, r6
    2682:	e7e4      	b.n	264e <__eqdf2+0x36>
    2684:	2000      	movs	r0, #0
    2686:	e7e2      	b.n	264e <__eqdf2+0x36>
    2688:	000007ff 	.word	0x000007ff

0000268c <__gedf2>:
    268c:	b5f0      	push	{r4, r5, r6, r7, lr}
    268e:	4645      	mov	r5, r8
    2690:	46de      	mov	lr, fp
    2692:	4657      	mov	r7, sl
    2694:	464e      	mov	r6, r9
    2696:	b5e0      	push	{r5, r6, r7, lr}
    2698:	031f      	lsls	r7, r3, #12
    269a:	0b3d      	lsrs	r5, r7, #12
    269c:	4f2c      	ldr	r7, [pc, #176]	; (2750 <__gedf2+0xc4>)
    269e:	030e      	lsls	r6, r1, #12
    26a0:	004c      	lsls	r4, r1, #1
    26a2:	46ab      	mov	fp, r5
    26a4:	005d      	lsls	r5, r3, #1
    26a6:	4684      	mov	ip, r0
    26a8:	0b36      	lsrs	r6, r6, #12
    26aa:	0d64      	lsrs	r4, r4, #21
    26ac:	0fc9      	lsrs	r1, r1, #31
    26ae:	4690      	mov	r8, r2
    26b0:	0d6d      	lsrs	r5, r5, #21
    26b2:	0fdb      	lsrs	r3, r3, #31
    26b4:	42bc      	cmp	r4, r7
    26b6:	d02a      	beq.n	270e <__gedf2+0x82>
    26b8:	4f25      	ldr	r7, [pc, #148]	; (2750 <__gedf2+0xc4>)
    26ba:	42bd      	cmp	r5, r7
    26bc:	d02d      	beq.n	271a <__gedf2+0x8e>
    26be:	2c00      	cmp	r4, #0
    26c0:	d10f      	bne.n	26e2 <__gedf2+0x56>
    26c2:	4330      	orrs	r0, r6
    26c4:	0007      	movs	r7, r0
    26c6:	4681      	mov	r9, r0
    26c8:	4278      	negs	r0, r7
    26ca:	4178      	adcs	r0, r7
    26cc:	b2c0      	uxtb	r0, r0
    26ce:	2d00      	cmp	r5, #0
    26d0:	d117      	bne.n	2702 <__gedf2+0x76>
    26d2:	465f      	mov	r7, fp
    26d4:	433a      	orrs	r2, r7
    26d6:	d114      	bne.n	2702 <__gedf2+0x76>
    26d8:	464b      	mov	r3, r9
    26da:	2000      	movs	r0, #0
    26dc:	2b00      	cmp	r3, #0
    26de:	d00a      	beq.n	26f6 <__gedf2+0x6a>
    26e0:	e006      	b.n	26f0 <__gedf2+0x64>
    26e2:	2d00      	cmp	r5, #0
    26e4:	d102      	bne.n	26ec <__gedf2+0x60>
    26e6:	4658      	mov	r0, fp
    26e8:	4302      	orrs	r2, r0
    26ea:	d001      	beq.n	26f0 <__gedf2+0x64>
    26ec:	4299      	cmp	r1, r3
    26ee:	d018      	beq.n	2722 <__gedf2+0x96>
    26f0:	4248      	negs	r0, r1
    26f2:	2101      	movs	r1, #1
    26f4:	4308      	orrs	r0, r1
    26f6:	bc3c      	pop	{r2, r3, r4, r5}
    26f8:	4690      	mov	r8, r2
    26fa:	4699      	mov	r9, r3
    26fc:	46a2      	mov	sl, r4
    26fe:	46ab      	mov	fp, r5
    2700:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2702:	2800      	cmp	r0, #0
    2704:	d0f2      	beq.n	26ec <__gedf2+0x60>
    2706:	2001      	movs	r0, #1
    2708:	3b01      	subs	r3, #1
    270a:	4318      	orrs	r0, r3
    270c:	e7f3      	b.n	26f6 <__gedf2+0x6a>
    270e:	0037      	movs	r7, r6
    2710:	4307      	orrs	r7, r0
    2712:	d0d1      	beq.n	26b8 <__gedf2+0x2c>
    2714:	2002      	movs	r0, #2
    2716:	4240      	negs	r0, r0
    2718:	e7ed      	b.n	26f6 <__gedf2+0x6a>
    271a:	465f      	mov	r7, fp
    271c:	4317      	orrs	r7, r2
    271e:	d0ce      	beq.n	26be <__gedf2+0x32>
    2720:	e7f8      	b.n	2714 <__gedf2+0x88>
    2722:	42ac      	cmp	r4, r5
    2724:	dce4      	bgt.n	26f0 <__gedf2+0x64>
    2726:	da03      	bge.n	2730 <__gedf2+0xa4>
    2728:	1e48      	subs	r0, r1, #1
    272a:	2101      	movs	r1, #1
    272c:	4308      	orrs	r0, r1
    272e:	e7e2      	b.n	26f6 <__gedf2+0x6a>
    2730:	455e      	cmp	r6, fp
    2732:	d8dd      	bhi.n	26f0 <__gedf2+0x64>
    2734:	d006      	beq.n	2744 <__gedf2+0xb8>
    2736:	2000      	movs	r0, #0
    2738:	455e      	cmp	r6, fp
    273a:	d2dc      	bcs.n	26f6 <__gedf2+0x6a>
    273c:	2301      	movs	r3, #1
    273e:	1e48      	subs	r0, r1, #1
    2740:	4318      	orrs	r0, r3
    2742:	e7d8      	b.n	26f6 <__gedf2+0x6a>
    2744:	45c4      	cmp	ip, r8
    2746:	d8d3      	bhi.n	26f0 <__gedf2+0x64>
    2748:	2000      	movs	r0, #0
    274a:	45c4      	cmp	ip, r8
    274c:	d3f6      	bcc.n	273c <__gedf2+0xb0>
    274e:	e7d2      	b.n	26f6 <__gedf2+0x6a>
    2750:	000007ff 	.word	0x000007ff

00002754 <__ledf2>:
    2754:	b5f0      	push	{r4, r5, r6, r7, lr}
    2756:	464e      	mov	r6, r9
    2758:	4645      	mov	r5, r8
    275a:	46de      	mov	lr, fp
    275c:	4657      	mov	r7, sl
    275e:	005c      	lsls	r4, r3, #1
    2760:	b5e0      	push	{r5, r6, r7, lr}
    2762:	031f      	lsls	r7, r3, #12
    2764:	0fdb      	lsrs	r3, r3, #31
    2766:	4699      	mov	r9, r3
    2768:	4b2a      	ldr	r3, [pc, #168]	; (2814 <__ledf2+0xc0>)
    276a:	030e      	lsls	r6, r1, #12
    276c:	004d      	lsls	r5, r1, #1
    276e:	0fc9      	lsrs	r1, r1, #31
    2770:	4684      	mov	ip, r0
    2772:	0b36      	lsrs	r6, r6, #12
    2774:	0d6d      	lsrs	r5, r5, #21
    2776:	468b      	mov	fp, r1
    2778:	4690      	mov	r8, r2
    277a:	0b3f      	lsrs	r7, r7, #12
    277c:	0d64      	lsrs	r4, r4, #21
    277e:	429d      	cmp	r5, r3
    2780:	d020      	beq.n	27c4 <__ledf2+0x70>
    2782:	4b24      	ldr	r3, [pc, #144]	; (2814 <__ledf2+0xc0>)
    2784:	429c      	cmp	r4, r3
    2786:	d022      	beq.n	27ce <__ledf2+0x7a>
    2788:	2d00      	cmp	r5, #0
    278a:	d112      	bne.n	27b2 <__ledf2+0x5e>
    278c:	4330      	orrs	r0, r6
    278e:	4243      	negs	r3, r0
    2790:	4143      	adcs	r3, r0
    2792:	b2db      	uxtb	r3, r3
    2794:	2c00      	cmp	r4, #0
    2796:	d01f      	beq.n	27d8 <__ledf2+0x84>
    2798:	2b00      	cmp	r3, #0
    279a:	d00c      	beq.n	27b6 <__ledf2+0x62>
    279c:	464b      	mov	r3, r9
    279e:	2001      	movs	r0, #1
    27a0:	3b01      	subs	r3, #1
    27a2:	4303      	orrs	r3, r0
    27a4:	0018      	movs	r0, r3
    27a6:	bc3c      	pop	{r2, r3, r4, r5}
    27a8:	4690      	mov	r8, r2
    27aa:	4699      	mov	r9, r3
    27ac:	46a2      	mov	sl, r4
    27ae:	46ab      	mov	fp, r5
    27b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27b2:	2c00      	cmp	r4, #0
    27b4:	d016      	beq.n	27e4 <__ledf2+0x90>
    27b6:	45cb      	cmp	fp, r9
    27b8:	d017      	beq.n	27ea <__ledf2+0x96>
    27ba:	465b      	mov	r3, fp
    27bc:	4259      	negs	r1, r3
    27be:	2301      	movs	r3, #1
    27c0:	430b      	orrs	r3, r1
    27c2:	e7ef      	b.n	27a4 <__ledf2+0x50>
    27c4:	0031      	movs	r1, r6
    27c6:	2302      	movs	r3, #2
    27c8:	4301      	orrs	r1, r0
    27ca:	d1eb      	bne.n	27a4 <__ledf2+0x50>
    27cc:	e7d9      	b.n	2782 <__ledf2+0x2e>
    27ce:	0039      	movs	r1, r7
    27d0:	2302      	movs	r3, #2
    27d2:	4311      	orrs	r1, r2
    27d4:	d1e6      	bne.n	27a4 <__ledf2+0x50>
    27d6:	e7d7      	b.n	2788 <__ledf2+0x34>
    27d8:	433a      	orrs	r2, r7
    27da:	d1dd      	bne.n	2798 <__ledf2+0x44>
    27dc:	2300      	movs	r3, #0
    27de:	2800      	cmp	r0, #0
    27e0:	d0e0      	beq.n	27a4 <__ledf2+0x50>
    27e2:	e7ea      	b.n	27ba <__ledf2+0x66>
    27e4:	433a      	orrs	r2, r7
    27e6:	d1e6      	bne.n	27b6 <__ledf2+0x62>
    27e8:	e7e7      	b.n	27ba <__ledf2+0x66>
    27ea:	42a5      	cmp	r5, r4
    27ec:	dce5      	bgt.n	27ba <__ledf2+0x66>
    27ee:	db05      	blt.n	27fc <__ledf2+0xa8>
    27f0:	42be      	cmp	r6, r7
    27f2:	d8e2      	bhi.n	27ba <__ledf2+0x66>
    27f4:	d007      	beq.n	2806 <__ledf2+0xb2>
    27f6:	2300      	movs	r3, #0
    27f8:	42be      	cmp	r6, r7
    27fa:	d2d3      	bcs.n	27a4 <__ledf2+0x50>
    27fc:	4659      	mov	r1, fp
    27fe:	2301      	movs	r3, #1
    2800:	3901      	subs	r1, #1
    2802:	430b      	orrs	r3, r1
    2804:	e7ce      	b.n	27a4 <__ledf2+0x50>
    2806:	45c4      	cmp	ip, r8
    2808:	d8d7      	bhi.n	27ba <__ledf2+0x66>
    280a:	2300      	movs	r3, #0
    280c:	45c4      	cmp	ip, r8
    280e:	d3f5      	bcc.n	27fc <__ledf2+0xa8>
    2810:	e7c8      	b.n	27a4 <__ledf2+0x50>
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	000007ff 	.word	0x000007ff

00002818 <__libc_init_array>:
    2818:	b570      	push	{r4, r5, r6, lr}
    281a:	4e0d      	ldr	r6, [pc, #52]	; (2850 <__libc_init_array+0x38>)
    281c:	4d0d      	ldr	r5, [pc, #52]	; (2854 <__libc_init_array+0x3c>)
    281e:	2400      	movs	r4, #0
    2820:	1bad      	subs	r5, r5, r6
    2822:	10ad      	asrs	r5, r5, #2
    2824:	d005      	beq.n	2832 <__libc_init_array+0x1a>
    2826:	00a3      	lsls	r3, r4, #2
    2828:	58f3      	ldr	r3, [r6, r3]
    282a:	3401      	adds	r4, #1
    282c:	4798      	blx	r3
    282e:	42a5      	cmp	r5, r4
    2830:	d1f9      	bne.n	2826 <__libc_init_array+0xe>
    2832:	f000 f919 	bl	2a68 <_init>
    2836:	4e08      	ldr	r6, [pc, #32]	; (2858 <__libc_init_array+0x40>)
    2838:	4d08      	ldr	r5, [pc, #32]	; (285c <__libc_init_array+0x44>)
    283a:	2400      	movs	r4, #0
    283c:	1bad      	subs	r5, r5, r6
    283e:	10ad      	asrs	r5, r5, #2
    2840:	d005      	beq.n	284e <__libc_init_array+0x36>
    2842:	00a3      	lsls	r3, r4, #2
    2844:	58f3      	ldr	r3, [r6, r3]
    2846:	3401      	adds	r4, #1
    2848:	4798      	blx	r3
    284a:	42a5      	cmp	r5, r4
    284c:	d1f9      	bne.n	2842 <__libc_init_array+0x2a>
    284e:	bd70      	pop	{r4, r5, r6, pc}
    2850:	00002a74 	.word	0x00002a74
    2854:	00002a74 	.word	0x00002a74
    2858:	00002a74 	.word	0x00002a74
    285c:	00002a7c 	.word	0x00002a7c

00002860 <register_fini>:
    2860:	4b03      	ldr	r3, [pc, #12]	; (2870 <register_fini+0x10>)
    2862:	b510      	push	{r4, lr}
    2864:	2b00      	cmp	r3, #0
    2866:	d002      	beq.n	286e <register_fini+0xe>
    2868:	4802      	ldr	r0, [pc, #8]	; (2874 <register_fini+0x14>)
    286a:	f000 f805 	bl	2878 <atexit>
    286e:	bd10      	pop	{r4, pc}
    2870:	00000000 	.word	0x00000000
    2874:	00002889 	.word	0x00002889

00002878 <atexit>:
    2878:	b510      	push	{r4, lr}
    287a:	0001      	movs	r1, r0
    287c:	2300      	movs	r3, #0
    287e:	2200      	movs	r2, #0
    2880:	2000      	movs	r0, #0
    2882:	f000 f81f 	bl	28c4 <__register_exitproc>
    2886:	bd10      	pop	{r4, pc}

00002888 <__libc_fini_array>:
    2888:	b570      	push	{r4, r5, r6, lr}
    288a:	4b09      	ldr	r3, [pc, #36]	; (28b0 <__libc_fini_array+0x28>)
    288c:	4c09      	ldr	r4, [pc, #36]	; (28b4 <__libc_fini_array+0x2c>)
    288e:	1ae4      	subs	r4, r4, r3
    2890:	10a4      	asrs	r4, r4, #2
    2892:	d009      	beq.n	28a8 <__libc_fini_array+0x20>
    2894:	4a08      	ldr	r2, [pc, #32]	; (28b8 <__libc_fini_array+0x30>)
    2896:	18a5      	adds	r5, r4, r2
    2898:	00ad      	lsls	r5, r5, #2
    289a:	18ed      	adds	r5, r5, r3
    289c:	682b      	ldr	r3, [r5, #0]
    289e:	3c01      	subs	r4, #1
    28a0:	4798      	blx	r3
    28a2:	3d04      	subs	r5, #4
    28a4:	2c00      	cmp	r4, #0
    28a6:	d1f9      	bne.n	289c <__libc_fini_array+0x14>
    28a8:	f000 f8e8 	bl	2a7c <_fini>
    28ac:	bd70      	pop	{r4, r5, r6, pc}
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	00002a88 	.word	0x00002a88
    28b4:	00002a8c 	.word	0x00002a8c
    28b8:	3fffffff 	.word	0x3fffffff

000028bc <__retarget_lock_acquire_recursive>:
    28bc:	4770      	bx	lr
    28be:	46c0      	nop			; (mov r8, r8)

000028c0 <__retarget_lock_release_recursive>:
    28c0:	4770      	bx	lr
    28c2:	46c0      	nop			; (mov r8, r8)

000028c4 <__register_exitproc>:
    28c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28c6:	464e      	mov	r6, r9
    28c8:	4645      	mov	r5, r8
    28ca:	46de      	mov	lr, fp
    28cc:	4657      	mov	r7, sl
    28ce:	b5e0      	push	{r5, r6, r7, lr}
    28d0:	4d36      	ldr	r5, [pc, #216]	; (29ac <__register_exitproc+0xe8>)
    28d2:	b083      	sub	sp, #12
    28d4:	0006      	movs	r6, r0
    28d6:	6828      	ldr	r0, [r5, #0]
    28d8:	4698      	mov	r8, r3
    28da:	000f      	movs	r7, r1
    28dc:	4691      	mov	r9, r2
    28de:	f7ff ffed 	bl	28bc <__retarget_lock_acquire_recursive>
    28e2:	4b33      	ldr	r3, [pc, #204]	; (29b0 <__register_exitproc+0xec>)
    28e4:	681c      	ldr	r4, [r3, #0]
    28e6:	23a4      	movs	r3, #164	; 0xa4
    28e8:	005b      	lsls	r3, r3, #1
    28ea:	58e0      	ldr	r0, [r4, r3]
    28ec:	2800      	cmp	r0, #0
    28ee:	d052      	beq.n	2996 <__register_exitproc+0xd2>
    28f0:	6843      	ldr	r3, [r0, #4]
    28f2:	2b1f      	cmp	r3, #31
    28f4:	dc13      	bgt.n	291e <__register_exitproc+0x5a>
    28f6:	1c5a      	adds	r2, r3, #1
    28f8:	9201      	str	r2, [sp, #4]
    28fa:	2e00      	cmp	r6, #0
    28fc:	d128      	bne.n	2950 <__register_exitproc+0x8c>
    28fe:	9a01      	ldr	r2, [sp, #4]
    2900:	3302      	adds	r3, #2
    2902:	009b      	lsls	r3, r3, #2
    2904:	6042      	str	r2, [r0, #4]
    2906:	501f      	str	r7, [r3, r0]
    2908:	6828      	ldr	r0, [r5, #0]
    290a:	f7ff ffd9 	bl	28c0 <__retarget_lock_release_recursive>
    290e:	2000      	movs	r0, #0
    2910:	b003      	add	sp, #12
    2912:	bc3c      	pop	{r2, r3, r4, r5}
    2914:	4690      	mov	r8, r2
    2916:	4699      	mov	r9, r3
    2918:	46a2      	mov	sl, r4
    291a:	46ab      	mov	fp, r5
    291c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    291e:	4b25      	ldr	r3, [pc, #148]	; (29b4 <__register_exitproc+0xf0>)
    2920:	2b00      	cmp	r3, #0
    2922:	d03d      	beq.n	29a0 <__register_exitproc+0xdc>
    2924:	20c8      	movs	r0, #200	; 0xc8
    2926:	0040      	lsls	r0, r0, #1
    2928:	e000      	b.n	292c <__register_exitproc+0x68>
    292a:	bf00      	nop
    292c:	2800      	cmp	r0, #0
    292e:	d037      	beq.n	29a0 <__register_exitproc+0xdc>
    2930:	22a4      	movs	r2, #164	; 0xa4
    2932:	2300      	movs	r3, #0
    2934:	0052      	lsls	r2, r2, #1
    2936:	58a1      	ldr	r1, [r4, r2]
    2938:	6043      	str	r3, [r0, #4]
    293a:	6001      	str	r1, [r0, #0]
    293c:	50a0      	str	r0, [r4, r2]
    293e:	3240      	adds	r2, #64	; 0x40
    2940:	5083      	str	r3, [r0, r2]
    2942:	3204      	adds	r2, #4
    2944:	5083      	str	r3, [r0, r2]
    2946:	3301      	adds	r3, #1
    2948:	9301      	str	r3, [sp, #4]
    294a:	2300      	movs	r3, #0
    294c:	2e00      	cmp	r6, #0
    294e:	d0d6      	beq.n	28fe <__register_exitproc+0x3a>
    2950:	009a      	lsls	r2, r3, #2
    2952:	4692      	mov	sl, r2
    2954:	4482      	add	sl, r0
    2956:	464a      	mov	r2, r9
    2958:	2188      	movs	r1, #136	; 0x88
    295a:	4654      	mov	r4, sl
    295c:	5062      	str	r2, [r4, r1]
    295e:	22c4      	movs	r2, #196	; 0xc4
    2960:	0052      	lsls	r2, r2, #1
    2962:	4691      	mov	r9, r2
    2964:	4481      	add	r9, r0
    2966:	464a      	mov	r2, r9
    2968:	3987      	subs	r1, #135	; 0x87
    296a:	4099      	lsls	r1, r3
    296c:	6812      	ldr	r2, [r2, #0]
    296e:	468b      	mov	fp, r1
    2970:	430a      	orrs	r2, r1
    2972:	4694      	mov	ip, r2
    2974:	464a      	mov	r2, r9
    2976:	4661      	mov	r1, ip
    2978:	6011      	str	r1, [r2, #0]
    297a:	2284      	movs	r2, #132	; 0x84
    297c:	4641      	mov	r1, r8
    297e:	0052      	lsls	r2, r2, #1
    2980:	50a1      	str	r1, [r4, r2]
    2982:	2e02      	cmp	r6, #2
    2984:	d1bb      	bne.n	28fe <__register_exitproc+0x3a>
    2986:	0002      	movs	r2, r0
    2988:	465c      	mov	r4, fp
    298a:	328d      	adds	r2, #141	; 0x8d
    298c:	32ff      	adds	r2, #255	; 0xff
    298e:	6811      	ldr	r1, [r2, #0]
    2990:	430c      	orrs	r4, r1
    2992:	6014      	str	r4, [r2, #0]
    2994:	e7b3      	b.n	28fe <__register_exitproc+0x3a>
    2996:	0020      	movs	r0, r4
    2998:	304d      	adds	r0, #77	; 0x4d
    299a:	30ff      	adds	r0, #255	; 0xff
    299c:	50e0      	str	r0, [r4, r3]
    299e:	e7a7      	b.n	28f0 <__register_exitproc+0x2c>
    29a0:	6828      	ldr	r0, [r5, #0]
    29a2:	f7ff ff8d 	bl	28c0 <__retarget_lock_release_recursive>
    29a6:	2001      	movs	r0, #1
    29a8:	4240      	negs	r0, r0
    29aa:	e7b1      	b.n	2910 <__register_exitproc+0x4c>
    29ac:	20000438 	.word	0x20000438
    29b0:	00002a64 	.word	0x00002a64
    29b4:	00000000 	.word	0x00000000
    29b8:	45524548 	.word	0x45524548
    29bc:	00000000 	.word	0x00000000
    29c0:	000006be 	.word	0x000006be
    29c4:	000006a2 	.word	0x000006a2
    29c8:	000006c2 	.word	0x000006c2
    29cc:	0000063a 	.word	0x0000063a
    29d0:	000006ca 	.word	0x000006ca
    29d4:	00000642 	.word	0x00000642
    29d8:	0000064a 	.word	0x0000064a
    29dc:	00000652 	.word	0x00000652
    29e0:	0000065a 	.word	0x0000065a
    29e4:	00000662 	.word	0x00000662
    29e8:	0000066a 	.word	0x0000066a
    29ec:	00000672 	.word	0x00000672
    29f0:	0000067a 	.word	0x0000067a
    29f4:	00000682 	.word	0x00000682
    29f8:	0000068a 	.word	0x0000068a
    29fc:	00000692 	.word	0x00000692
    2a00:	0000069a 	.word	0x0000069a
    2a04:	000009ae 	.word	0x000009ae
    2a08:	000009cc 	.word	0x000009cc
    2a0c:	000009d8 	.word	0x000009d8
    2a10:	000009e4 	.word	0x000009e4
    2a14:	000009f0 	.word	0x000009f0
    2a18:	000009fc 	.word	0x000009fc

00002a1c <ctrla.10005>:
    2a1c:	0030000c                                ..0.

00002a20 <wrconfig.10007>:
    2a20:	d201000b 00001b4c 00001a0c 00001a0c     ....L...........
    2a30:	00001a08 00001b24 00001b24 00001b16     ....$...$.......
    2a40:	00001a08 00001b24 00001b16 00001b24     ....$.......$...
    2a50:	00001a08 00001b2c 00001b2c 00001b2c     ....,...,...,...
    2a60:	00001d30                                0...

00002a64 <_global_impure_ptr>:
    2a64:	20000010                                ... 

00002a68 <_init>:
    2a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a6e:	bc08      	pop	{r3}
    2a70:	469e      	mov	lr, r3
    2a72:	4770      	bx	lr

00002a74 <__init_array_start>:
    2a74:	00002861 	.word	0x00002861

00002a78 <__frame_dummy_init_array_entry>:
    2a78:	000000dd                                ....

00002a7c <_fini>:
    2a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a7e:	46c0      	nop			; (mov r8, r8)
    2a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a82:	bc08      	pop	{r3}
    2a84:	469e      	mov	lr, r3
    2a86:	4770      	bx	lr

00002a88 <__fini_array_start>:
    2a88:	000000b5 	.word	0x000000b5
