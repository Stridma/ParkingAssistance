
labCAN 8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000504c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000444  20000000  0000504c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000040a4  20000444  00005490  00020444  2**2
                  ALLOC
  3 .stack        00002000  200044e8  00009534  00020444  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001a7a4  00000000  00000000  000204c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023c8  00000000  00000000  0003ac69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007972  00000000  00000000  0003d031  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000748  00000000  00000000  000449a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000900  00000000  00000000  000450eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000147fa  00000000  00000000  000459eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006b26  00000000  00000000  0005a1e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007c3aa  00000000  00000000  00060d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000018e4  00000000  00000000  000dd0b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 64 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .d. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 91 11 00 00     ................
      3c:	d5 11 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000444 	.word	0x20000444
      d4:	00000000 	.word	0x00000000
      d8:	0000504c 	.word	0x0000504c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000448 	.word	0x20000448
     108:	0000504c 	.word	0x0000504c
     10c:	0000504c 	.word	0x0000504c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	0000504c 	.word	0x0000504c
     1c8:	20000000 	.word	0x20000000
     1cc:	20000444 	.word	0x20000444
     1d0:	20000004 	.word	0x20000004
     1d4:	20000444 	.word	0x20000444
     1d8:	200044e8 	.word	0x200044e8
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	00004bed 	.word	0x00004bed
     1f8:	00000461 	.word	0x00000461

000001fc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     1fc:	4a01      	ldr	r2, [pc, #4]	; (204 <SystemInit+0x8>)
     1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <SystemInit+0xc>)
     200:	601a      	str	r2, [r3, #0]
	return;
}
     202:	4770      	bx	lr
     204:	000f4240 	.word	0x000f4240
     208:	20000000 	.word	0x20000000

0000020c <InitDigOut>:

/* Funcion para configurar un puerto como salida recibe dos parametros:  group: espera un 0 o 1 que indique el puerto, y pin: espera un valor entero 
que indique el pin en el puerto*/
void InitDigOut(_Bool group, uint8_t pin){
	
	PORT->Group[(uint8_t)group].PINCFG[pin].reg = 0x00;
     20c:	01c0      	lsls	r0, r0, #7
     20e:	4b05      	ldr	r3, [pc, #20]	; (224 <InitDigOut+0x18>)
     210:	469c      	mov	ip, r3
     212:	4460      	add	r0, ip
     214:	1843      	adds	r3, r0, r1
     216:	3340      	adds	r3, #64	; 0x40
     218:	2200      	movs	r2, #0
     21a:	701a      	strb	r2, [r3, #0]
	PORT->Group[(uint8_t)group].DIRSET.reg = (1 << pin) ;
     21c:	2301      	movs	r3, #1
     21e:	408b      	lsls	r3, r1
     220:	6083      	str	r3, [r0, #8]
}
     222:	4770      	bx	lr
     224:	41004400 	.word	0x41004400

00000228 <InitDigIn>:

void InitDigIn(_Bool group, uint8_t pin)
{
	/*Dado un puerto y un numero de pin, del 0 al 31 para el puerto A(0), y ...AGREGAR PINES PUERTO B 
	los configura como entrada, es decir activa INEN,bit1, y PULLEN, bit2, y con el registro DIRCLR se activa la direccion como entrada*/
	PORT->Group[(uint8_t)group].PINCFG[pin].reg=0x03;
     228:	01c0      	lsls	r0, r0, #7
     22a:	4b06      	ldr	r3, [pc, #24]	; (244 <InitDigIn+0x1c>)
     22c:	469c      	mov	ip, r3
     22e:	4460      	add	r0, ip
     230:	1843      	adds	r3, r0, r1
     232:	3340      	adds	r3, #64	; 0x40
     234:	2203      	movs	r2, #3
     236:	701a      	strb	r2, [r3, #0]
	PORT->Group[(uint8_t)group].DIRCLR.reg= (1<<pin);
     238:	2301      	movs	r3, #1
     23a:	408b      	lsls	r3, r1
     23c:	6043      	str	r3, [r0, #4]
	
	//habilita SAMPLING
	PORT->Group[(uint8_t)group].CTRL.reg=(1<<pin);
     23e:	6243      	str	r3, [r0, #36]	; 0x24
}
     240:	4770      	bx	lr
     242:	46c0      	nop			; (mov r8, r8)
     244:	41004400 	.word	0x41004400

00000248 <recieveCANMessage>:
		PORT->Group[0].OUTTGL.reg = 0x08000400;           // Output a 0 to Pin 27
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;			// Clear flag
	}
}

void recieveCANMessage(){
     248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     24a:	46ce      	mov	lr, r9
     24c:	4647      	mov	r7, r8
     24e:	b580      	push	{r7, lr}
	while (1)
	{
		result = readMsgBufID(&canID,&length,stmp);
     250:	4e16      	ldr	r6, [pc, #88]	; (2ac <recieveCANMessage+0x64>)
     252:	4b17      	ldr	r3, [pc, #92]	; (2b0 <recieveCANMessage+0x68>)
     254:	4699      	mov	r9, r3
     256:	0032      	movs	r2, r6
     258:	4916      	ldr	r1, [pc, #88]	; (2b4 <recieveCANMessage+0x6c>)
     25a:	4648      	mov	r0, r9
     25c:	4b16      	ldr	r3, [pc, #88]	; (2b8 <recieveCANMessage+0x70>)
     25e:	4798      	blx	r3
     260:	4b16      	ldr	r3, [pc, #88]	; (2bc <recieveCANMessage+0x74>)
     262:	7018      	strb	r0, [r3, #0]
		xSemaphoreTake(distanceSemaphore,100);
     264:	4c16      	ldr	r4, [pc, #88]	; (2c0 <recieveCANMessage+0x78>)
     266:	2164      	movs	r1, #100	; 0x64
     268:	6820      	ldr	r0, [r4, #0]
     26a:	4b16      	ldr	r3, [pc, #88]	; (2c4 <recieveCANMessage+0x7c>)
     26c:	4698      	mov	r8, r3
     26e:	4798      	blx	r3
		distance = (stmp[6]<<8)|stmp[7]; // Read the last two bytes of data (using two bytes because maximum value es 408 cm)
     270:	4f15      	ldr	r7, [pc, #84]	; (2c8 <recieveCANMessage+0x80>)
     272:	79b3      	ldrb	r3, [r6, #6]
     274:	021b      	lsls	r3, r3, #8
     276:	79f2      	ldrb	r2, [r6, #7]
     278:	4313      	orrs	r3, r2
     27a:	603b      	str	r3, [r7, #0]
		xSemaphoreGive(distanceSemaphore); // Critical section can end because no other thread is modifying distance
     27c:	2300      	movs	r3, #0
     27e:	2200      	movs	r2, #0
     280:	2100      	movs	r1, #0
     282:	6820      	ldr	r0, [r4, #0]
     284:	4d11      	ldr	r5, [pc, #68]	; (2cc <recieveCANMessage+0x84>)
     286:	47a8      	blx	r5
		xSemaphoreTake(access_myprintf,100);
     288:	2164      	movs	r1, #100	; 0x64
     28a:	6860      	ldr	r0, [r4, #4]
     28c:	47c0      	blx	r8
		myprintf("ID: %d \t Data: %d\n", canID, distance);
     28e:	683a      	ldr	r2, [r7, #0]
     290:	464b      	mov	r3, r9
     292:	8819      	ldrh	r1, [r3, #0]
     294:	480e      	ldr	r0, [pc, #56]	; (2d0 <recieveCANMessage+0x88>)
     296:	4b0f      	ldr	r3, [pc, #60]	; (2d4 <recieveCANMessage+0x8c>)
     298:	4798      	blx	r3
		xSemaphoreGive(access_myprintf);
     29a:	6860      	ldr	r0, [r4, #4]
     29c:	2300      	movs	r3, #0
     29e:	2200      	movs	r2, #0
     2a0:	2100      	movs	r1, #0
     2a2:	47a8      	blx	r5
		vTaskDelay(333/portTICK_PERIOD_MS/10); // (6 times a second) Half the data sending period on the other Arduino
     2a4:	2010      	movs	r0, #16
     2a6:	4b0c      	ldr	r3, [pc, #48]	; (2d8 <recieveCANMessage+0x90>)
     2a8:	4798      	blx	r3
     2aa:	e7d4      	b.n	256 <recieveCANMessage+0xe>
     2ac:	20004464 	.word	0x20004464
     2b0:	20004470 	.word	0x20004470
     2b4:	20004458 	.word	0x20004458
     2b8:	00000b9d 	.word	0x00000b9d
     2bc:	20004462 	.word	0x20004462
     2c0:	20000460 	.word	0x20000460
     2c4:	00001881 	.word	0x00001881
     2c8:	2000445c 	.word	0x2000445c
     2cc:	000014a5 	.word	0x000014a5
     2d0:	00004ea4 	.word	0x00004ea4
     2d4:	00000e51 	.word	0x00000e51
     2d8:	00002009 	.word	0x00002009

000002dc <initializeTimer>:
	PORT->Group[0].PINCFG[PIN_PA27].reg = 0x00;	        // disable peripheral functions at PIN27
     2dc:	4b0c      	ldr	r3, [pc, #48]	; (310 <initializeTimer+0x34>)
     2de:	2200      	movs	r2, #0
     2e0:	215b      	movs	r1, #91	; 0x5b
     2e2:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].DIRSET.reg=0x08000400;				// Pin 27 configured as output
     2e4:	490b      	ldr	r1, [pc, #44]	; (314 <initializeTimer+0x38>)
     2e6:	6099      	str	r1, [r3, #8]
	PORT->Group[0].OUTTGL.reg = 0x08000400;            	// Output a 0 to Pin 27
     2e8:	61d9      	str	r1, [r3, #28]
	PM->APBCMASK.reg |= PM_APBCMASK_TC3;
     2ea:	490b      	ldr	r1, [pc, #44]	; (318 <initializeTimer+0x3c>)
     2ec:	6a08      	ldr	r0, [r1, #32]
     2ee:	2380      	movs	r3, #128	; 0x80
     2f0:	011b      	lsls	r3, r3, #4
     2f2:	4303      	orrs	r3, r0
     2f4:	620b      	str	r3, [r1, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(GCLK_CLKCTRL_ID_TCC2_TC3) | GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
     2f6:	4909      	ldr	r1, [pc, #36]	; (31c <initializeTimer+0x40>)
     2f8:	4b09      	ldr	r3, [pc, #36]	; (320 <initializeTimer+0x44>)
     2fa:	8059      	strh	r1, [r3, #2]
	TC3->COUNT16.CC[0].reg = TC_COUNT16_CC_CC(0x1F40);
     2fc:	4b09      	ldr	r3, [pc, #36]	; (324 <initializeTimer+0x48>)
     2fe:	21fa      	movs	r1, #250	; 0xfa
     300:	0149      	lsls	r1, r1, #5
     302:	8319      	strh	r1, [r3, #24]
	TC3->COUNT16.COUNT.reg = TC_COUNT16_COUNT_COUNT(0x0000);
     304:	821a      	strh	r2, [r3, #16]
	TC3->COUNT16.CTRLA.reg = TC_CTRLA_PRESCSYNC_RESYNC | TC_CTRLA_WAVEGEN_MFRQ | TC_CTRLA_MODE_COUNT16 | TC_CTRLA_PRESCALER_DIV1 | TC_CTRLA_ENABLE;
     306:	4a08      	ldr	r2, [pc, #32]	; (328 <initializeTimer+0x4c>)
     308:	801a      	strh	r2, [r3, #0]
	TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1; // Clear flag
     30a:	2220      	movs	r2, #32
     30c:	739a      	strb	r2, [r3, #14]
}
     30e:	4770      	bx	lr
     310:	41004400 	.word	0x41004400
     314:	08000400 	.word	0x08000400
     318:	40000400 	.word	0x40000400
     31c:	0000401b 	.word	0x0000401b
     320:	40000c00 	.word	0x40000c00
     324:	42002c00 	.word	0x42002c00
     328:	00002022 	.word	0x00002022

0000032c <delayMiliseconds>:
void delayMiliseconds(uint32_t max){
     32c:	b570      	push	{r4, r5, r6, lr}
	while(((TC3->COUNT16.INTFLAG.reg)&(TC_INTFLAG_MC1)) != TC_INTFLAG_MC1 ) {
     32e:	490d      	ldr	r1, [pc, #52]	; (364 <delayMiliseconds+0x38>)
     330:	2220      	movs	r2, #32
     332:	7b8b      	ldrb	r3, [r1, #14]
     334:	4213      	tst	r3, r2
     336:	d0fc      	beq.n	332 <delayMiliseconds+0x6>
	PORT->Group[0].OUTTGL.reg = 0x08000400;           // Output a 0 to Pin 27
     338:	4a0b      	ldr	r2, [pc, #44]	; (368 <delayMiliseconds+0x3c>)
     33a:	4b0c      	ldr	r3, [pc, #48]	; (36c <delayMiliseconds+0x40>)
     33c:	61da      	str	r2, [r3, #28]
	TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;			// Clear flag
     33e:	2220      	movs	r2, #32
     340:	4b08      	ldr	r3, [pc, #32]	; (364 <delayMiliseconds+0x38>)
     342:	739a      	strb	r2, [r3, #14]
	while (milliseconds < max) {
     344:	2800      	cmp	r0, #0
     346:	d00b      	beq.n	360 <delayMiliseconds+0x34>
     348:	2400      	movs	r4, #0
		while(((TC3->COUNT16.INTFLAG.reg)&(TC_INTFLAG_MC1)) != TC_INTFLAG_MC1 ) {
     34a:	0019      	movs	r1, r3
		PORT->Group[0].OUTTGL.reg = 0x08000400;           // Output a 0 to Pin 27
     34c:	4e07      	ldr	r6, [pc, #28]	; (36c <delayMiliseconds+0x40>)
     34e:	4d06      	ldr	r5, [pc, #24]	; (368 <delayMiliseconds+0x3c>)
		while(((TC3->COUNT16.INTFLAG.reg)&(TC_INTFLAG_MC1)) != TC_INTFLAG_MC1 ) {
     350:	7b8b      	ldrb	r3, [r1, #14]
     352:	4213      	tst	r3, r2
     354:	d0fc      	beq.n	350 <delayMiliseconds+0x24>
		milliseconds++;
     356:	3401      	adds	r4, #1
		PORT->Group[0].OUTTGL.reg = 0x08000400;           // Output a 0 to Pin 27
     358:	61f5      	str	r5, [r6, #28]
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;			// Clear flag
     35a:	738a      	strb	r2, [r1, #14]
	while (milliseconds < max) {
     35c:	42a0      	cmp	r0, r4
     35e:	d1f7      	bne.n	350 <delayMiliseconds+0x24>
}
     360:	bd70      	pop	{r4, r5, r6, pc}
     362:	46c0      	nop			; (mov r8, r8)
     364:	42002c00 	.word	0x42002c00
     368:	08000400 	.word	0x08000400
     36c:	41004400 	.word	0x41004400

00000370 <sendBeepSignal>:
	}
}

void sendBeepSignal(){
     370:	b570      	push	{r4, r5, r6, lr}
	while(1){
		xSemaphoreTake(distanceSemaphore,100);
     372:	4c29      	ldr	r4, [pc, #164]	; (418 <sendBeepSignal+0xa8>)
     374:	e00a      	b.n	38c <sendBeepSignal+0x1c>
				xSemaphoreTake(access_myprintf,100);
				myprintf("Delay: \t %d ms\n",delay);
				xSemaphoreGive(access_myprintf);
				vTaskDelay(delay/portTICK_PERIOD_MS/8); // Translate milliseconds to ticks
			}else{
				vTaskDelay(20/portTICK_PERIOD_MS/8); // Translate milliseconds to ticks
     376:	2001      	movs	r0, #1
     378:	4b28      	ldr	r3, [pc, #160]	; (41c <sendBeepSignal+0xac>)
     37a:	4798      	blx	r3
     37c:	e006      	b.n	38c <sendBeepSignal+0x1c>
			}
		}else {
			PORT->Group[0].OUTCLR.reg = (1<<14); // Pin 2
     37e:	2280      	movs	r2, #128	; 0x80
     380:	01d2      	lsls	r2, r2, #7
     382:	4b27      	ldr	r3, [pc, #156]	; (420 <sendBeepSignal+0xb0>)
     384:	615a      	str	r2, [r3, #20]
			vTaskDelay(20/portTICK_PERIOD_MS/8); // Translate milliseconds to ticks
     386:	2001      	movs	r0, #1
     388:	4b24      	ldr	r3, [pc, #144]	; (41c <sendBeepSignal+0xac>)
     38a:	4798      	blx	r3
		xSemaphoreTake(distanceSemaphore,100);
     38c:	2164      	movs	r1, #100	; 0x64
     38e:	6820      	ldr	r0, [r4, #0]
     390:	4b24      	ldr	r3, [pc, #144]	; (424 <sendBeepSignal+0xb4>)
     392:	4798      	blx	r3
		tmpDist = distance;
     394:	4d24      	ldr	r5, [pc, #144]	; (428 <sendBeepSignal+0xb8>)
     396:	4b25      	ldr	r3, [pc, #148]	; (42c <sendBeepSignal+0xbc>)
     398:	681b      	ldr	r3, [r3, #0]
     39a:	602b      	str	r3, [r5, #0]
		xSemaphoreGive(distanceSemaphore);
     39c:	2300      	movs	r3, #0
     39e:	2200      	movs	r2, #0
     3a0:	2100      	movs	r1, #0
     3a2:	6820      	ldr	r0, [r4, #0]
     3a4:	4e22      	ldr	r6, [pc, #136]	; (430 <sendBeepSignal+0xc0>)
     3a6:	47b0      	blx	r6
		if (tmpDist < 150 && tmpDist > 0){
     3a8:	6828      	ldr	r0, [r5, #0]
     3aa:	1e43      	subs	r3, r0, #1
     3ac:	2b94      	cmp	r3, #148	; 0x94
     3ae:	d8e6      	bhi.n	37e <sendBeepSignal+0xe>
			delay = (uint16_t) (400*log(0.0523*tmpDist)); // uses log() from math.h
     3b0:	4b20      	ldr	r3, [pc, #128]	; (434 <sendBeepSignal+0xc4>)
     3b2:	4798      	blx	r3
     3b4:	4d20      	ldr	r5, [pc, #128]	; (438 <sendBeepSignal+0xc8>)
     3b6:	4a21      	ldr	r2, [pc, #132]	; (43c <sendBeepSignal+0xcc>)
     3b8:	4b21      	ldr	r3, [pc, #132]	; (440 <sendBeepSignal+0xd0>)
     3ba:	47a8      	blx	r5
     3bc:	4b21      	ldr	r3, [pc, #132]	; (444 <sendBeepSignal+0xd4>)
     3be:	4798      	blx	r3
     3c0:	2200      	movs	r2, #0
     3c2:	4b21      	ldr	r3, [pc, #132]	; (448 <sendBeepSignal+0xd8>)
     3c4:	47a8      	blx	r5
     3c6:	4b21      	ldr	r3, [pc, #132]	; (44c <sendBeepSignal+0xdc>)
     3c8:	4798      	blx	r3
     3ca:	4b21      	ldr	r3, [pc, #132]	; (450 <sendBeepSignal+0xe0>)
     3cc:	8018      	strh	r0, [r3, #0]
			PORT->Group[0].OUTSET.reg = (1<<14); // Pin 2 (Send high signal to buzzer)
     3ce:	2280      	movs	r2, #128	; 0x80
     3d0:	01d2      	lsls	r2, r2, #7
     3d2:	4b13      	ldr	r3, [pc, #76]	; (420 <sendBeepSignal+0xb0>)
     3d4:	619a      	str	r2, [r3, #24]
			delayMiliseconds(50); // Using Async delays to improve program flow
     3d6:	2032      	movs	r0, #50	; 0x32
     3d8:	4b1e      	ldr	r3, [pc, #120]	; (454 <sendBeepSignal+0xe4>)
     3da:	4798      	blx	r3
			if (tmpDist > 20){
     3dc:	4b12      	ldr	r3, [pc, #72]	; (428 <sendBeepSignal+0xb8>)
     3de:	681b      	ldr	r3, [r3, #0]
     3e0:	2b14      	cmp	r3, #20
     3e2:	d9c8      	bls.n	376 <sendBeepSignal+0x6>
				PORT->Group[0].OUTCLR.reg = (1<<14); // Pin 2 (Send low signal to buzzer)
     3e4:	2280      	movs	r2, #128	; 0x80
     3e6:	01d2      	lsls	r2, r2, #7
     3e8:	4b0d      	ldr	r3, [pc, #52]	; (420 <sendBeepSignal+0xb0>)
     3ea:	615a      	str	r2, [r3, #20]
				xSemaphoreTake(access_myprintf,100);
     3ec:	4e0a      	ldr	r6, [pc, #40]	; (418 <sendBeepSignal+0xa8>)
     3ee:	2164      	movs	r1, #100	; 0x64
     3f0:	6870      	ldr	r0, [r6, #4]
     3f2:	4b0c      	ldr	r3, [pc, #48]	; (424 <sendBeepSignal+0xb4>)
     3f4:	4798      	blx	r3
				myprintf("Delay: \t %d ms\n",delay);
     3f6:	4d16      	ldr	r5, [pc, #88]	; (450 <sendBeepSignal+0xe0>)
     3f8:	8829      	ldrh	r1, [r5, #0]
     3fa:	4817      	ldr	r0, [pc, #92]	; (458 <sendBeepSignal+0xe8>)
     3fc:	4b17      	ldr	r3, [pc, #92]	; (45c <sendBeepSignal+0xec>)
     3fe:	4798      	blx	r3
				xSemaphoreGive(access_myprintf);
     400:	6870      	ldr	r0, [r6, #4]
     402:	2300      	movs	r3, #0
     404:	2200      	movs	r2, #0
     406:	2100      	movs	r1, #0
     408:	4e09      	ldr	r6, [pc, #36]	; (430 <sendBeepSignal+0xc0>)
     40a:	47b0      	blx	r6
				vTaskDelay(delay/portTICK_PERIOD_MS/8); // Translate milliseconds to ticks
     40c:	8828      	ldrh	r0, [r5, #0]
     40e:	0900      	lsrs	r0, r0, #4
     410:	4b02      	ldr	r3, [pc, #8]	; (41c <sendBeepSignal+0xac>)
     412:	4798      	blx	r3
     414:	e7ba      	b.n	38c <sendBeepSignal+0x1c>
     416:	46c0      	nop			; (mov r8, r8)
     418:	20000460 	.word	0x20000460
     41c:	00002009 	.word	0x00002009
     420:	41004400 	.word	0x41004400
     424:	00001881 	.word	0x00001881
     428:	2000446c 	.word	0x2000446c
     42c:	2000445c 	.word	0x2000445c
     430:	000014a5 	.word	0x000014a5
     434:	00004b35 	.word	0x00004b35
     438:	00003edd 	.word	0x00003edd
     43c:	cb295e9e 	.word	0xcb295e9e
     440:	3faac710 	.word	0x3faac710
     444:	00002961 	.word	0x00002961
     448:	40790000 	.word	0x40790000
     44c:	00003019 	.word	0x00003019
     450:	20004460 	.word	0x20004460
     454:	0000032d 	.word	0x0000032d
     458:	00004eb8 	.word	0x00004eb8
     45c:	00000e51 	.word	0x00000e51

00000460 <main>:
	}
}


int main(void)
{
     460:	b570      	push	{r4, r5, r6, lr}
     462:	b082      	sub	sp, #8
    SystemInit();
     464:	4b2c      	ldr	r3, [pc, #176]	; (518 <main+0xb8>)
     466:	4798      	blx	r3
	
	SYSCTRL->OSC8M.bit.PRESC = 0;
     468:	4a2c      	ldr	r2, [pc, #176]	; (51c <main+0xbc>)
     46a:	6a13      	ldr	r3, [r2, #32]
     46c:	492c      	ldr	r1, [pc, #176]	; (520 <main+0xc0>)
     46e:	400b      	ands	r3, r1
     470:	6213      	str	r3, [r2, #32]
	initSPI();
     472:	4b2c      	ldr	r3, [pc, #176]	; (524 <main+0xc4>)
     474:	4798      	blx	r3
	initUART();
     476:	4b2c      	ldr	r3, [pc, #176]	; (528 <main+0xc8>)
     478:	4798      	blx	r3
	initializeTimer();
     47a:	4b2c      	ldr	r3, [pc, #176]	; (52c <main+0xcc>)
     47c:	4798      	blx	r3
	//uint32_t mask = 0x000007ff;
	
	canBegin(canSlave,CAN0_SPEED); // regresa 0 o 1
     47e:	4d2c      	ldr	r5, [pc, #176]	; (530 <main+0xd0>)
     480:	7a28      	ldrb	r0, [r5, #8]
     482:	210f      	movs	r1, #15
     484:	4b2b      	ldr	r3, [pc, #172]	; (534 <main+0xd4>)
     486:	4798      	blx	r3
	uint32_t mask = 0x00000700;
	init_Mask(0,mask);
     488:	26e0      	movs	r6, #224	; 0xe0
     48a:	00f6      	lsls	r6, r6, #3
     48c:	0031      	movs	r1, r6
     48e:	2000      	movs	r0, #0
     490:	4c29      	ldr	r4, [pc, #164]	; (538 <main+0xd8>)
     492:	47a0      	blx	r4
	init_Mask(1,mask);
     494:	0031      	movs	r1, r6
     496:	2001      	movs	r0, #1
     498:	47a0      	blx	r4
	uint32_t filter = 0x00000064;
	uint8_t extFilter = 0x00;
	//uint32_t filter = 0x00000000;
	init_Filt(0,extFilter,filter);
     49a:	2264      	movs	r2, #100	; 0x64
     49c:	2100      	movs	r1, #0
     49e:	2000      	movs	r0, #0
     4a0:	4c26      	ldr	r4, [pc, #152]	; (53c <main+0xdc>)
     4a2:	47a0      	blx	r4
	init_Filt(1,extFilter,filter);
     4a4:	2264      	movs	r2, #100	; 0x64
     4a6:	2100      	movs	r1, #0
     4a8:	2001      	movs	r0, #1
     4aa:	47a0      	blx	r4
	init_Filt(2,extFilter,filter);
     4ac:	2264      	movs	r2, #100	; 0x64
     4ae:	2100      	movs	r1, #0
     4b0:	2002      	movs	r0, #2
     4b2:	47a0      	blx	r4
	init_Filt(3,extFilter,filter);
     4b4:	2264      	movs	r2, #100	; 0x64
     4b6:	2100      	movs	r1, #0
     4b8:	2003      	movs	r0, #3
     4ba:	47a0      	blx	r4
	init_Filt(4,extFilter,filter);
     4bc:	2264      	movs	r2, #100	; 0x64
     4be:	2100      	movs	r1, #0
     4c0:	2004      	movs	r0, #4
     4c2:	47a0      	blx	r4
	init_Filt(5,extFilter,filter);
     4c4:	2264      	movs	r2, #100	; 0x64
     4c6:	2100      	movs	r1, #0
     4c8:	2005      	movs	r0, #5
     4ca:	47a0      	blx	r4
	
	
	
	InitDigOut(0,14);
     4cc:	210e      	movs	r1, #14
     4ce:	2000      	movs	r0, #0
     4d0:	4b1b      	ldr	r3, [pc, #108]	; (540 <main+0xe0>)
     4d2:	4798      	blx	r3
	InitDigIn(0,9);
     4d4:	2109      	movs	r1, #9
     4d6:	2000      	movs	r0, #0
     4d8:	4b1a      	ldr	r3, [pc, #104]	; (544 <main+0xe4>)
     4da:	4798      	blx	r3
	
	// Semaphore initialization
	distanceSemaphore = xSemaphoreCreateMutex();
     4dc:	2001      	movs	r0, #1
     4de:	4c1a      	ldr	r4, [pc, #104]	; (548 <main+0xe8>)
     4e0:	47a0      	blx	r4
     4e2:	6028      	str	r0, [r5, #0]
	access_myprintf = xSemaphoreCreateMutex();
     4e4:	2001      	movs	r0, #1
     4e6:	47a0      	blx	r4
     4e8:	6068      	str	r0, [r5, #4]
	
	
	//myprintf("\n%d\n",portTICK_PERIOD_MS);
	// Task creation
	// Priority 2 (Highest)
	xTaskCreate( recieveCANMessage, "recieveCANMessage", 512, NULL, 2, NULL );
     4ea:	2580      	movs	r5, #128	; 0x80
     4ec:	00ad      	lsls	r5, r5, #2
     4ee:	2600      	movs	r6, #0
     4f0:	9601      	str	r6, [sp, #4]
     4f2:	2302      	movs	r3, #2
     4f4:	9300      	str	r3, [sp, #0]
     4f6:	2300      	movs	r3, #0
     4f8:	002a      	movs	r2, r5
     4fa:	4914      	ldr	r1, [pc, #80]	; (54c <main+0xec>)
     4fc:	4814      	ldr	r0, [pc, #80]	; (550 <main+0xf0>)
     4fe:	4c15      	ldr	r4, [pc, #84]	; (554 <main+0xf4>)
     500:	47a0      	blx	r4
	// Priority 1 (Lowest - With no interrupts but preemption)
	xTaskCreate( sendBeepSignal, "sendBeepSignal", 512, NULL, 1, NULL );
     502:	9601      	str	r6, [sp, #4]
     504:	2301      	movs	r3, #1
     506:	9300      	str	r3, [sp, #0]
     508:	2300      	movs	r3, #0
     50a:	002a      	movs	r2, r5
     50c:	4912      	ldr	r1, [pc, #72]	; (558 <main+0xf8>)
     50e:	4813      	ldr	r0, [pc, #76]	; (55c <main+0xfc>)
     510:	47a0      	blx	r4
		
	/* Start the tasks and timer running. */
	vTaskStartScheduler();
     512:	4b13      	ldr	r3, [pc, #76]	; (560 <main+0x100>)
     514:	4798      	blx	r3
     516:	e7fe      	b.n	516 <main+0xb6>
     518:	000001fd 	.word	0x000001fd
     51c:	40000800 	.word	0x40000800
     520:	fffffcff 	.word	0xfffffcff
     524:	00002845 	.word	0x00002845
     528:	000027a9 	.word	0x000027a9
     52c:	000002dd 	.word	0x000002dd
     530:	20000460 	.word	0x20000460
     534:	00000be9 	.word	0x00000be9
     538:	00000a25 	.word	0x00000a25
     53c:	00000aa5 	.word	0x00000aa5
     540:	0000020d 	.word	0x0000020d
     544:	00000229 	.word	0x00000229
     548:	00001631 	.word	0x00001631
     54c:	00004ec8 	.word	0x00004ec8
     550:	00000249 	.word	0x00000249
     554:	00001bad 	.word	0x00001bad
     558:	00004edc 	.word	0x00004edc
     55c:	00000371 	.word	0x00000371
     560:	00001d81 	.word	0x00001d81

00000564 <mcp2515_reset>:


/******************* SIMPLE FUNCTIONS *******************/


void mcp2515_reset(void) {
     564:	b510      	push	{r4, lr}
        // Reset Instruction = 0xC0
        spiSS(device);
     566:	4c05      	ldr	r4, [pc, #20]	; (57c <mcp2515_reset+0x18>)
     568:	7820      	ldrb	r0, [r4, #0]
     56a:	4b05      	ldr	r3, [pc, #20]	; (580 <mcp2515_reset+0x1c>)
     56c:	4798      	blx	r3
        spiSend(MCP_RESET);
     56e:	20c0      	movs	r0, #192	; 0xc0
     570:	4b04      	ldr	r3, [pc, #16]	; (584 <mcp2515_reset+0x20>)
     572:	4798      	blx	r3
        spiSR(device);
     574:	7820      	ldrb	r0, [r4, #0]
     576:	4b04      	ldr	r3, [pc, #16]	; (588 <mcp2515_reset+0x24>)
     578:	4798      	blx	r3
}
     57a:	bd10      	pop	{r4, pc}
     57c:	20004482 	.word	0x20004482
     580:	000028e5 	.word	0x000028e5
     584:	000028bd 	.word	0x000028bd
     588:	00002929 	.word	0x00002929

0000058c <mcp2515_readRegister>:


uint8_t mcp2515_readRegister(const uint8_t address) {
     58c:	b570      	push	{r4, r5, r6, lr}
     58e:	0006      	movs	r6, r0
        uint8_t ret;
        spiSS(device);
     590:	4d08      	ldr	r5, [pc, #32]	; (5b4 <mcp2515_readRegister+0x28>)
     592:	7828      	ldrb	r0, [r5, #0]
     594:	4b08      	ldr	r3, [pc, #32]	; (5b8 <mcp2515_readRegister+0x2c>)
     596:	4798      	blx	r3
        spiSend(MCP_READ);
     598:	2003      	movs	r0, #3
     59a:	4c08      	ldr	r4, [pc, #32]	; (5bc <mcp2515_readRegister+0x30>)
     59c:	47a0      	blx	r4
        spiSend(address);
     59e:	0030      	movs	r0, r6
     5a0:	47a0      	blx	r4
        ret = spiSend(0x00);
     5a2:	2000      	movs	r0, #0
     5a4:	47a0      	blx	r4
     5a6:	0004      	movs	r4, r0
        spiSR(device);
     5a8:	7828      	ldrb	r0, [r5, #0]
     5aa:	4b05      	ldr	r3, [pc, #20]	; (5c0 <mcp2515_readRegister+0x34>)
     5ac:	4798      	blx	r3
        return ret;
}
     5ae:	0020      	movs	r0, r4
     5b0:	bd70      	pop	{r4, r5, r6, pc}
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	20004482 	.word	0x20004482
     5b8:	000028e5 	.word	0x000028e5
     5bc:	000028bd 	.word	0x000028bd
     5c0:	00002929 	.word	0x00002929

000005c4 <mcp2515_readRegisterS>:


void mcp2515_readRegisterS(const uint8_t address, uint8_t values[], const uint8_t n) {
     5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5c6:	0007      	movs	r7, r0
     5c8:	000e      	movs	r6, r1
     5ca:	0015      	movs	r5, r2
        uint8_t i;
        spiSS(device);
     5cc:	4b0e      	ldr	r3, [pc, #56]	; (608 <mcp2515_readRegisterS+0x44>)
     5ce:	7818      	ldrb	r0, [r3, #0]
     5d0:	4b0e      	ldr	r3, [pc, #56]	; (60c <mcp2515_readRegisterS+0x48>)
     5d2:	4798      	blx	r3
        spiSend(MCP_READ);
     5d4:	2003      	movs	r0, #3
     5d6:	4c0e      	ldr	r4, [pc, #56]	; (610 <mcp2515_readRegisterS+0x4c>)
     5d8:	47a0      	blx	r4
        spiSend(address);
     5da:	0038      	movs	r0, r7
     5dc:	47a0      	blx	r4
        // mcp2515 has auto-increment of address-pointer
        for (i=0; i<n && i<CAN_MAX_CHAR_IN_MESSAGE; i++) {
     5de:	2d00      	cmp	r5, #0
     5e0:	d00d      	beq.n	5fe <mcp2515_readRegisterS+0x3a>
     5e2:	0034      	movs	r4, r6
     5e4:	3d01      	subs	r5, #1
     5e6:	b2ed      	uxtb	r5, r5
     5e8:	1975      	adds	r5, r6, r5
     5ea:	3608      	adds	r6, #8
                values[i] = spiSend(0x00);
     5ec:	4f08      	ldr	r7, [pc, #32]	; (610 <mcp2515_readRegisterS+0x4c>)
     5ee:	2000      	movs	r0, #0
     5f0:	47b8      	blx	r7
     5f2:	7020      	strb	r0, [r4, #0]
        for (i=0; i<n && i<CAN_MAX_CHAR_IN_MESSAGE; i++) {
     5f4:	42ac      	cmp	r4, r5
     5f6:	d002      	beq.n	5fe <mcp2515_readRegisterS+0x3a>
     5f8:	3401      	adds	r4, #1
     5fa:	42b4      	cmp	r4, r6
     5fc:	d1f7      	bne.n	5ee <mcp2515_readRegisterS+0x2a>
        }
        spiSR(device);
     5fe:	4b02      	ldr	r3, [pc, #8]	; (608 <mcp2515_readRegisterS+0x44>)
     600:	7818      	ldrb	r0, [r3, #0]
     602:	4b04      	ldr	r3, [pc, #16]	; (614 <mcp2515_readRegisterS+0x50>)
     604:	4798      	blx	r3
}
     606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     608:	20004482 	.word	0x20004482
     60c:	000028e5 	.word	0x000028e5
     610:	000028bd 	.word	0x000028bd
     614:	00002929 	.word	0x00002929

00000618 <mcp2515_setRegister>:


void mcp2515_setRegister(const uint8_t address, const uint8_t value) {
     618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     61a:	0007      	movs	r7, r0
     61c:	000e      	movs	r6, r1
        spiSS(device);
     61e:	4d07      	ldr	r5, [pc, #28]	; (63c <mcp2515_setRegister+0x24>)
     620:	7828      	ldrb	r0, [r5, #0]
     622:	4b07      	ldr	r3, [pc, #28]	; (640 <mcp2515_setRegister+0x28>)
     624:	4798      	blx	r3
        spiSend(MCP_WRITE);
     626:	2002      	movs	r0, #2
     628:	4c06      	ldr	r4, [pc, #24]	; (644 <mcp2515_setRegister+0x2c>)
     62a:	47a0      	blx	r4
        spiSend(address);
     62c:	0038      	movs	r0, r7
     62e:	47a0      	blx	r4
        spiSend(value);
     630:	0030      	movs	r0, r6
     632:	47a0      	blx	r4
        spiSR(device);
     634:	7828      	ldrb	r0, [r5, #0]
     636:	4b04      	ldr	r3, [pc, #16]	; (648 <mcp2515_setRegister+0x30>)
     638:	4798      	blx	r3
}
     63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     63c:	20004482 	.word	0x20004482
     640:	000028e5 	.word	0x000028e5
     644:	000028bd 	.word	0x000028bd
     648:	00002929 	.word	0x00002929

0000064c <mcp2515_setRegisterS>:


void mcp2515_setRegisterS(const uint8_t address, const uint8_t values[], const uint8_t n) {
     64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     64e:	0007      	movs	r7, r0
     650:	000e      	movs	r6, r1
     652:	0015      	movs	r5, r2
        uint8_t i;
        spiSS(device);
     654:	4b0d      	ldr	r3, [pc, #52]	; (68c <mcp2515_setRegisterS+0x40>)
     656:	7818      	ldrb	r0, [r3, #0]
     658:	4b0d      	ldr	r3, [pc, #52]	; (690 <mcp2515_setRegisterS+0x44>)
     65a:	4798      	blx	r3
        spiSend(MCP_WRITE);
     65c:	2002      	movs	r0, #2
     65e:	4c0d      	ldr	r4, [pc, #52]	; (694 <mcp2515_setRegisterS+0x48>)
     660:	47a0      	blx	r4
        spiSend(address);
     662:	0038      	movs	r0, r7
     664:	47a0      	blx	r4
        for (i=0; i<n; i++)
     666:	2d00      	cmp	r5, #0
     668:	d00a      	beq.n	680 <mcp2515_setRegisterS+0x34>
     66a:	0034      	movs	r4, r6
     66c:	3d01      	subs	r5, #1
     66e:	b2ed      	uxtb	r5, r5
     670:	3501      	adds	r5, #1
     672:	1975      	adds	r5, r6, r5
        {
                spiSend(values[i]);
     674:	4e07      	ldr	r6, [pc, #28]	; (694 <mcp2515_setRegisterS+0x48>)
     676:	7820      	ldrb	r0, [r4, #0]
     678:	47b0      	blx	r6
     67a:	3401      	adds	r4, #1
        for (i=0; i<n; i++)
     67c:	42ac      	cmp	r4, r5
     67e:	d1fa      	bne.n	676 <mcp2515_setRegisterS+0x2a>
        }
        spiSR(device);
     680:	4b02      	ldr	r3, [pc, #8]	; (68c <mcp2515_setRegisterS+0x40>)
     682:	7818      	ldrb	r0, [r3, #0]
     684:	4b04      	ldr	r3, [pc, #16]	; (698 <mcp2515_setRegisterS+0x4c>)
     686:	4798      	blx	r3
}
     688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	20004482 	.word	0x20004482
     690:	000028e5 	.word	0x000028e5
     694:	000028bd 	.word	0x000028bd
     698:	00002929 	.word	0x00002929

0000069c <mcp2515_modifyRegister>:


void mcp2515_modifyRegister(const uint8_t address, const uint8_t mask, const uint8_t data) {
     69c:	b5f0      	push	{r4, r5, r6, r7, lr}
     69e:	b083      	sub	sp, #12
     6a0:	0007      	movs	r7, r0
     6a2:	000e      	movs	r6, r1
     6a4:	9201      	str	r2, [sp, #4]
        spiSS(device);				// Sets CS to 0 to prepare for writing (PA18 -> CS)
     6a6:	4d09      	ldr	r5, [pc, #36]	; (6cc <mcp2515_modifyRegister+0x30>)
     6a8:	7828      	ldrb	r0, [r5, #0]
     6aa:	4b09      	ldr	r3, [pc, #36]	; (6d0 <mcp2515_modifyRegister+0x34>)
     6ac:	4798      	blx	r3
        spiSend(MCP_BITMOD);		// Sends bit modify instruction (0x05)
     6ae:	2005      	movs	r0, #5
     6b0:	4c08      	ldr	r4, [pc, #32]	; (6d4 <mcp2515_modifyRegister+0x38>)
     6b2:	47a0      	blx	r4
        spiSend(address);			// Sends a byte indicating the address that wants to be modified
     6b4:	0038      	movs	r0, r7
     6b6:	47a0      	blx	r4
        spiSend(mask);				// Sends mask for the data to be applied
     6b8:	0030      	movs	r0, r6
     6ba:	47a0      	blx	r4
        spiSend(data);				// Sends the data to be masked and written into the register on address
     6bc:	9801      	ldr	r0, [sp, #4]
     6be:	47a0      	blx	r4
        spiSR(device);				// Sets CS to 1 to stop writing (PA18 -> CS)
     6c0:	7828      	ldrb	r0, [r5, #0]
     6c2:	4b05      	ldr	r3, [pc, #20]	; (6d8 <mcp2515_modifyRegister+0x3c>)
     6c4:	4798      	blx	r3
}
     6c6:	b003      	add	sp, #12
     6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	20004482 	.word	0x20004482
     6d0:	000028e5 	.word	0x000028e5
     6d4:	000028bd 	.word	0x000028bd
     6d8:	00002929 	.word	0x00002929

000006dc <mcp2515_readStatus>:


uint8_t mcp2515_readStatus(void) {
     6dc:	b570      	push	{r4, r5, r6, lr}
        uint8_t ret;
        spiSS(device);				// Sets CS to 0 to prepare for reading (PA18 -> CS)
     6de:	4d08      	ldr	r5, [pc, #32]	; (700 <mcp2515_readStatus+0x24>)
     6e0:	7828      	ldrb	r0, [r5, #0]
     6e2:	4b08      	ldr	r3, [pc, #32]	; (704 <mcp2515_readStatus+0x28>)
     6e4:	4798      	blx	r3
        spiSend(MCP_READ_STATUS);	// Sends read instruction
     6e6:	20a0      	movs	r0, #160	; 0xa0
     6e8:	4c07      	ldr	r4, [pc, #28]	; (708 <mcp2515_readStatus+0x2c>)
     6ea:	47a0      	blx	r4
        ret = spiSend(0x00);		// Sends one byte (don't care) to read one byte (status register)
     6ec:	2000      	movs	r0, #0
     6ee:	47a0      	blx	r4
     6f0:	0006      	movs	r6, r0
		spiSend(0x00);				// Repeat data out
     6f2:	2000      	movs	r0, #0
     6f4:	47a0      	blx	r4
        spiSR(device);				// Sets CS to 1 to stop reading (PA18 -> CS)
     6f6:	7828      	ldrb	r0, [r5, #0]
     6f8:	4b04      	ldr	r3, [pc, #16]	; (70c <mcp2515_readStatus+0x30>)
     6fa:	4798      	blx	r3
        return ret;					// Returns the value read through SPI (status register)
}
     6fc:	0030      	movs	r0, r6
     6fe:	bd70      	pop	{r4, r5, r6, pc}
     700:	20004482 	.word	0x20004482
     704:	000028e5 	.word	0x000028e5
     708:	000028bd 	.word	0x000028bd
     70c:	00002929 	.word	0x00002929

00000710 <mcp2515_setCANCTRL_Mode>:


/******************** INIT SEQUENCES ********************/


uint8_t mcp2515_setCANCTRL_Mode(const uint8_t newmode) {
     710:	b510      	push	{r4, lr}
     712:	0004      	movs	r4, r0
        uint8_t i;


        mcp2515_modifyRegister(MCP_CANCTRL, MODE_MASK, newmode);
     714:	0002      	movs	r2, r0
     716:	21e0      	movs	r1, #224	; 0xe0
     718:	200f      	movs	r0, #15
     71a:	4b06      	ldr	r3, [pc, #24]	; (734 <mcp2515_setCANCTRL_Mode+0x24>)
     71c:	4798      	blx	r3


        i = mcp2515_readRegister(MCP_CANCTRL);
     71e:	200f      	movs	r0, #15
     720:	4b05      	ldr	r3, [pc, #20]	; (738 <mcp2515_setCANCTRL_Mode+0x28>)
     722:	4798      	blx	r3
        i &= MODE_MASK;
     724:	23e0      	movs	r3, #224	; 0xe0


        if ( i == newmode )
     726:	4018      	ands	r0, r3
     728:	1b00      	subs	r0, r0, r4
     72a:	1e43      	subs	r3, r0, #1
     72c:	4198      	sbcs	r0, r3
     72e:	b2c0      	uxtb	r0, r0
        {
                return MCP2515_OK;
        }
        return MCP2515_FAIL;
}
     730:	bd10      	pop	{r4, pc}
     732:	46c0      	nop			; (mov r8, r8)
     734:	0000069d 	.word	0x0000069d
     738:	0000058d 	.word	0x0000058d

0000073c <mcp2515_configRate>:


uint8_t mcp2515_configRate(const uint8_t canSpeed) {
     73c:	b570      	push	{r4, r5, r6, lr}
        uint8_t set, cfg1, cfg2, cfg3;
        set = 1;
        switch (canSpeed)
     73e:	2810      	cmp	r0, #16
     740:	d845      	bhi.n	7ce <mcp2515_configRate+0x92>
     742:	0080      	lsls	r0, r0, #2
     744:	4b27      	ldr	r3, [pc, #156]	; (7e4 <mcp2515_configRate+0xa8>)
     746:	581b      	ldr	r3, [r3, r0]
     748:	469f      	mov	pc, r3


                case (CAN_20KBPS):
                cfg1 = MCP_16MHz_20kBPS_CFG1;
                cfg2 = MCP_16MHz_20kBPS_CFG2;
                cfg3 = MCP_16MHz_20kBPS_CFG3;
     74a:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_20kBPS_CFG2;
     74c:	25ff      	movs	r5, #255	; 0xff
                cfg1 = MCP_16MHz_20kBPS_CFG1;
     74e:	210f      	movs	r1, #15
     750:	e032      	b.n	7b8 <mcp2515_configRate+0x7c>


                case (CAN_33KBPS):
                cfg1 = MCP_16MHz_33kBPS_CFG1;
                cfg2 = MCP_16MHz_33kBPS_CFG2;
                cfg3 = MCP_16MHz_33kBPS_CFG3;
     752:	2607      	movs	r6, #7
                cfg2 = MCP_16MHz_33kBPS_CFG2;
     754:	25be      	movs	r5, #190	; 0xbe
                cfg1 = MCP_16MHz_33kBPS_CFG1;
     756:	2109      	movs	r1, #9
                break;
     758:	e02e      	b.n	7b8 <mcp2515_configRate+0x7c>


                case (CAN_40KBPS):
                cfg1 = MCP_16MHz_40kBPS_CFG1;
                cfg2 = MCP_16MHz_40kBPS_CFG2;
                cfg3 = MCP_16MHz_40kBPS_CFG3;
     75a:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_40kBPS_CFG2;
     75c:	25ff      	movs	r5, #255	; 0xff
                cfg1 = MCP_16MHz_40kBPS_CFG1;
     75e:	2107      	movs	r1, #7
                break;
     760:	e02a      	b.n	7b8 <mcp2515_configRate+0x7c>


                case (CAN_50KBPS):
                cfg1 = MCP_16MHz_50kBPS_CFG1;
                cfg2 = MCP_16MHz_50kBPS_CFG2;
                cfg3 = MCP_16MHz_50kBPS_CFG3;
     762:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_50kBPS_CFG2;
     764:	25fa      	movs	r5, #250	; 0xfa
                cfg1 = MCP_16MHz_50kBPS_CFG1;
     766:	2107      	movs	r1, #7
                break;
     768:	e026      	b.n	7b8 <mcp2515_configRate+0x7c>


                case (CAN_80KBPS):
                cfg1 = MCP_16MHz_80kBPS_CFG1;
                cfg2 = MCP_16MHz_80kBPS_CFG2;
                cfg3 = MCP_16MHz_80kBPS_CFG3;
     76a:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_80kBPS_CFG2;
     76c:	25ff      	movs	r5, #255	; 0xff
                cfg1 = MCP_16MHz_80kBPS_CFG1;
     76e:	2103      	movs	r1, #3
                break;
     770:	e022      	b.n	7b8 <mcp2515_configRate+0x7c>


                case (CAN_83K3BPS):
                cfg1 = MCP_16MHz_83k3BPS_CFG1;
                cfg2 = MCP_16MHz_83k3BPS_CFG2;
                cfg3 = MCP_16MHz_83k3BPS_CFG3;
     772:	2607      	movs	r6, #7
                cfg2 = MCP_16MHz_83k3BPS_CFG2;
     774:	25be      	movs	r5, #190	; 0xbe
                cfg1 = MCP_16MHz_83k3BPS_CFG1;
     776:	2103      	movs	r1, #3
                break;
     778:	e01e      	b.n	7b8 <mcp2515_configRate+0x7c>


                case (CAN_95KBPS):
                cfg1 = MCP_16MHz_95kBPS_CFG1;
                cfg2 = MCP_16MHz_95kBPS_CFG2;
                cfg3 = MCP_16MHz_95kBPS_CFG3;
     77a:	2607      	movs	r6, #7
                cfg2 = MCP_16MHz_95kBPS_CFG2;
     77c:	25ad      	movs	r5, #173	; 0xad
                cfg1 = MCP_16MHz_95kBPS_CFG1;
     77e:	2103      	movs	r1, #3
                break;
     780:	e01a      	b.n	7b8 <mcp2515_configRate+0x7c>


                case (CAN_100KBPS):                                             /* 100KBPS                  */
                cfg1 = MCP_16MHz_100kBPS_CFG1;
                cfg2 = MCP_16MHz_100kBPS_CFG2;
                cfg3 = MCP_16MHz_100kBPS_CFG3;
     782:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_100kBPS_CFG2;
     784:	25fa      	movs	r5, #250	; 0xfa
                cfg1 = MCP_16MHz_100kBPS_CFG1;
     786:	2103      	movs	r1, #3
                break;
     788:	e016      	b.n	7b8 <mcp2515_configRate+0x7c>


                case (CAN_125KBPS):
                cfg1 = MCP_16MHz_125kBPS_CFG1;
                cfg2 = MCP_16MHz_125kBPS_CFG2;
                cfg3 = MCP_16MHz_125kBPS_CFG3;
     78a:	2686      	movs	r6, #134	; 0x86
                cfg2 = MCP_16MHz_125kBPS_CFG2;
     78c:	25f0      	movs	r5, #240	; 0xf0
                cfg1 = MCP_16MHz_125kBPS_CFG1;
     78e:	2103      	movs	r1, #3
                break;
     790:	e012      	b.n	7b8 <mcp2515_configRate+0x7c>


                case (CAN_200KBPS):
                cfg1 = MCP_16MHz_200kBPS_CFG1;
                cfg2 = MCP_16MHz_200kBPS_CFG2;
                cfg3 = MCP_16MHz_200kBPS_CFG3;
     792:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_200kBPS_CFG2;
     794:	25fa      	movs	r5, #250	; 0xfa
                cfg1 = MCP_16MHz_200kBPS_CFG1;
     796:	2101      	movs	r1, #1
                break;
     798:	e00e      	b.n	7b8 <mcp2515_configRate+0x7c>


                case (CAN_250KBPS):
                cfg1 = MCP_16MHz_250kBPS_CFG1;
                cfg2 = MCP_16MHz_250kBPS_CFG2;
                cfg3 = MCP_16MHz_250kBPS_CFG3;
     79a:	2685      	movs	r6, #133	; 0x85
                cfg2 = MCP_16MHz_250kBPS_CFG2;
     79c:	25f1      	movs	r5, #241	; 0xf1
                cfg1 = MCP_16MHz_250kBPS_CFG1;
     79e:	2141      	movs	r1, #65	; 0x41
                break;
     7a0:	e00a      	b.n	7b8 <mcp2515_configRate+0x7c>


                case (CAN_500KBPS):
                cfg1 = MCP_16MHz_500kBPS_CFG1;
                cfg2 = MCP_16MHz_500kBPS_CFG2;
                cfg3 = MCP_16MHz_500kBPS_CFG3;
     7a2:	2686      	movs	r6, #134	; 0x86
                cfg2 = MCP_16MHz_500kBPS_CFG2;
     7a4:	25f0      	movs	r5, #240	; 0xf0
                cfg1 = MCP_16MHz_500kBPS_CFG1;
     7a6:	2100      	movs	r1, #0
                break;
     7a8:	e006      	b.n	7b8 <mcp2515_configRate+0x7c>
                
                case (CAN_1000KBPS):
                cfg1 = MCP_16MHz_1000kBPS_CFG1;
                cfg2 = MCP_16MHz_1000kBPS_CFG2;
                cfg3 = MCP_16MHz_1000kBPS_CFG3;
     7aa:	2682      	movs	r6, #130	; 0x82
                cfg2 = MCP_16MHz_1000kBPS_CFG2;
     7ac:	25d0      	movs	r5, #208	; 0xd0
                cfg1 = MCP_16MHz_1000kBPS_CFG1;
     7ae:	2100      	movs	r1, #0
                break;
     7b0:	e002      	b.n	7b8 <mcp2515_configRate+0x7c>
                cfg3 = MCP_16MHz_5kBPS_CFG3;
     7b2:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_5kBPS_CFG2;
     7b4:	25ff      	movs	r5, #255	; 0xff
                cfg1 = MCP_16MHz_5kBPS_CFG1;
     7b6:	213f      	movs	r1, #63	; 0x3f
                break;
        }


        if (set) {
                mcp2515_setRegister(MCP_CNF1, cfg1);
     7b8:	202a      	movs	r0, #42	; 0x2a
     7ba:	4c0b      	ldr	r4, [pc, #44]	; (7e8 <mcp2515_configRate+0xac>)
     7bc:	47a0      	blx	r4
                mcp2515_setRegister(MCP_CNF2, cfg2);
     7be:	0029      	movs	r1, r5
     7c0:	2029      	movs	r0, #41	; 0x29
     7c2:	47a0      	blx	r4
                mcp2515_setRegister(MCP_CNF3, cfg3);
     7c4:	0031      	movs	r1, r6
     7c6:	2028      	movs	r0, #40	; 0x28
     7c8:	47a0      	blx	r4
                return MCP2515_OK;
     7ca:	2000      	movs	r0, #0
        }
        else {
                return MCP2515_FAIL;
        }
}
     7cc:	bd70      	pop	{r4, r5, r6, pc}
                return MCP2515_FAIL;
     7ce:	2001      	movs	r0, #1
     7d0:	e7fc      	b.n	7cc <mcp2515_configRate+0x90>
                cfg3 = MCP_16MHz_10kBPS_CFG3;
     7d2:	2687      	movs	r6, #135	; 0x87
                cfg2 = MCP_16MHz_10kBPS_CFG2;
     7d4:	25ff      	movs	r5, #255	; 0xff
                cfg1 = MCP_16MHz_10kBPS_CFG1;
     7d6:	211f      	movs	r1, #31
     7d8:	e7ee      	b.n	7b8 <mcp2515_configRate+0x7c>
                cfg3 = MCP_16MHz_31k25BPS_CFG3;
     7da:	2685      	movs	r6, #133	; 0x85
                cfg2 = MCP_16MHz_31k25BPS_CFG2;
     7dc:	25f1      	movs	r5, #241	; 0xf1
                cfg1 = MCP_16MHz_31k25BPS_CFG1;
     7de:	210f      	movs	r1, #15
     7e0:	e7ea      	b.n	7b8 <mcp2515_configRate+0x7c>
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	00004eec 	.word	0x00004eec
     7e8:	00000619 	.word	0x00000619

000007ec <mcp2515_write_mf>:
                }
}


void mcp2515_write_mf( const uint8_t mcp_addr, const uint8_t ext, const uint32_t id )
{
     7ec:	b530      	push	{r4, r5, lr}
     7ee:	b083      	sub	sp, #12
        uint16_t canid;
        uint8_t tbufdata[4];
        canid = (uint16_t)(id & 0x0FFFF);
     7f0:	b293      	uxth	r3, r2


        if ( ext == 1)
     7f2:	2901      	cmp	r1, #1
     7f4:	d013      	beq.n	81e <mcp2515_write_mf+0x32>
                tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
                tbufdata[MCP_SIDH] = (uint8_t) (canid >> 5 );
        }
        else
        {
                tbufdata[MCP_EID0] = (uint8_t) (canid & 0xFF);
     7f6:	a901      	add	r1, sp, #4
     7f8:	70ca      	strb	r2, [r1, #3]
                tbufdata[MCP_EID8] = (uint8_t) (canid >> 8);
     7fa:	0a1b      	lsrs	r3, r3, #8
     7fc:	708b      	strb	r3, [r1, #2]
                canid = (uint16_t)(id >> 16);
     7fe:	0c12      	lsrs	r2, r2, #16
                tbufdata[MCP_SIDL] = (uint8_t) ((canid & 0x07) << 5);
     800:	0153      	lsls	r3, r2, #5
     802:	704b      	strb	r3, [r1, #1]
                tbufdata[MCP_SIDH] = (uint8_t) (canid >> 3 );
     804:	08d2      	lsrs	r2, r2, #3
     806:	700a      	strb	r2, [r1, #0]
        }
        
        mcp2515_setRegisterS( mcp_addr, tbufdata, 4 );
     808:	2204      	movs	r2, #4
     80a:	a901      	add	r1, sp, #4
     80c:	4b0d      	ldr	r3, [pc, #52]	; (844 <mcp2515_write_mf+0x58>)
     80e:	4798      	blx	r3
     810:	23fa      	movs	r3, #250	; 0xfa
     812:	005b      	lsls	r3, r3, #1
     814:	3b01      	subs	r3, #1
        for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     816:	2b00      	cmp	r3, #0
     818:	d1fc      	bne.n	814 <mcp2515_write_mf+0x28>
        {
                ;//this works like a NOPE instruction
        }
}
     81a:	b003      	add	sp, #12
     81c:	bd30      	pop	{r4, r5, pc}
                tbufdata[MCP_EID0] = (uint8_t) (canid & 0xFF);
     81e:	a901      	add	r1, sp, #4
     820:	70ca      	strb	r2, [r1, #3]
                tbufdata[MCP_EID8] = (uint8_t) (canid >> 8);
     822:	0a1b      	lsrs	r3, r3, #8
     824:	708b      	strb	r3, [r1, #2]
                canid = (uint16_t)(id >> 16);
     826:	0c12      	lsrs	r2, r2, #16
                tbufdata[MCP_SIDL] = (uint8_t) (canid & 0x03);
     828:	b2d4      	uxtb	r4, r2
     82a:	2303      	movs	r3, #3
     82c:	4023      	ands	r3, r4
                tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
     82e:	2508      	movs	r5, #8
     830:	432b      	orrs	r3, r5
                tbufdata[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
     832:	00e4      	lsls	r4, r4, #3
     834:	251f      	movs	r5, #31
     836:	43ac      	bics	r4, r5
                tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
     838:	4323      	orrs	r3, r4
     83a:	704b      	strb	r3, [r1, #1]
                tbufdata[MCP_SIDH] = (uint8_t) (canid >> 5 );
     83c:	0952      	lsrs	r2, r2, #5
     83e:	700a      	strb	r2, [r1, #0]
     840:	e7e2      	b.n	808 <mcp2515_write_mf+0x1c>
     842:	46c0      	nop			; (mov r8, r8)
     844:	0000064d 	.word	0x0000064d

00000848 <mcp2515_initCANBuffers>:
void mcp2515_initCANBuffers(void) {
     848:	b570      	push	{r4, r5, r6, lr}
        mcp2515_write_mf(MCP_RXM0SIDH, ext, ulMask);        /*Set both masks to 0           */
     84a:	2200      	movs	r2, #0
     84c:	2101      	movs	r1, #1
     84e:	2020      	movs	r0, #32
     850:	4c1c      	ldr	r4, [pc, #112]	; (8c4 <mcp2515_initCANBuffers+0x7c>)
     852:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXM1SIDH, ext, ulMask);        /*Mask register ignores ext bit */
     854:	2200      	movs	r2, #0
     856:	2101      	movs	r1, #1
     858:	2024      	movs	r0, #36	; 0x24
     85a:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXF0SIDH, ext, ulFilt);        /* RXB0: extended               */
     85c:	2200      	movs	r2, #0
     85e:	2101      	movs	r1, #1
     860:	2000      	movs	r0, #0
     862:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXF1SIDH, std, ulFilt);        /* RXB1: standard               */
     864:	2200      	movs	r2, #0
     866:	2100      	movs	r1, #0
     868:	2004      	movs	r0, #4
     86a:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXF2SIDH, ext, ulFilt);        /* RXB2: extended               */
     86c:	2200      	movs	r2, #0
     86e:	2101      	movs	r1, #1
     870:	2008      	movs	r0, #8
     872:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXF3SIDH, std, ulFilt);        /* RXB3: standard               */
     874:	2200      	movs	r2, #0
     876:	2100      	movs	r1, #0
     878:	2010      	movs	r0, #16
     87a:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXF4SIDH, ext, ulFilt);
     87c:	2200      	movs	r2, #0
     87e:	2101      	movs	r1, #1
     880:	2014      	movs	r0, #20
     882:	47a0      	blx	r4
        mcp2515_write_mf(MCP_RXF5SIDH, std, ulFilt);
     884:	2200      	movs	r2, #0
     886:	2100      	movs	r1, #0
     888:	2018      	movs	r0, #24
     88a:	47a0      	blx	r4
        a1 = MCP_TXB0CTRL;
     88c:	2430      	movs	r4, #48	; 0x30
                mcp2515_setRegister(a1, 0);
     88e:	4d0e      	ldr	r5, [pc, #56]	; (8c8 <mcp2515_initCANBuffers+0x80>)
     890:	2100      	movs	r1, #0
     892:	0020      	movs	r0, r4
     894:	47a8      	blx	r5
                mcp2515_setRegister(a2, 0);
     896:	0020      	movs	r0, r4
     898:	3010      	adds	r0, #16
     89a:	b2c0      	uxtb	r0, r0
     89c:	2100      	movs	r1, #0
     89e:	47a8      	blx	r5
                mcp2515_setRegister(a3, 0);
     8a0:	0020      	movs	r0, r4
     8a2:	3020      	adds	r0, #32
     8a4:	b2c0      	uxtb	r0, r0
     8a6:	2100      	movs	r1, #0
     8a8:	47a8      	blx	r5
                a1++;
     8aa:	3401      	adds	r4, #1
     8ac:	b2e4      	uxtb	r4, r4
        for (i = 0; i < 14; i++) {                         /* in-buffer loop               */
     8ae:	2c3e      	cmp	r4, #62	; 0x3e
     8b0:	d1ee      	bne.n	890 <mcp2515_initCANBuffers+0x48>
        mcp2515_setRegister(MCP_RXB0CTRL, 0);
     8b2:	2100      	movs	r1, #0
     8b4:	2060      	movs	r0, #96	; 0x60
     8b6:	4c04      	ldr	r4, [pc, #16]	; (8c8 <mcp2515_initCANBuffers+0x80>)
     8b8:	47a0      	blx	r4
        mcp2515_setRegister(MCP_RXB1CTRL, 0);
     8ba:	2100      	movs	r1, #0
     8bc:	2070      	movs	r0, #112	; 0x70
     8be:	47a0      	blx	r4
}
     8c0:	bd70      	pop	{r4, r5, r6, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	000007ed 	.word	0x000007ed
     8c8:	00000619 	.word	0x00000619

000008cc <mcp2515_init>:
uint8_t mcp2515_init(const uint8_t canSpeed) {            /* mcp2515init                  */
     8cc:	b570      	push	{r4, r5, r6, lr}
     8ce:	0005      	movs	r5, r0
        mcp2515_reset();
     8d0:	4b21      	ldr	r3, [pc, #132]	; (958 <mcp2515_init+0x8c>)
     8d2:	4798      	blx	r3
     8d4:	4b21      	ldr	r3, [pc, #132]	; (95c <mcp2515_init+0x90>)
     8d6:	3b01      	subs	r3, #1
        for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     8d8:	2b00      	cmp	r3, #0
     8da:	d1fc      	bne.n	8d6 <mcp2515_init+0xa>
        res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
     8dc:	2080      	movs	r0, #128	; 0x80
     8de:	4b20      	ldr	r3, [pc, #128]	; (960 <mcp2515_init+0x94>)
     8e0:	4798      	blx	r3
     8e2:	1e04      	subs	r4, r0, #0
        if(res > 0)
     8e4:	d006      	beq.n	8f4 <mcp2515_init+0x28>
     8e6:	23fa      	movs	r3, #250	; 0xfa
     8e8:	005b      	lsls	r3, r3, #1
     8ea:	3b01      	subs	r3, #1
                for(int aux=0;aux<500;aux++) // We need to wait about X microsec to let it load
     8ec:	2b00      	cmp	r3, #0
     8ee:	d1fc      	bne.n	8ea <mcp2515_init+0x1e>
}
     8f0:	0020      	movs	r0, r4
     8f2:	bd70      	pop	{r4, r5, r6, pc}
     8f4:	23fa      	movs	r3, #250	; 0xfa
     8f6:	005b      	lsls	r3, r3, #1
     8f8:	3b01      	subs	r3, #1
        for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     8fa:	2b00      	cmp	r3, #0
     8fc:	d1fc      	bne.n	8f8 <mcp2515_init+0x2c>
        if(mcp2515_configRate(canSpeed))
     8fe:	0028      	movs	r0, r5
     900:	4b18      	ldr	r3, [pc, #96]	; (964 <mcp2515_init+0x98>)
     902:	4798      	blx	r3
     904:	2800      	cmp	r0, #0
     906:	d004      	beq.n	912 <mcp2515_init+0x46>
     908:	4b14      	ldr	r3, [pc, #80]	; (95c <mcp2515_init+0x90>)
     90a:	3b01      	subs	r3, #1
                for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     90c:	2b00      	cmp	r3, #0
     90e:	d1fc      	bne.n	90a <mcp2515_init+0x3e>
     910:	e7ee      	b.n	8f0 <mcp2515_init+0x24>
     912:	4b12      	ldr	r3, [pc, #72]	; (95c <mcp2515_init+0x90>)
     914:	3b01      	subs	r3, #1
        for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     916:	2b00      	cmp	r3, #0
     918:	d1fc      	bne.n	914 <mcp2515_init+0x48>
                mcp2515_initCANBuffers();
     91a:	4b13      	ldr	r3, [pc, #76]	; (968 <mcp2515_init+0x9c>)
     91c:	4798      	blx	r3
                mcp2515_setRegister(MCP_CANINTE, MCP_RX0IF | MCP_RX1IF);
     91e:	2103      	movs	r1, #3
     920:	202b      	movs	r0, #43	; 0x2b
     922:	4b12      	ldr	r3, [pc, #72]	; (96c <mcp2515_init+0xa0>)
     924:	4798      	blx	r3
                mcp2515_modifyRegister(MCP_RXB0CTRL, MCP_RXB_RX_MASK | MCP_RXB_BUKT_MASK, MCP_RXB_RX_STDEXT | MCP_RXB_BUKT_MASK);
     926:	2204      	movs	r2, #4
     928:	2164      	movs	r1, #100	; 0x64
     92a:	2060      	movs	r0, #96	; 0x60
     92c:	4c10      	ldr	r4, [pc, #64]	; (970 <mcp2515_init+0xa4>)
     92e:	47a0      	blx	r4
                mcp2515_modifyRegister(MCP_RXB1CTRL, MCP_RXB_RX_MASK, MCP_RXB_RX_STDEXT);
     930:	2200      	movs	r2, #0
     932:	2160      	movs	r1, #96	; 0x60
     934:	2070      	movs	r0, #112	; 0x70
     936:	47a0      	blx	r4
                res = mcp2515_setCANCTRL_Mode(MODE_NORMAL);
     938:	2000      	movs	r0, #0
     93a:	4b09      	ldr	r3, [pc, #36]	; (960 <mcp2515_init+0x94>)
     93c:	4798      	blx	r3
     93e:	1e04      	subs	r4, r0, #0
                if(res)
     940:	d004      	beq.n	94c <mcp2515_init+0x80>
     942:	4b06      	ldr	r3, [pc, #24]	; (95c <mcp2515_init+0x90>)
     944:	3b01      	subs	r3, #1
                        for(int aux=0;aux<1500;aux++) 
     946:	2b00      	cmp	r3, #0
     948:	d1fc      	bne.n	944 <mcp2515_init+0x78>
     94a:	e7d1      	b.n	8f0 <mcp2515_init+0x24>
     94c:	4b03      	ldr	r3, [pc, #12]	; (95c <mcp2515_init+0x90>)
     94e:	3b01      	subs	r3, #1
                for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     950:	2b00      	cmp	r3, #0
     952:	d1fc      	bne.n	94e <mcp2515_init+0x82>
     954:	e7cc      	b.n	8f0 <mcp2515_init+0x24>
     956:	46c0      	nop			; (mov r8, r8)
     958:	00000565 	.word	0x00000565
     95c:	000005dc 	.word	0x000005dc
     960:	00000711 	.word	0x00000711
     964:	0000073d 	.word	0x0000073d
     968:	00000849 	.word	0x00000849
     96c:	00000619 	.word	0x00000619
     970:	0000069d 	.word	0x0000069d

00000974 <mcp2515_read_id>:





void mcp2515_read_id(const uint8_t mcp_addr, uint8_t* ext, uint16_t* id) {
     974:	b570      	push	{r4, r5, r6, lr}
     976:	b082      	sub	sp, #8
     978:	000d      	movs	r5, r1
     97a:	0014      	movs	r4, r2
        uint8_t tbufdata[4];


        *ext = 0;
     97c:	2300      	movs	r3, #0
     97e:	700b      	strb	r3, [r1, #0]
        *id = 0;
     980:	8013      	strh	r3, [r2, #0]


        mcp2515_readRegisterS(mcp_addr, tbufdata, 4);
     982:	ae01      	add	r6, sp, #4
     984:	2204      	movs	r2, #4
     986:	0031      	movs	r1, r6
     988:	4b0c      	ldr	r3, [pc, #48]	; (9bc <mcp2515_read_id+0x48>)
     98a:	4798      	blx	r3


        *id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
     98c:	7870      	ldrb	r0, [r6, #1]
     98e:	7831      	ldrb	r1, [r6, #0]
     990:	00c9      	lsls	r1, r1, #3
     992:	0943      	lsrs	r3, r0, #5
     994:	185b      	adds	r3, r3, r1
     996:	8023      	strh	r3, [r4, #0]


        if ((tbufdata[MCP_SIDL] & MCP_TXB_EXIDE_M) ==  MCP_TXB_EXIDE_M)
     998:	0702      	lsls	r2, r0, #28
     99a:	d50d      	bpl.n	9b8 <mcp2515_read_id+0x44>
        {
                /* extended id                  */
                *id = (*id<<2) + (tbufdata[MCP_SIDL] & 0x03);
     99c:	009b      	lsls	r3, r3, #2
     99e:	2203      	movs	r2, #3
     9a0:	4002      	ands	r2, r0
     9a2:	18d3      	adds	r3, r2, r3
                *id = (*id<<8) + tbufdata[MCP_EID8];
     9a4:	021b      	lsls	r3, r3, #8
     9a6:	a901      	add	r1, sp, #4
     9a8:	788a      	ldrb	r2, [r1, #2]
     9aa:	18d3      	adds	r3, r2, r3
                *id = (*id<<8) + tbufdata[MCP_EID0];
     9ac:	021b      	lsls	r3, r3, #8
     9ae:	78ca      	ldrb	r2, [r1, #3]
     9b0:	18d3      	adds	r3, r2, r3
     9b2:	8023      	strh	r3, [r4, #0]
                *ext = 1;
     9b4:	2301      	movs	r3, #1
     9b6:	702b      	strb	r3, [r5, #0]
        }
}
     9b8:	b002      	add	sp, #8
     9ba:	bd70      	pop	{r4, r5, r6, pc}
     9bc:	000005c5 	.word	0x000005c5

000009c0 <mcp2515_read_canMsg>:
        mcp2515_setRegister((mcp_addr+4), m_nDlc);          /* write the RTR and DLC        */
        mcp2515_write_id(mcp_addr, m_nExtFlg, m_nID);       /* write CAN id                 */
}


void mcp2515_read_canMsg(const uint8_t buffer_sidh_addr) { /* read can msg                 */
     9c0:	b570      	push	{r4, r5, r6, lr}
     9c2:	0004      	movs	r4, r0


        mcp_addr = buffer_sidh_addr;


        mcp2515_read_id(mcp_addr, &m_nExtFlg, &m_nID);
     9c4:	4a0f      	ldr	r2, [pc, #60]	; (a04 <mcp2515_read_canMsg+0x44>)
     9c6:	4910      	ldr	r1, [pc, #64]	; (a08 <mcp2515_read_canMsg+0x48>)
     9c8:	4b10      	ldr	r3, [pc, #64]	; (a0c <mcp2515_read_canMsg+0x4c>)
     9ca:	4798      	blx	r3


        ctrl = mcp2515_readRegister(mcp_addr-1);
     9cc:	1e60      	subs	r0, r4, #1
     9ce:	b2c0      	uxtb	r0, r0
     9d0:	4d0f      	ldr	r5, [pc, #60]	; (a10 <mcp2515_read_canMsg+0x50>)
     9d2:	47a8      	blx	r5
     9d4:	0006      	movs	r6, r0
        m_nDlc = mcp2515_readRegister(mcp_addr+4);
     9d6:	1d20      	adds	r0, r4, #4
     9d8:	b2c0      	uxtb	r0, r0
     9da:	47a8      	blx	r5


        if ((ctrl & 0x08)) {
     9dc:	0733      	lsls	r3, r6, #28
     9de:	d40c      	bmi.n	9fa <mcp2515_read_canMsg+0x3a>
                m_nRtr = 1;
        }
        else {
                m_nRtr = 0;
     9e0:	2200      	movs	r2, #0
     9e2:	4b0c      	ldr	r3, [pc, #48]	; (a14 <mcp2515_read_canMsg+0x54>)
     9e4:	701a      	strb	r2, [r3, #0]
        }


        m_nDlc &= MCP_DLC_MASK;
     9e6:	220f      	movs	r2, #15
     9e8:	4002      	ands	r2, r0
     9ea:	4b0b      	ldr	r3, [pc, #44]	; (a18 <mcp2515_read_canMsg+0x58>)
     9ec:	701a      	strb	r2, [r3, #0]
        mcp2515_readRegisterS(mcp_addr+5, &(m_nDta[0]), m_nDlc);
     9ee:	3405      	adds	r4, #5
     9f0:	b2e0      	uxtb	r0, r4
     9f2:	490a      	ldr	r1, [pc, #40]	; (a1c <mcp2515_read_canMsg+0x5c>)
     9f4:	4b0a      	ldr	r3, [pc, #40]	; (a20 <mcp2515_read_canMsg+0x60>)
     9f6:	4798      	blx	r3
}
     9f8:	bd70      	pop	{r4, r5, r6, pc}
                m_nRtr = 1;
     9fa:	2201      	movs	r2, #1
     9fc:	4b05      	ldr	r3, [pc, #20]	; (a14 <mcp2515_read_canMsg+0x54>)
     9fe:	701a      	strb	r2, [r3, #0]
     a00:	e7f1      	b.n	9e6 <mcp2515_read_canMsg+0x26>
     a02:	46c0      	nop			; (mov r8, r8)
     a04:	20004476 	.word	0x20004476
     a08:	20004480 	.word	0x20004480
     a0c:	00000975 	.word	0x00000975
     a10:	0000058d 	.word	0x0000058d
     a14:	20004474 	.word	0x20004474
     a18:	20004483 	.word	0x20004483
     a1c:	20004478 	.word	0x20004478
     a20:	000005c5 	.word	0x000005c5

00000a24 <init_Mask>:


/******************** START MCP SLAVE *******************/


uint8_t init_Mask(uint8_t num, uint32_t ulData) {
     a24:	b570      	push	{r4, r5, r6, lr}
     a26:	0005      	movs	r5, r0
     a28:	000c      	movs	r4, r1
     a2a:	4b1b      	ldr	r3, [pc, #108]	; (a98 <init_Mask+0x74>)
     a2c:	3b01      	subs	r3, #1
        uint8_t res = MCP2515_OK;
        uint8_t ext =0;
        for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     a2e:	2b00      	cmp	r3, #0
     a30:	d1fc      	bne.n	a2c <init_Mask+0x8>
        {
                ;//this works like a NOPE instruction
        }
        res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
     a32:	2080      	movs	r0, #128	; 0x80
     a34:	4b19      	ldr	r3, [pc, #100]	; (a9c <init_Mask+0x78>)
     a36:	4798      	blx	r3
     a38:	23fa      	movs	r3, #250	; 0xfa
     a3a:	005b      	lsls	r3, r3, #1
     a3c:	3b01      	subs	r3, #1
        for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     a3e:	2b00      	cmp	r3, #0
     a40:	d1fc      	bne.n	a3c <init_Mask+0x18>
        {
                ;//this works like a NOPE instruction
        }
        if(res > 0){
     a42:	2800      	cmp	r0, #0
     a44:	d004      	beq.n	a50 <init_Mask+0x2c>
     a46:	4b14      	ldr	r3, [pc, #80]	; (a98 <init_Mask+0x74>)
     a48:	3b01      	subs	r3, #1
                for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     a4a:	2b00      	cmp	r3, #0
     a4c:	d1fc      	bne.n	a48 <init_Mask+0x24>
        for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
        {
                ;//this works like a NOPE instruction
        }
        return res;
}
     a4e:	bd70      	pop	{r4, r5, r6, pc}
     a50:	23fa      	movs	r3, #250	; 0xfa
     a52:	005b      	lsls	r3, r3, #1
     a54:	3b01      	subs	r3, #1
        for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     a56:	2b00      	cmp	r3, #0
     a58:	d1fc      	bne.n	a54 <init_Mask+0x30>
        uint8_t ext =0;
     a5a:	0fe1      	lsrs	r1, r4, #31
        if (num == 0){
     a5c:	2d00      	cmp	r5, #0
     a5e:	d00b      	beq.n	a78 <init_Mask+0x54>
        else if(num == 1){
     a60:	2d01      	cmp	r5, #1
     a62:	d00e      	beq.n	a82 <init_Mask+0x5e>
        res = mcp2515_setCANCTRL_Mode(MODE_NORMAL);
     a64:	2000      	movs	r0, #0
     a66:	4b0d      	ldr	r3, [pc, #52]	; (a9c <init_Mask+0x78>)
     a68:	4798      	blx	r3
        if(res > 0){
     a6a:	2800      	cmp	r0, #0
     a6c:	d00e      	beq.n	a8c <init_Mask+0x68>
     a6e:	4b0a      	ldr	r3, [pc, #40]	; (a98 <init_Mask+0x74>)
     a70:	3b01      	subs	r3, #1
                for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     a72:	2b00      	cmp	r3, #0
     a74:	d1fc      	bne.n	a70 <init_Mask+0x4c>
     a76:	e7ea      	b.n	a4e <init_Mask+0x2a>
                mcp2515_write_mf(MCP_RXM0SIDH, ext, ulData);
     a78:	0022      	movs	r2, r4
     a7a:	2020      	movs	r0, #32
     a7c:	4b08      	ldr	r3, [pc, #32]	; (aa0 <init_Mask+0x7c>)
     a7e:	4798      	blx	r3
     a80:	e7f0      	b.n	a64 <init_Mask+0x40>
                mcp2515_write_mf(MCP_RXM1SIDH, ext, ulData);
     a82:	0022      	movs	r2, r4
     a84:	2024      	movs	r0, #36	; 0x24
     a86:	4b06      	ldr	r3, [pc, #24]	; (aa0 <init_Mask+0x7c>)
     a88:	4798      	blx	r3
     a8a:	e7eb      	b.n	a64 <init_Mask+0x40>
     a8c:	4b02      	ldr	r3, [pc, #8]	; (a98 <init_Mask+0x74>)
     a8e:	3b01      	subs	r3, #1
        for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     a90:	2b00      	cmp	r3, #0
     a92:	d1fc      	bne.n	a8e <init_Mask+0x6a>
     a94:	e7db      	b.n	a4e <init_Mask+0x2a>
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	000005dc 	.word	0x000005dc
     a9c:	00000711 	.word	0x00000711
     aa0:	000007ed 	.word	0x000007ed

00000aa4 <init_Filt>:


uint8_t init_Filt(uint8_t num, uint8_t ext, uint32_t ulData) {
     aa4:	b570      	push	{r4, r5, r6, lr}
     aa6:	0006      	movs	r6, r0
     aa8:	000c      	movs	r4, r1
     aaa:	0015      	movs	r5, r2
     aac:	4b25      	ldr	r3, [pc, #148]	; (b44 <init_Filt+0xa0>)
     aae:	3b01      	subs	r3, #1
        uint8_t res = MCP2515_OK;
        for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     ab0:	2b00      	cmp	r3, #0
     ab2:	d1fc      	bne.n	aae <init_Filt+0xa>
        {
                ;//this works like a NOPE instruction
        }
        res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
     ab4:	2080      	movs	r0, #128	; 0x80
     ab6:	4b24      	ldr	r3, [pc, #144]	; (b48 <init_Filt+0xa4>)
     ab8:	4798      	blx	r3
        if(res > 0)
     aba:	2800      	cmp	r0, #0
     abc:	d004      	beq.n	ac8 <init_Filt+0x24>
     abe:	4b21      	ldr	r3, [pc, #132]	; (b44 <init_Filt+0xa0>)
     ac0:	3b01      	subs	r3, #1
        {
                for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     ac2:	2b00      	cmp	r3, #0
     ac4:	d1fc      	bne.n	ac0 <init_Filt+0x1c>
        for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
        {
                ;//this works like a NOPE instruction
        }
        return res;
}
     ac6:	bd70      	pop	{r4, r5, r6, pc}
     ac8:	23fa      	movs	r3, #250	; 0xfa
     aca:	005b      	lsls	r3, r3, #1
     acc:	3b01      	subs	r3, #1
        for(int aux=0;aux<500;aux++) // We need to wait about X microseconds to let it load
     ace:	2b00      	cmp	r3, #0
     ad0:	d1fc      	bne.n	acc <init_Filt+0x28>
        switch(num)
     ad2:	2e05      	cmp	r6, #5
     ad4:	d808      	bhi.n	ae8 <init_Filt+0x44>
     ad6:	00b6      	lsls	r6, r6, #2
     ad8:	4b1c      	ldr	r3, [pc, #112]	; (b4c <init_Filt+0xa8>)
     ada:	599b      	ldr	r3, [r3, r6]
     adc:	469f      	mov	pc, r3
                mcp2515_write_mf(MCP_RXF0SIDH, ext, ulData);
     ade:	002a      	movs	r2, r5
     ae0:	0021      	movs	r1, r4
     ae2:	2000      	movs	r0, #0
     ae4:	4b1a      	ldr	r3, [pc, #104]	; (b50 <init_Filt+0xac>)
     ae6:	4798      	blx	r3
        res = mcp2515_setCANCTRL_Mode(MODE_NORMAL);
     ae8:	2000      	movs	r0, #0
     aea:	4b17      	ldr	r3, [pc, #92]	; (b48 <init_Filt+0xa4>)
     aec:	4798      	blx	r3
        if(res > 0)
     aee:	2800      	cmp	r0, #0
     af0:	d022      	beq.n	b38 <init_Filt+0x94>
     af2:	4b14      	ldr	r3, [pc, #80]	; (b44 <init_Filt+0xa0>)
     af4:	3b01      	subs	r3, #1
                for(int aux=0;aux<1500;aux++) // We need to wait about X microsec to let it load
     af6:	2b00      	cmp	r3, #0
     af8:	d1fc      	bne.n	af4 <init_Filt+0x50>
     afa:	e7e4      	b.n	ac6 <init_Filt+0x22>
                mcp2515_write_mf(MCP_RXF1SIDH, ext, ulData);
     afc:	002a      	movs	r2, r5
     afe:	0021      	movs	r1, r4
     b00:	2004      	movs	r0, #4
     b02:	4b13      	ldr	r3, [pc, #76]	; (b50 <init_Filt+0xac>)
     b04:	4798      	blx	r3
                break;
     b06:	e7ef      	b.n	ae8 <init_Filt+0x44>
                mcp2515_write_mf(MCP_RXF2SIDH, ext, ulData);
     b08:	002a      	movs	r2, r5
     b0a:	0021      	movs	r1, r4
     b0c:	2008      	movs	r0, #8
     b0e:	4b10      	ldr	r3, [pc, #64]	; (b50 <init_Filt+0xac>)
     b10:	4798      	blx	r3
                break;
     b12:	e7e9      	b.n	ae8 <init_Filt+0x44>
                mcp2515_write_mf(MCP_RXF3SIDH, ext, ulData);
     b14:	002a      	movs	r2, r5
     b16:	0021      	movs	r1, r4
     b18:	2010      	movs	r0, #16
     b1a:	4b0d      	ldr	r3, [pc, #52]	; (b50 <init_Filt+0xac>)
     b1c:	4798      	blx	r3
                break;
     b1e:	e7e3      	b.n	ae8 <init_Filt+0x44>
                mcp2515_write_mf(MCP_RXF4SIDH, ext, ulData);
     b20:	002a      	movs	r2, r5
     b22:	0021      	movs	r1, r4
     b24:	2014      	movs	r0, #20
     b26:	4b0a      	ldr	r3, [pc, #40]	; (b50 <init_Filt+0xac>)
     b28:	4798      	blx	r3
                break;
     b2a:	e7dd      	b.n	ae8 <init_Filt+0x44>
                mcp2515_write_mf(MCP_RXF5SIDH, ext, ulData);
     b2c:	002a      	movs	r2, r5
     b2e:	0021      	movs	r1, r4
     b30:	2018      	movs	r0, #24
     b32:	4b07      	ldr	r3, [pc, #28]	; (b50 <init_Filt+0xac>)
     b34:	4798      	blx	r3
                break;
     b36:	e7d7      	b.n	ae8 <init_Filt+0x44>
     b38:	4b02      	ldr	r3, [pc, #8]	; (b44 <init_Filt+0xa0>)
     b3a:	3b01      	subs	r3, #1
        for(int aux=0;aux<1500;aux++) // We need to wait about X microseconds to let it load
     b3c:	2b00      	cmp	r3, #0
     b3e:	d1fc      	bne.n	b3a <init_Filt+0x96>
     b40:	e7c1      	b.n	ac6 <init_Filt+0x22>
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	000005dc 	.word	0x000005dc
     b48:	00000711 	.word	0x00000711
     b4c:	00004f30 	.word	0x00004f30
     b50:	000007ed 	.word	0x000007ed

00000b54 <readMsg>:
        setMsg(id, ext, len, buf);
        return sendMsg();
}


uint8_t readMsg() {
     b54:	b510      	push	{r4, lr}
        uint8_t stat, res;


        stat = mcp2515_readStatus();
     b56:	4b0e      	ldr	r3, [pc, #56]	; (b90 <readMsg+0x3c>)
     b58:	4798      	blx	r3


        if (stat & MCP_STAT_RX0IF)                          /* Msg in Buffer 0              */
     b5a:	07c3      	lsls	r3, r0, #31
     b5c:	d404      	bmi.n	b68 <readMsg+0x14>
                mcp2515_modifyRegister(MCP_CANINTF, MCP_RX1IF, 0);
                res = CAN_OK;
        }
        else
        {
                res = CAN_NOMSG;
     b5e:	2304      	movs	r3, #4
        else if (stat & MCP_STAT_RX1IF)                    /* Msg in Buffer 1              */
     b60:	0782      	lsls	r2, r0, #30
     b62:	d40b      	bmi.n	b7c <readMsg+0x28>
        }
        return res;
}
     b64:	0018      	movs	r0, r3
     b66:	bd10      	pop	{r4, pc}
                mcp2515_read_canMsg(MCP_RXBUF_0);
     b68:	2061      	movs	r0, #97	; 0x61
     b6a:	4b0a      	ldr	r3, [pc, #40]	; (b94 <readMsg+0x40>)
     b6c:	4798      	blx	r3
                mcp2515_modifyRegister(MCP_CANINTF, MCP_RX0IF, 0);
     b6e:	2200      	movs	r2, #0
     b70:	2101      	movs	r1, #1
     b72:	202c      	movs	r0, #44	; 0x2c
     b74:	4b08      	ldr	r3, [pc, #32]	; (b98 <readMsg+0x44>)
     b76:	4798      	blx	r3
                res = CAN_OK;
     b78:	2300      	movs	r3, #0
     b7a:	e7f3      	b.n	b64 <readMsg+0x10>
                mcp2515_read_canMsg(MCP_RXBUF_1);
     b7c:	2071      	movs	r0, #113	; 0x71
     b7e:	4b05      	ldr	r3, [pc, #20]	; (b94 <readMsg+0x40>)
     b80:	4798      	blx	r3
                mcp2515_modifyRegister(MCP_CANINTF, MCP_RX1IF, 0);
     b82:	2200      	movs	r2, #0
     b84:	2102      	movs	r1, #2
     b86:	202c      	movs	r0, #44	; 0x2c
     b88:	4b03      	ldr	r3, [pc, #12]	; (b98 <readMsg+0x44>)
     b8a:	4798      	blx	r3
                res = CAN_OK;
     b8c:	2300      	movs	r3, #0
     b8e:	e7e9      	b.n	b64 <readMsg+0x10>
     b90:	000006dd 	.word	0x000006dd
     b94:	000009c1 	.word	0x000009c1
     b98:	0000069d 	.word	0x0000069d

00000b9c <readMsgBufID>:
        }
        return rc;
}


uint8_t readMsgBufID(uint16_t *ID, uint8_t *len, uint8_t buf[]) {
     b9c:	b570      	push	{r4, r5, r6, lr}
     b9e:	0005      	movs	r5, r0
     ba0:	000e      	movs	r6, r1
     ba2:	0014      	movs	r4, r2
        uint8_t rc;
        rc = readMsg();
     ba4:	4b0c      	ldr	r3, [pc, #48]	; (bd8 <readMsgBufID+0x3c>)
     ba6:	4798      	blx	r3


        if (rc == CAN_OK) {
     ba8:	2800      	cmp	r0, #0
     baa:	d113      	bne.n	bd4 <readMsgBufID+0x38>
                *len = m_nDlc;
     bac:	4b0b      	ldr	r3, [pc, #44]	; (bdc <readMsgBufID+0x40>)
     bae:	781a      	ldrb	r2, [r3, #0]
     bb0:	7032      	strb	r2, [r6, #0]
                *ID  = m_nID;
     bb2:	4a0b      	ldr	r2, [pc, #44]	; (be0 <readMsgBufID+0x44>)
     bb4:	8812      	ldrh	r2, [r2, #0]
     bb6:	802a      	strh	r2, [r5, #0]
                for(int i = 0; i<m_nDlc && i < MAX_CHAR_IN_MESSAGE; i++) {
     bb8:	781b      	ldrb	r3, [r3, #0]
     bba:	2b00      	cmp	r3, #0
     bbc:	dd0a      	ble.n	bd4 <readMsgBufID+0x38>
     bbe:	2300      	movs	r3, #0
                        buf[i] = m_nDta[i];
     bc0:	4d08      	ldr	r5, [pc, #32]	; (be4 <readMsgBufID+0x48>)
                for(int i = 0; i<m_nDlc && i < MAX_CHAR_IN_MESSAGE; i++) {
     bc2:	4906      	ldr	r1, [pc, #24]	; (bdc <readMsgBufID+0x40>)
                        buf[i] = m_nDta[i];
     bc4:	5cea      	ldrb	r2, [r5, r3]
     bc6:	54e2      	strb	r2, [r4, r3]
                for(int i = 0; i<m_nDlc && i < MAX_CHAR_IN_MESSAGE; i++) {
     bc8:	3301      	adds	r3, #1
     bca:	780a      	ldrb	r2, [r1, #0]
     bcc:	429a      	cmp	r2, r3
     bce:	dd01      	ble.n	bd4 <readMsgBufID+0x38>
     bd0:	2b08      	cmp	r3, #8
     bd2:	d1f7      	bne.n	bc4 <readMsgBufID+0x28>
                }
                } else {
                //*len = 0;
        }
        return rc;
}
     bd4:	bd70      	pop	{r4, r5, r6, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	00000b55 	.word	0x00000b55
     bdc:	20004483 	.word	0x20004483
     be0:	20004476 	.word	0x20004476
     be4:	20004478 	.word	0x20004478

00000be8 <canBegin>:
uint8_t isExtendedFrame(void) {
        return m_nExtFlg;
}


uint8_t canBegin(uint8_t slave, uint8_t speedset) {
     be8:	b510      	push	{r4, lr}
        uint8_t res;
        device = slave;
     bea:	4b04      	ldr	r3, [pc, #16]	; (bfc <canBegin+0x14>)
     bec:	7018      	strb	r0, [r3, #0]
        res = mcp2515_init(speedset);
     bee:	0008      	movs	r0, r1
     bf0:	4b03      	ldr	r3, [pc, #12]	; (c00 <canBegin+0x18>)
     bf2:	4798      	blx	r3
        if (res == MCP2515_OK) 
     bf4:	1e43      	subs	r3, r0, #1
     bf6:	4198      	sbcs	r0, r3
     bf8:	b2c0      	uxtb	r0, r0
                return CAN_OK;
        else 
                return CAN_FAILINIT;
}
     bfa:	bd10      	pop	{r4, pc}
     bfc:	20004482 	.word	0x20004482
     c00:	000008cd 	.word	0x000008cd

00000c04 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     c04:	b570      	push	{r4, r5, r6, lr}
     c06:	0004      	movs	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     c08:	4b2a      	ldr	r3, [pc, #168]	; (cb4 <pvPortMalloc+0xb0>)
     c0a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     c0c:	4b2a      	ldr	r3, [pc, #168]	; (cb8 <pvPortMalloc+0xb4>)
     c0e:	689b      	ldr	r3, [r3, #8]
     c10:	2b00      	cmp	r3, #0
     c12:	d011      	beq.n	c38 <pvPortMalloc+0x34>
void *pvReturn = NULL;
     c14:	2500      	movs	r5, #0
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     c16:	2c00      	cmp	r4, #0
     c18:	d046      	beq.n	ca8 <pvPortMalloc+0xa4>
		{
			xWantedSize += heapSTRUCT_SIZE;
     c1a:	0020      	movs	r0, r4
     c1c:	3008      	adds	r0, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
     c1e:	0743      	lsls	r3, r0, #29
     c20:	d002      	beq.n	c28 <pvPortMalloc+0x24>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     c22:	2307      	movs	r3, #7
     c24:	4398      	bics	r0, r3
     c26:	3008      	adds	r0, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     c28:	1e43      	subs	r3, r0, #1
     c2a:	4a24      	ldr	r2, [pc, #144]	; (cbc <pvPortMalloc+0xb8>)
void *pvReturn = NULL;
     c2c:	2500      	movs	r5, #0
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     c2e:	4293      	cmp	r3, r2
     c30:	d83a      	bhi.n	ca8 <pvPortMalloc+0xa4>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     c32:	4921      	ldr	r1, [pc, #132]	; (cb8 <pvPortMalloc+0xb4>)
     c34:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     c36:	e013      	b.n	c60 <pvPortMalloc+0x5c>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     c38:	491f      	ldr	r1, [pc, #124]	; (cb8 <pvPortMalloc+0xb4>)
     c3a:	000b      	movs	r3, r1
     c3c:	3314      	adds	r3, #20
     c3e:	2207      	movs	r2, #7
     c40:	4393      	bics	r3, r2

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     c42:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
     c44:	2500      	movs	r5, #0
     c46:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     c48:	4a1d      	ldr	r2, [pc, #116]	; (cc0 <pvPortMalloc+0xbc>)
     c4a:	481e      	ldr	r0, [pc, #120]	; (cc4 <pvPortMalloc+0xc0>)
     c4c:	6110      	str	r0, [r2, #16]
	xEnd.pxNextFreeBlock = NULL;
     c4e:	60d5      	str	r5, [r2, #12]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     c50:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     c52:	320c      	adds	r2, #12
     c54:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
     c56:	2301      	movs	r3, #1
     c58:	608b      	str	r3, [r1, #8]
     c5a:	e7db      	b.n	c14 <pvPortMalloc+0x10>
     c5c:	0019      	movs	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
     c5e:	0013      	movs	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     c60:	685a      	ldr	r2, [r3, #4]
     c62:	4290      	cmp	r0, r2
     c64:	d902      	bls.n	c6c <pvPortMalloc+0x68>
     c66:	681a      	ldr	r2, [r3, #0]
     c68:	2a00      	cmp	r2, #0
     c6a:	d1f7      	bne.n	c5c <pvPortMalloc+0x58>
			if( pxBlock != &xEnd )
     c6c:	4a14      	ldr	r2, [pc, #80]	; (cc0 <pvPortMalloc+0xbc>)
     c6e:	320c      	adds	r2, #12
     c70:	4293      	cmp	r3, r2
     c72:	d01d      	beq.n	cb0 <pvPortMalloc+0xac>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     c74:	680d      	ldr	r5, [r1, #0]
     c76:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     c78:	681a      	ldr	r2, [r3, #0]
     c7a:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     c7c:	685a      	ldr	r2, [r3, #4]
     c7e:	1a12      	subs	r2, r2, r0
     c80:	2a10      	cmp	r2, #16
     c82:	d90c      	bls.n	c9e <pvPortMalloc+0x9a>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     c84:	181c      	adds	r4, r3, r0
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     c86:	6062      	str	r2, [r4, #4]
					pxBlock->xBlockSize = xWantedSize;
     c88:	6058      	str	r0, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     c8a:	6860      	ldr	r0, [r4, #4]
     c8c:	490a      	ldr	r1, [pc, #40]	; (cb8 <pvPortMalloc+0xb4>)
     c8e:	e000      	b.n	c92 <pvPortMalloc+0x8e>
     c90:	0011      	movs	r1, r2
     c92:	680a      	ldr	r2, [r1, #0]
     c94:	6856      	ldr	r6, [r2, #4]
     c96:	42b0      	cmp	r0, r6
     c98:	d8fa      	bhi.n	c90 <pvPortMalloc+0x8c>
     c9a:	6022      	str	r2, [r4, #0]
     c9c:	600c      	str	r4, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
     c9e:	4a0a      	ldr	r2, [pc, #40]	; (cc8 <pvPortMalloc+0xc4>)
     ca0:	685b      	ldr	r3, [r3, #4]
     ca2:	6811      	ldr	r1, [r2, #0]
     ca4:	1acb      	subs	r3, r1, r3
     ca6:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
     ca8:	4b08      	ldr	r3, [pc, #32]	; (ccc <pvPortMalloc+0xc8>)
     caa:	4798      	blx	r3
}
     cac:	0028      	movs	r0, r5
     cae:	bd70      	pop	{r4, r5, r6, pc}
void *pvReturn = NULL;
     cb0:	2500      	movs	r5, #0
     cb2:	e7f9      	b.n	ca8 <pvPortMalloc+0xa4>
     cb4:	00001de9 	.word	0x00001de9
     cb8:	2000046c 	.word	0x2000046c
     cbc:	00003e76 	.word	0x00003e76
     cc0:	200042ec 	.word	0x200042ec
     cc4:	00003e78 	.word	0x00003e78
     cc8:	20000004 	.word	0x20000004
     ccc:	00001f15 	.word	0x00001f15

00000cd0 <vPortFree>:
{
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	1e04      	subs	r4, r0, #0
	if( pv != NULL )
     cd4:	d016      	beq.n	d04 <vPortFree+0x34>
		puc -= heapSTRUCT_SIZE;
     cd6:	0005      	movs	r5, r0
     cd8:	3d08      	subs	r5, #8
		vTaskSuspendAll();
     cda:	4b0b      	ldr	r3, [pc, #44]	; (d08 <vPortFree+0x38>)
     cdc:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     cde:	6869      	ldr	r1, [r5, #4]
     ce0:	4a0a      	ldr	r2, [pc, #40]	; (d0c <vPortFree+0x3c>)
     ce2:	e000      	b.n	ce6 <vPortFree+0x16>
     ce4:	001a      	movs	r2, r3
     ce6:	6813      	ldr	r3, [r2, #0]
     ce8:	6858      	ldr	r0, [r3, #4]
     cea:	4281      	cmp	r1, r0
     cec:	d8fa      	bhi.n	ce4 <vPortFree+0x14>
     cee:	3c08      	subs	r4, #8
     cf0:	6023      	str	r3, [r4, #0]
     cf2:	6015      	str	r5, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
     cf4:	4a06      	ldr	r2, [pc, #24]	; (d10 <vPortFree+0x40>)
     cf6:	6863      	ldr	r3, [r4, #4]
     cf8:	6811      	ldr	r1, [r2, #0]
     cfa:	468c      	mov	ip, r1
     cfc:	4463      	add	r3, ip
     cfe:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
     d00:	4b04      	ldr	r3, [pc, #16]	; (d14 <vPortFree+0x44>)
     d02:	4798      	blx	r3
}
     d04:	bd70      	pop	{r4, r5, r6, pc}
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00001de9 	.word	0x00001de9
     d0c:	2000046c 	.word	0x2000046c
     d10:	20000004 	.word	0x20000004
     d14:	00001f15 	.word	0x00001f15

00000d18 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d18:	0003      	movs	r3, r0
     d1a:	3308      	adds	r3, #8
     d1c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     d1e:	2201      	movs	r2, #1
     d20:	4252      	negs	r2, r2
     d22:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d24:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d26:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     d28:	2300      	movs	r3, #0
     d2a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     d2c:	4770      	bx	lr

00000d2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     d2e:	2300      	movs	r3, #0
     d30:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     d32:	4770      	bx	lr

00000d34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     d34:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     d36:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     d38:	689a      	ldr	r2, [r3, #8]
     d3a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     d3c:	689a      	ldr	r2, [r3, #8]
     d3e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
     d40:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d42:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     d44:	6803      	ldr	r3, [r0, #0]
     d46:	3301      	adds	r3, #1
     d48:	6003      	str	r3, [r0, #0]
}
     d4a:	4770      	bx	lr

00000d4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d4c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     d4e:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d50:	0002      	movs	r2, r0
     d52:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
     d54:	1c63      	adds	r3, r4, #1
     d56:	d102      	bne.n	d5e <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
     d58:	6902      	ldr	r2, [r0, #16]
     d5a:	e004      	b.n	d66 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d5c:	001a      	movs	r2, r3
     d5e:	6853      	ldr	r3, [r2, #4]
     d60:	681d      	ldr	r5, [r3, #0]
     d62:	42ac      	cmp	r4, r5
     d64:	d2fa      	bcs.n	d5c <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     d66:	6853      	ldr	r3, [r2, #4]
     d68:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     d6a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     d6c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
     d6e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d70:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     d72:	6803      	ldr	r3, [r0, #0]
     d74:	3301      	adds	r3, #1
     d76:	6003      	str	r3, [r0, #0]
}
     d78:	bd30      	pop	{r4, r5, pc}

00000d7a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     d7a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d7c:	6842      	ldr	r2, [r0, #4]
     d7e:	6881      	ldr	r1, [r0, #8]
     d80:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d82:	6882      	ldr	r2, [r0, #8]
     d84:	6841      	ldr	r1, [r0, #4]
     d86:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     d88:	685a      	ldr	r2, [r3, #4]
     d8a:	4290      	cmp	r0, r2
     d8c:	d006      	beq.n	d9c <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     d8e:	2200      	movs	r2, #0
     d90:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     d92:	681a      	ldr	r2, [r3, #0]
     d94:	3a01      	subs	r2, #1
     d96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     d98:	6818      	ldr	r0, [r3, #0]
}
     d9a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     d9c:	6882      	ldr	r2, [r0, #8]
     d9e:	605a      	str	r2, [r3, #4]
     da0:	e7f5      	b.n	d8e <uxListRemove+0x14>
	...

00000da4 <out>:
    //return 0;
//}


static void out(char c) {
    *bf++ = c;
     da4:	4a02      	ldr	r2, [pc, #8]	; (db0 <out+0xc>)
     da6:	6813      	ldr	r3, [r2, #0]
     da8:	1c59      	adds	r1, r3, #1
     daa:	6011      	str	r1, [r2, #0]
     dac:	7018      	strb	r0, [r3, #0]
    }
     dae:	4770      	bx	lr
     db0:	20004300 	.word	0x20004300

00000db4 <outDgt>:

static void outDgt(char dgt) {
     db4:	b510      	push	{r4, lr}
	out(dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10));
     db6:	2330      	movs	r3, #48	; 0x30
     db8:	2809      	cmp	r0, #9
     dba:	d905      	bls.n	dc8 <outDgt+0x14>
     dbc:	4b06      	ldr	r3, [pc, #24]	; (dd8 <outDgt+0x24>)
     dbe:	791a      	ldrb	r2, [r3, #4]
     dc0:	2337      	movs	r3, #55	; 0x37
     dc2:	2a00      	cmp	r2, #0
     dc4:	d100      	bne.n	dc8 <outDgt+0x14>
     dc6:	3320      	adds	r3, #32
     dc8:	1818      	adds	r0, r3, r0
     dca:	b2c0      	uxtb	r0, r0
     dcc:	4b03      	ldr	r3, [pc, #12]	; (ddc <outDgt+0x28>)
     dce:	4798      	blx	r3
	zs=1;
     dd0:	2201      	movs	r2, #1
     dd2:	4b01      	ldr	r3, [pc, #4]	; (dd8 <outDgt+0x24>)
     dd4:	715a      	strb	r2, [r3, #5]
    }
     dd6:	bd10      	pop	{r4, pc}
     dd8:	20004300 	.word	0x20004300
     ddc:	00000da5 	.word	0x00000da5

00000de0 <divOut>:
	
static void divOut(unsigned int div) {
     de0:	b510      	push	{r4, lr}
    unsigned char dgt=0;
	num &= 0xffff; // just for testing the code  with 32 bit ints
     de2:	4b0e      	ldr	r3, [pc, #56]	; (e1c <divOut+0x3c>)
     de4:	891a      	ldrh	r2, [r3, #8]
     de6:	609a      	str	r2, [r3, #8]
	while (num>=div) {
     de8:	4282      	cmp	r2, r0
     dea:	d310      	bcc.n	e0e <divOut+0x2e>
     dec:	2300      	movs	r3, #0
		num -= div;
     dee:	1a12      	subs	r2, r2, r0
		dgt++;
     df0:	3301      	adds	r3, #1
     df2:	b2db      	uxtb	r3, r3
	while (num>=div) {
     df4:	4290      	cmp	r0, r2
     df6:	d9fa      	bls.n	dee <divOut+0xe>
     df8:	4908      	ldr	r1, [pc, #32]	; (e1c <divOut+0x3c>)
     dfa:	608a      	str	r2, [r1, #8]
		}
	if (zs || dgt>0) 
     dfc:	794a      	ldrb	r2, [r1, #5]
     dfe:	2a00      	cmp	r2, #0
     e00:	d101      	bne.n	e06 <divOut+0x26>
     e02:	2b00      	cmp	r3, #0
     e04:	d002      	beq.n	e0c <divOut+0x2c>
		outDgt(dgt);
     e06:	0018      	movs	r0, r3
     e08:	4b05      	ldr	r3, [pc, #20]	; (e20 <divOut+0x40>)
     e0a:	4798      	blx	r3
    }	
     e0c:	bd10      	pop	{r4, pc}
	if (zs || dgt>0) 
     e0e:	4b03      	ldr	r3, [pc, #12]	; (e1c <divOut+0x3c>)
     e10:	795b      	ldrb	r3, [r3, #5]
     e12:	2b00      	cmp	r3, #0
     e14:	d0fa      	beq.n	e0c <divOut+0x2c>
    unsigned char dgt=0;
     e16:	2300      	movs	r3, #0
     e18:	e7f5      	b.n	e06 <divOut+0x26>
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	20004300 	.word	0x20004300
     e20:	00000db5 	.word	0x00000db5

00000e24 <myputchar>:
  if(c=='\n')
     e24:	280a      	cmp	r0, #10
     e26:	d008      	beq.n	e3a <myputchar+0x16>
  while (!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
     e28:	4908      	ldr	r1, [pc, #32]	; (e4c <myputchar+0x28>)
     e2a:	2201      	movs	r2, #1
     e2c:	7e0b      	ldrb	r3, [r1, #24]
     e2e:	4213      	tst	r3, r2
     e30:	d0fc      	beq.n	e2c <myputchar+0x8>
  SERCOM0->USART.DATA.reg = s;
     e32:	b280      	uxth	r0, r0
     e34:	4b05      	ldr	r3, [pc, #20]	; (e4c <myputchar+0x28>)
     e36:	8518      	strh	r0, [r3, #40]	; 0x28
}
     e38:	4770      	bx	lr
  while (!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
     e3a:	4904      	ldr	r1, [pc, #16]	; (e4c <myputchar+0x28>)
     e3c:	2201      	movs	r2, #1
     e3e:	7e0b      	ldrb	r3, [r1, #24]
     e40:	4213      	tst	r3, r2
     e42:	d0fc      	beq.n	e3e <myputchar+0x1a>
  SERCOM0->USART.DATA.reg = s;
     e44:	220d      	movs	r2, #13
     e46:	4b01      	ldr	r3, [pc, #4]	; (e4c <myputchar+0x28>)
     e48:	851a      	strh	r2, [r3, #40]	; 0x28
     e4a:	e7ed      	b.n	e28 <myputchar+0x4>
     e4c:	42000800 	.word	0x42000800

00000e50 <tfp_printf>:

void tfp_printf(char *fmt, ...)
	{
     e50:	b40f      	push	{r0, r1, r2, r3}
     e52:	b5f0      	push	{r4, r5, r6, r7, lr}
     e54:	46de      	mov	lr, fp
     e56:	4657      	mov	r7, sl
     e58:	464e      	mov	r6, r9
     e5a:	4645      	mov	r5, r8
     e5c:	b5e0      	push	{r5, r6, r7, lr}
     e5e:	b087      	sub	sp, #28
     e60:	ab10      	add	r3, sp, #64	; 0x40
     e62:	cb80      	ldmia	r3!, {r7}
	va_list va;
	char ch;
	char* p;
	
	va_start(va,fmt);
     e64:	9305      	str	r3, [sp, #20]
				while (ch>='0' && ch<='9') {
					w=(((w<<2)+w)<<1)+ch-'0';
					ch=*fmt++;
					}
				}
			bf=buf;
     e66:	4b73      	ldr	r3, [pc, #460]	; (1034 <tfp_printf+0x1e4>)
     e68:	330c      	adds	r3, #12
     e6a:	9302      	str	r3, [sp, #8]
				case '%' :
					out('%');
				default:
					break;
				}
			*bf=0;
     e6c:	4b71      	ldr	r3, [pc, #452]	; (1034 <tfp_printf+0x1e4>)
     e6e:	469a      	mov	sl, r3
			while (*bf++ && w > 0)
				w--;
			while (w-- > 0) 
				myputchar(lz ? '0' : ' ');
			while ((ch= *p++))
				myputchar(ch);
     e70:	4b71      	ldr	r3, [pc, #452]	; (1038 <tfp_printf+0x1e8>)
     e72:	4698      	mov	r8, r3
			p=bf;
     e74:	4653      	mov	r3, sl
     e76:	330c      	adds	r3, #12
     e78:	9303      	str	r3, [sp, #12]
	while ((ch=*(fmt++))) {
     e7a:	e08c      	b.n	f96 <tfp_printf+0x146>
			ch=*(fmt++);
     e7c:	787b      	ldrb	r3, [r7, #1]
			if (ch=='0') {
     e7e:	2b30      	cmp	r3, #48	; 0x30
     e80:	d029      	beq.n	ed6 <tfp_printf+0x86>
			ch=*(fmt++);
     e82:	3702      	adds	r7, #2
			char lz=0;
     e84:	2200      	movs	r2, #0
     e86:	4693      	mov	fp, r2
			char w=0;
     e88:	2400      	movs	r4, #0
			if (ch>='0' && ch<='9') {
     e8a:	001a      	movs	r2, r3
     e8c:	3a30      	subs	r2, #48	; 0x30
     e8e:	2a09      	cmp	r2, #9
     e90:	d80c      	bhi.n	eac <tfp_printf+0x5c>
					w=(((w<<2)+w)<<1)+ch-'0';
     e92:	00a2      	lsls	r2, r4, #2
     e94:	18a4      	adds	r4, r4, r2
     e96:	0064      	lsls	r4, r4, #1
     e98:	3c30      	subs	r4, #48	; 0x30
     e9a:	18e4      	adds	r4, r4, r3
     e9c:	b2e4      	uxtb	r4, r4
					ch=*fmt++;
     e9e:	1c7a      	adds	r2, r7, #1
     ea0:	783b      	ldrb	r3, [r7, #0]
     ea2:	0017      	movs	r7, r2
				while (ch>='0' && ch<='9') {
     ea4:	0019      	movs	r1, r3
     ea6:	3930      	subs	r1, #48	; 0x30
     ea8:	2909      	cmp	r1, #9
     eaa:	d9f2      	bls.n	e92 <tfp_printf+0x42>
			bf=buf;
     eac:	4a61      	ldr	r2, [pc, #388]	; (1034 <tfp_printf+0x1e4>)
     eae:	9902      	ldr	r1, [sp, #8]
     eb0:	6011      	str	r1, [r2, #0]
			zs=0;
     eb2:	2200      	movs	r2, #0
     eb4:	495f      	ldr	r1, [pc, #380]	; (1034 <tfp_printf+0x1e4>)
     eb6:	714a      	strb	r2, [r1, #5]
			switch (ch) {
     eb8:	2b63      	cmp	r3, #99	; 0x63
     eba:	d100      	bne.n	ebe <tfp_printf+0x6e>
     ebc:	e07d      	b.n	fba <tfp_printf+0x16a>
     ebe:	d80f      	bhi.n	ee0 <tfp_printf+0x90>
     ec0:	2b25      	cmp	r3, #37	; 0x25
     ec2:	d100      	bne.n	ec6 <tfp_printf+0x76>
     ec4:	e086      	b.n	fd4 <tfp_printf+0x184>
     ec6:	2b58      	cmp	r3, #88	; 0x58
     ec8:	d011      	beq.n	eee <tfp_printf+0x9e>
     eca:	2b00      	cmp	r3, #0
     ecc:	d100      	bne.n	ed0 <tfp_printf+0x80>
     ece:	e0a6      	b.n	101e <tfp_printf+0x1ce>
			p=bf;
     ed0:	4d58      	ldr	r5, [pc, #352]	; (1034 <tfp_printf+0x1e4>)
     ed2:	350c      	adds	r5, #12
     ed4:	e03c      	b.n	f50 <tfp_printf+0x100>
				ch=*(fmt++);
     ed6:	78bb      	ldrb	r3, [r7, #2]
     ed8:	3703      	adds	r7, #3
				lz=1;
     eda:	2201      	movs	r2, #1
     edc:	4693      	mov	fp, r2
     ede:	e7d3      	b.n	e88 <tfp_printf+0x38>
			switch (ch) {
     ee0:	2b73      	cmp	r3, #115	; 0x73
     ee2:	d072      	beq.n	fca <tfp_printf+0x17a>
     ee4:	d91b      	bls.n	f1e <tfp_printf+0xce>
     ee6:	2b75      	cmp	r3, #117	; 0x75
     ee8:	d01b      	beq.n	f22 <tfp_printf+0xd2>
     eea:	2b78      	cmp	r3, #120	; 0x78
     eec:	d1f0      	bne.n	ed0 <tfp_printf+0x80>
				    uc= ch=='X';
     eee:	4d51      	ldr	r5, [pc, #324]	; (1034 <tfp_printf+0x1e4>)
     ef0:	3b58      	subs	r3, #88	; 0x58
     ef2:	4259      	negs	r1, r3
     ef4:	4159      	adcs	r1, r3
     ef6:	7129      	strb	r1, [r5, #4]
					num=va_arg(va, unsigned int);
     ef8:	9b05      	ldr	r3, [sp, #20]
     efa:	1d1a      	adds	r2, r3, #4
     efc:	9205      	str	r2, [sp, #20]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	60ab      	str	r3, [r5, #8]
					divOut(0x1000);
     f02:	2080      	movs	r0, #128	; 0x80
     f04:	0140      	lsls	r0, r0, #5
     f06:	4e4d      	ldr	r6, [pc, #308]	; (103c <tfp_printf+0x1ec>)
     f08:	47b0      	blx	r6
					divOut(0x100);
     f0a:	2080      	movs	r0, #128	; 0x80
     f0c:	0040      	lsls	r0, r0, #1
     f0e:	47b0      	blx	r6
					divOut(0x10);
     f10:	2010      	movs	r0, #16
     f12:	47b0      	blx	r6
					outDgt(num);
     f14:	7a28      	ldrb	r0, [r5, #8]
     f16:	4b4a      	ldr	r3, [pc, #296]	; (1040 <tfp_printf+0x1f0>)
     f18:	4798      	blx	r3
			p=bf;
     f1a:	350c      	adds	r5, #12
					break;
     f1c:	e018      	b.n	f50 <tfp_printf+0x100>
			switch (ch) {
     f1e:	2b64      	cmp	r3, #100	; 0x64
     f20:	d1d6      	bne.n	ed0 <tfp_printf+0x80>
					num=va_arg(va, unsigned int);
     f22:	9a05      	ldr	r2, [sp, #20]
     f24:	1d11      	adds	r1, r2, #4
     f26:	9105      	str	r1, [sp, #20]
     f28:	6812      	ldr	r2, [r2, #0]
     f2a:	4942      	ldr	r1, [pc, #264]	; (1034 <tfp_printf+0x1e4>)
     f2c:	608a      	str	r2, [r1, #8]
					if (ch=='d' && (int)num<0) {
     f2e:	2b64      	cmp	r3, #100	; 0x64
     f30:	d03b      	beq.n	faa <tfp_printf+0x15a>
					divOut(10000);
     f32:	4844      	ldr	r0, [pc, #272]	; (1044 <tfp_printf+0x1f4>)
     f34:	4d41      	ldr	r5, [pc, #260]	; (103c <tfp_printf+0x1ec>)
     f36:	47a8      	blx	r5
					divOut(1000);
     f38:	20fa      	movs	r0, #250	; 0xfa
     f3a:	0080      	lsls	r0, r0, #2
     f3c:	47a8      	blx	r5
					divOut(100);
     f3e:	2064      	movs	r0, #100	; 0x64
     f40:	47a8      	blx	r5
					divOut(10);
     f42:	200a      	movs	r0, #10
     f44:	47a8      	blx	r5
					outDgt(num);
     f46:	4d3b      	ldr	r5, [pc, #236]	; (1034 <tfp_printf+0x1e4>)
     f48:	7a28      	ldrb	r0, [r5, #8]
     f4a:	4b3d      	ldr	r3, [pc, #244]	; (1040 <tfp_printf+0x1f0>)
     f4c:	4798      	blx	r3
			p=bf;
     f4e:	350c      	adds	r5, #12
			*bf=0;
     f50:	2300      	movs	r3, #0
     f52:	4652      	mov	r2, sl
     f54:	6812      	ldr	r2, [r2, #0]
     f56:	7013      	strb	r3, [r2, #0]
			while (*bf++ && w > 0)
     f58:	1c6b      	adds	r3, r5, #1
     f5a:	4699      	mov	r9, r3
     f5c:	4653      	mov	r3, sl
     f5e:	464a      	mov	r2, r9
     f60:	601a      	str	r2, [r3, #0]
     f62:	7828      	ldrb	r0, [r5, #0]
     f64:	2800      	cmp	r0, #0
     f66:	d055      	beq.n	1014 <tfp_printf+0x1c4>
     f68:	2c00      	cmp	r4, #0
     f6a:	d00c      	beq.n	f86 <tfp_printf+0x136>
     f6c:	1caa      	adds	r2, r5, #2
				w--;
     f6e:	1e63      	subs	r3, r4, #1
     f70:	b2db      	uxtb	r3, r3
			while (*bf++ && w > 0)
     f72:	0011      	movs	r1, r2
     f74:	1e56      	subs	r6, r2, #1
     f76:	7836      	ldrb	r6, [r6, #0]
     f78:	2e00      	cmp	r6, #0
     f7a:	d03c      	beq.n	ff6 <tfp_printf+0x1a6>
     f7c:	3201      	adds	r2, #1
				w--;
     f7e:	1e1c      	subs	r4, r3, #0
			while (*bf++ && w > 0)
     f80:	d1f5      	bne.n	f6e <tfp_printf+0x11e>
     f82:	4b2c      	ldr	r3, [pc, #176]	; (1034 <tfp_printf+0x1e4>)
     f84:	6019      	str	r1, [r3, #0]
			while ((ch= *p++))
     f86:	7828      	ldrb	r0, [r5, #0]
     f88:	464d      	mov	r5, r9
				myputchar(ch);
     f8a:	47c0      	blx	r8
     f8c:	3501      	adds	r5, #1
			while ((ch= *p++))
     f8e:	1e6b      	subs	r3, r5, #1
     f90:	7818      	ldrb	r0, [r3, #0]
     f92:	2800      	cmp	r0, #0
     f94:	d1f9      	bne.n	f8a <tfp_printf+0x13a>
	while ((ch=*(fmt++))) {
     f96:	7838      	ldrb	r0, [r7, #0]
     f98:	2800      	cmp	r0, #0
     f9a:	d040      	beq.n	101e <tfp_printf+0x1ce>
		if (ch!='%') {
     f9c:	2825      	cmp	r0, #37	; 0x25
     f9e:	d100      	bne.n	fa2 <tfp_printf+0x152>
     fa0:	e76c      	b.n	e7c <tfp_printf+0x2c>
	while ((ch=*(fmt++))) {
     fa2:	3701      	adds	r7, #1
			myputchar(ch);
     fa4:	4b24      	ldr	r3, [pc, #144]	; (1038 <tfp_printf+0x1e8>)
     fa6:	4798      	blx	r3
     fa8:	e7f5      	b.n	f96 <tfp_printf+0x146>
					if (ch=='d' && (int)num<0) {
     faa:	2a00      	cmp	r2, #0
     fac:	dac1      	bge.n	f32 <tfp_printf+0xe2>
						num = -(int)num;
     fae:	4252      	negs	r2, r2
     fb0:	608a      	str	r2, [r1, #8]
						out('-');
     fb2:	202d      	movs	r0, #45	; 0x2d
     fb4:	4b24      	ldr	r3, [pc, #144]	; (1048 <tfp_printf+0x1f8>)
     fb6:	4798      	blx	r3
     fb8:	e7bb      	b.n	f32 <tfp_printf+0xe2>
					out((char)(va_arg(va, int)));
     fba:	9b05      	ldr	r3, [sp, #20]
     fbc:	1d1a      	adds	r2, r3, #4
     fbe:	9205      	str	r2, [sp, #20]
     fc0:	7818      	ldrb	r0, [r3, #0]
     fc2:	4b21      	ldr	r3, [pc, #132]	; (1048 <tfp_printf+0x1f8>)
     fc4:	4798      	blx	r3
			p=bf;
     fc6:	9d03      	ldr	r5, [sp, #12]
					break;
     fc8:	e7c2      	b.n	f50 <tfp_printf+0x100>
					p=va_arg(va, char*);
     fca:	9b05      	ldr	r3, [sp, #20]
     fcc:	1d1a      	adds	r2, r3, #4
     fce:	9205      	str	r2, [sp, #20]
     fd0:	681d      	ldr	r5, [r3, #0]
					break;
     fd2:	e7bd      	b.n	f50 <tfp_printf+0x100>
					out('%');
     fd4:	2025      	movs	r0, #37	; 0x25
     fd6:	4b1c      	ldr	r3, [pc, #112]	; (1048 <tfp_printf+0x1f8>)
     fd8:	4798      	blx	r3
			p=bf;
     fda:	4d16      	ldr	r5, [pc, #88]	; (1034 <tfp_printf+0x1e4>)
     fdc:	350c      	adds	r5, #12
     fde:	e7b7      	b.n	f50 <tfp_printf+0x100>
			while (w-- > 0) 
     fe0:	001e      	movs	r6, r3
				myputchar(lz ? '0' : ' ');
     fe2:	9801      	ldr	r0, [sp, #4]
     fe4:	47a0      	blx	r4
			while (w-- > 0) 
     fe6:	1e73      	subs	r3, r6, #1
     fe8:	b2db      	uxtb	r3, r3
     fea:	2e00      	cmp	r6, #0
     fec:	d1f8      	bne.n	fe0 <tfp_printf+0x190>
			while ((ch= *p++))
     fee:	7828      	ldrb	r0, [r5, #0]
     ff0:	2800      	cmp	r0, #0
     ff2:	d1c9      	bne.n	f88 <tfp_printf+0x138>
     ff4:	e7cf      	b.n	f96 <tfp_printf+0x146>
     ff6:	4a0f      	ldr	r2, [pc, #60]	; (1034 <tfp_printf+0x1e4>)
     ff8:	6011      	str	r1, [r2, #0]
			while (w-- > 0) 
     ffa:	3c02      	subs	r4, #2
     ffc:	b2e6      	uxtb	r6, r4
     ffe:	2b00      	cmp	r3, #0
    1000:	d0c2      	beq.n	f88 <tfp_printf+0x138>
    1002:	2420      	movs	r4, #32
    1004:	465b      	mov	r3, fp
    1006:	2b00      	cmp	r3, #0
    1008:	d000      	beq.n	100c <tfp_printf+0x1bc>
    100a:	2430      	movs	r4, #48	; 0x30
    100c:	b2e3      	uxtb	r3, r4
    100e:	9301      	str	r3, [sp, #4]
				myputchar(lz ? '0' : ' ');
    1010:	4c09      	ldr	r4, [pc, #36]	; (1038 <tfp_printf+0x1e8>)
    1012:	e7e6      	b.n	fe2 <tfp_printf+0x192>
			while (w-- > 0) 
    1014:	1e66      	subs	r6, r4, #1
    1016:	b2f6      	uxtb	r6, r6
    1018:	2c00      	cmp	r4, #0
    101a:	d1f2      	bne.n	1002 <tfp_printf+0x1b2>
    101c:	e7bb      	b.n	f96 <tfp_printf+0x146>
			}
		}
	abort:;
	va_end(va);
	}
    101e:	b007      	add	sp, #28
    1020:	bc3c      	pop	{r2, r3, r4, r5}
    1022:	4690      	mov	r8, r2
    1024:	4699      	mov	r9, r3
    1026:	46a2      	mov	sl, r4
    1028:	46ab      	mov	fp, r5
    102a:	bcf0      	pop	{r4, r5, r6, r7}
    102c:	bc08      	pop	{r3}
    102e:	b004      	add	sp, #16
    1030:	4718      	bx	r3
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	20004300 	.word	0x20004300
    1038:	00000e25 	.word	0x00000e25
    103c:	00000de1 	.word	0x00000de1
    1040:	00000db5 	.word	0x00000db5
    1044:	00002710 	.word	0x00002710
    1048:	00000da5 	.word	0x00000da5

0000104c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    104c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    104e:	2300      	movs	r3, #0
    1050:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    1052:	4b06      	ldr	r3, [pc, #24]	; (106c <prvTaskExitError+0x20>)
    1054:	681b      	ldr	r3, [r3, #0]
    1056:	3301      	adds	r3, #1
    1058:	d001      	beq.n	105e <prvTaskExitError+0x12>
    105a:	b672      	cpsid	i
    105c:	e7fe      	b.n	105c <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    105e:	b672      	cpsid	i
	while( ulDummy == 0 )
    1060:	9b01      	ldr	r3, [sp, #4]
    1062:	2b00      	cmp	r3, #0
    1064:	d0fc      	beq.n	1060 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    1066:	b002      	add	sp, #8
    1068:	4770      	bx	lr
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	20000008 	.word	0x20000008

00001070 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1070:	4a0b      	ldr	r2, [pc, #44]	; (10a0 <pxCurrentTCBConst2>)
    1072:	6813      	ldr	r3, [r2, #0]
    1074:	6818      	ldr	r0, [r3, #0]
    1076:	3020      	adds	r0, #32
    1078:	f380 8809 	msr	PSP, r0
    107c:	2002      	movs	r0, #2
    107e:	f380 8814 	msr	CONTROL, r0
    1082:	f3bf 8f6f 	isb	sy
    1086:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1088:	46ae      	mov	lr, r5
    108a:	bc08      	pop	{r3}
    108c:	bc04      	pop	{r2}
    108e:	b662      	cpsie	i
    1090:	4718      	bx	r3
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	46c0      	nop			; (mov r8, r8)
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	46c0      	nop			; (mov r8, r8)
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	46c0      	nop			; (mov r8, r8)
    109e:	46c0      	nop			; (mov r8, r8)

000010a0 <pxCurrentTCBConst2>:
    10a0:	200043cc 	.word	0x200043cc

000010a4 <pxPortInitialiseStack>:
{
    10a4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    10a6:	1f03      	subs	r3, r0, #4
    10a8:	2480      	movs	r4, #128	; 0x80
    10aa:	0464      	lsls	r4, r4, #17
    10ac:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    10ae:	3b04      	subs	r3, #4
    10b0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    10b2:	3b04      	subs	r3, #4
    10b4:	4902      	ldr	r1, [pc, #8]	; (10c0 <pxPortInitialiseStack+0x1c>)
    10b6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    10b8:	3b14      	subs	r3, #20
    10ba:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    10bc:	3840      	subs	r0, #64	; 0x40
}
    10be:	bd10      	pop	{r4, pc}
    10c0:	0000104d 	.word	0x0000104d

000010c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    10c4:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    10c6:	4b0f      	ldr	r3, [pc, #60]	; (1104 <xPortStartScheduler+0x40>)
    10c8:	6819      	ldr	r1, [r3, #0]
    10ca:	22ff      	movs	r2, #255	; 0xff
    10cc:	0412      	lsls	r2, r2, #16
    10ce:	430a      	orrs	r2, r1
    10d0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    10d2:	6819      	ldr	r1, [r3, #0]
    10d4:	22ff      	movs	r2, #255	; 0xff
    10d6:	0612      	lsls	r2, r2, #24
    10d8:	430a      	orrs	r2, r1
    10da:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    10dc:	4a0a      	ldr	r2, [pc, #40]	; (1108 <xPortStartScheduler+0x44>)
    10de:	2300      	movs	r3, #0
    10e0:	6013      	str	r3, [r2, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    10e2:	490a      	ldr	r1, [pc, #40]	; (110c <xPortStartScheduler+0x48>)
    10e4:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    10e6:	480a      	ldr	r0, [pc, #40]	; (1110 <xPortStartScheduler+0x4c>)
    10e8:	490a      	ldr	r1, [pc, #40]	; (1114 <xPortStartScheduler+0x50>)
    10ea:	6008      	str	r0, [r1, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    10ec:	2107      	movs	r1, #7
    10ee:	6011      	str	r1, [r2, #0]
	uxCriticalNesting = 0;
    10f0:	4a09      	ldr	r2, [pc, #36]	; (1118 <xPortStartScheduler+0x54>)
    10f2:	6013      	str	r3, [r2, #0]
	vPortStartFirstTask();
    10f4:	4b09      	ldr	r3, [pc, #36]	; (111c <xPortStartScheduler+0x58>)
    10f6:	4798      	blx	r3
	vTaskSwitchContext();
    10f8:	4b09      	ldr	r3, [pc, #36]	; (1120 <xPortStartScheduler+0x5c>)
    10fa:	4798      	blx	r3
	prvTaskExitError();
    10fc:	4b09      	ldr	r3, [pc, #36]	; (1124 <xPortStartScheduler+0x60>)
    10fe:	4798      	blx	r3
}
    1100:	2000      	movs	r0, #0
    1102:	bd10      	pop	{r4, pc}
    1104:	e000ed20 	.word	0xe000ed20
    1108:	e000e010 	.word	0xe000e010
    110c:	e000e018 	.word	0xe000e018
    1110:	000176ff 	.word	0x000176ff
    1114:	e000e014 	.word	0xe000e014
    1118:	20000008 	.word	0x20000008
    111c:	00001071 	.word	0x00001071
    1120:	00002049 	.word	0x00002049
    1124:	0000104d 	.word	0x0000104d

00001128 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1128:	2280      	movs	r2, #128	; 0x80
    112a:	0552      	lsls	r2, r2, #21
    112c:	4b03      	ldr	r3, [pc, #12]	; (113c <vPortYield+0x14>)
    112e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    1130:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1134:	f3bf 8f6f 	isb	sy
}
    1138:	4770      	bx	lr
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	e000ed04 	.word	0xe000ed04

00001140 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    1140:	b672      	cpsid	i
    uxCriticalNesting++;
    1142:	4a04      	ldr	r2, [pc, #16]	; (1154 <vPortEnterCritical+0x14>)
    1144:	6813      	ldr	r3, [r2, #0]
    1146:	3301      	adds	r3, #1
    1148:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    114a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    114e:	f3bf 8f6f 	isb	sy
}
    1152:	4770      	bx	lr
    1154:	20000008 	.word	0x20000008

00001158 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    1158:	4b06      	ldr	r3, [pc, #24]	; (1174 <vPortExitCritical+0x1c>)
    115a:	681b      	ldr	r3, [r3, #0]
    115c:	2b00      	cmp	r3, #0
    115e:	d101      	bne.n	1164 <vPortExitCritical+0xc>
    1160:	b672      	cpsid	i
    1162:	e7fe      	b.n	1162 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    1164:	3b01      	subs	r3, #1
    1166:	4a03      	ldr	r2, [pc, #12]	; (1174 <vPortExitCritical+0x1c>)
    1168:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    116a:	2b00      	cmp	r3, #0
    116c:	d100      	bne.n	1170 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    116e:	b662      	cpsie	i
}
    1170:	4770      	bx	lr
    1172:	46c0      	nop			; (mov r8, r8)
    1174:	20000008 	.word	0x20000008

00001178 <ulSetInterruptMaskFromISR>:
	__asm volatile(
    1178:	f3ef 8010 	mrs	r0, PRIMASK
    117c:	b672      	cpsid	i
    117e:	4770      	bx	lr

00001180 <vClearInterruptMaskFromISR>:
	__asm volatile(
    1180:	f380 8810 	msr	PRIMASK, r0
    1184:	4770      	bx	lr
	...

00001190 <PendSV_Handler>:
	__asm volatile
    1190:	f3ef 8009 	mrs	r0, PSP
    1194:	4b0e      	ldr	r3, [pc, #56]	; (11d0 <pxCurrentTCBConst>)
    1196:	681a      	ldr	r2, [r3, #0]
    1198:	3820      	subs	r0, #32
    119a:	6010      	str	r0, [r2, #0]
    119c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    119e:	4644      	mov	r4, r8
    11a0:	464d      	mov	r5, r9
    11a2:	4656      	mov	r6, sl
    11a4:	465f      	mov	r7, fp
    11a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    11a8:	b508      	push	{r3, lr}
    11aa:	b672      	cpsid	i
    11ac:	f000 ff4c 	bl	2048 <vTaskSwitchContext>
    11b0:	b662      	cpsie	i
    11b2:	bc0c      	pop	{r2, r3}
    11b4:	6811      	ldr	r1, [r2, #0]
    11b6:	6808      	ldr	r0, [r1, #0]
    11b8:	3010      	adds	r0, #16
    11ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    11bc:	46a0      	mov	r8, r4
    11be:	46a9      	mov	r9, r5
    11c0:	46b2      	mov	sl, r6
    11c2:	46bb      	mov	fp, r7
    11c4:	f380 8809 	msr	PSP, r0
    11c8:	3820      	subs	r0, #32
    11ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    11cc:	4718      	bx	r3
    11ce:	46c0      	nop			; (mov r8, r8)

000011d0 <pxCurrentTCBConst>:
    11d0:	200043cc 	.word	0x200043cc

000011d4 <SysTick_Handler>:
{
    11d4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    11d6:	4b07      	ldr	r3, [pc, #28]	; (11f4 <SysTick_Handler+0x20>)
    11d8:	4798      	blx	r3
    11da:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    11dc:	4b06      	ldr	r3, [pc, #24]	; (11f8 <SysTick_Handler+0x24>)
    11de:	4798      	blx	r3
    11e0:	2800      	cmp	r0, #0
    11e2:	d003      	beq.n	11ec <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    11e4:	2280      	movs	r2, #128	; 0x80
    11e6:	0552      	lsls	r2, r2, #21
    11e8:	4b04      	ldr	r3, [pc, #16]	; (11fc <SysTick_Handler+0x28>)
    11ea:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    11ec:	0020      	movs	r0, r4
    11ee:	4b04      	ldr	r3, [pc, #16]	; (1200 <SysTick_Handler+0x2c>)
    11f0:	4798      	blx	r3
}
    11f2:	bd10      	pop	{r4, pc}
    11f4:	00001179 	.word	0x00001179
    11f8:	00001e05 	.word	0x00001e05
    11fc:	e000ed04 	.word	0xe000ed04
    1200:	00001181 	.word	0x00001181

00001204 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    1204:	b510      	push	{r4, lr}
    1206:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1208:	4b03      	ldr	r3, [pc, #12]	; (1218 <prvIsQueueEmpty+0x14>)
    120a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    120c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    120e:	4b03      	ldr	r3, [pc, #12]	; (121c <prvIsQueueEmpty+0x18>)
    1210:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1212:	4260      	negs	r0, r4
    1214:	4160      	adcs	r0, r4

	return xReturn;
}
    1216:	bd10      	pop	{r4, pc}
    1218:	00001141 	.word	0x00001141
    121c:	00001159 	.word	0x00001159

00001220 <prvCopyDataToQueue>:
{
    1220:	b570      	push	{r4, r5, r6, lr}
    1222:	0004      	movs	r4, r0
    1224:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1226:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1228:	6c02      	ldr	r2, [r0, #64]	; 0x40
    122a:	2a00      	cmp	r2, #0
    122c:	d10b      	bne.n	1246 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    122e:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1230:	6823      	ldr	r3, [r4, #0]
    1232:	4283      	cmp	r3, r0
    1234:	d104      	bne.n	1240 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1236:	6860      	ldr	r0, [r4, #4]
    1238:	4b16      	ldr	r3, [pc, #88]	; (1294 <prvCopyDataToQueue+0x74>)
    123a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    123c:	2300      	movs	r3, #0
    123e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    1240:	3501      	adds	r5, #1
    1242:	63a5      	str	r5, [r4, #56]	; 0x38
}
    1244:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    1246:	2e00      	cmp	r6, #0
    1248:	d10e      	bne.n	1268 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    124a:	6880      	ldr	r0, [r0, #8]
    124c:	4b12      	ldr	r3, [pc, #72]	; (1298 <prvCopyDataToQueue+0x78>)
    124e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1250:	68a3      	ldr	r3, [r4, #8]
    1252:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1254:	4694      	mov	ip, r2
    1256:	4463      	add	r3, ip
    1258:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    125a:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    125c:	6862      	ldr	r2, [r4, #4]
    125e:	4293      	cmp	r3, r2
    1260:	d3ee      	bcc.n	1240 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1262:	6823      	ldr	r3, [r4, #0]
    1264:	60a3      	str	r3, [r4, #8]
    1266:	e7eb      	b.n	1240 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1268:	68c0      	ldr	r0, [r0, #12]
    126a:	4b0b      	ldr	r3, [pc, #44]	; (1298 <prvCopyDataToQueue+0x78>)
    126c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    126e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1270:	425b      	negs	r3, r3
    1272:	68e2      	ldr	r2, [r4, #12]
    1274:	18d2      	adds	r2, r2, r3
    1276:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1278:	6821      	ldr	r1, [r4, #0]
    127a:	428a      	cmp	r2, r1
    127c:	d203      	bcs.n	1286 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    127e:	6862      	ldr	r2, [r4, #4]
    1280:	4694      	mov	ip, r2
    1282:	4463      	add	r3, ip
    1284:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    1286:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    1288:	2e02      	cmp	r6, #2
    128a:	d1d9      	bne.n	1240 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    128c:	4285      	cmp	r5, r0
    128e:	d0d7      	beq.n	1240 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    1290:	3d01      	subs	r5, #1
    1292:	e7d5      	b.n	1240 <prvCopyDataToQueue+0x20>
    1294:	000022fd 	.word	0x000022fd
    1298:	00004c35 	.word	0x00004c35

0000129c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    129c:	b570      	push	{r4, r5, r6, lr}
    129e:	b082      	sub	sp, #8
    12a0:	9001      	str	r0, [sp, #4]
    12a2:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    12a4:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    12a6:	2c00      	cmp	r4, #0
    12a8:	d005      	beq.n	12b6 <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    12aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    12ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    12ae:	4299      	cmp	r1, r3
    12b0:	d303      	bcc.n	12ba <prvNotifyQueueSetContainer+0x1e>
    12b2:	b672      	cpsid	i
    12b4:	e7fe      	b.n	12b4 <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
    12b6:	b672      	cpsid	i
    12b8:	e7fe      	b.n	12b8 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    12ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    12bc:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    12be:	428b      	cmp	r3, r1
    12c0:	d802      	bhi.n	12c8 <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    12c2:	0030      	movs	r0, r6
    12c4:	b002      	add	sp, #8
    12c6:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    12c8:	2345      	movs	r3, #69	; 0x45
    12ca:	5ce5      	ldrb	r5, [r4, r3]
    12cc:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    12ce:	a901      	add	r1, sp, #4
    12d0:	0020      	movs	r0, r4
    12d2:	4b0a      	ldr	r3, [pc, #40]	; (12fc <prvNotifyQueueSetContainer+0x60>)
    12d4:	4798      	blx	r3
    12d6:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    12d8:	1c6b      	adds	r3, r5, #1
    12da:	d10a      	bne.n	12f2 <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    12dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    12de:	2b00      	cmp	r3, #0
    12e0:	d0ef      	beq.n	12c2 <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    12e2:	0020      	movs	r0, r4
    12e4:	3024      	adds	r0, #36	; 0x24
    12e6:	4b06      	ldr	r3, [pc, #24]	; (1300 <prvNotifyQueueSetContainer+0x64>)
    12e8:	4798      	blx	r3
    12ea:	2800      	cmp	r0, #0
    12ec:	d0e9      	beq.n	12c2 <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
    12ee:	2601      	movs	r6, #1
    12f0:	e7e7      	b.n	12c2 <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    12f2:	3501      	adds	r5, #1
    12f4:	b26d      	sxtb	r5, r5
    12f6:	2345      	movs	r3, #69	; 0x45
    12f8:	54e5      	strb	r5, [r4, r3]
    12fa:	e7e2      	b.n	12c2 <prvNotifyQueueSetContainer+0x26>
    12fc:	00001221 	.word	0x00001221
    1300:	00002141 	.word	0x00002141

00001304 <prvCopyDataFromQueue>:
{
    1304:	b510      	push	{r4, lr}
    1306:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1308:	6c02      	ldr	r2, [r0, #64]	; 0x40
    130a:	2a00      	cmp	r2, #0
    130c:	d00b      	beq.n	1326 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    130e:	68c3      	ldr	r3, [r0, #12]
    1310:	189b      	adds	r3, r3, r2
    1312:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1314:	6841      	ldr	r1, [r0, #4]
    1316:	428b      	cmp	r3, r1
    1318:	d301      	bcc.n	131e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    131a:	6803      	ldr	r3, [r0, #0]
    131c:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    131e:	68c1      	ldr	r1, [r0, #12]
    1320:	0020      	movs	r0, r4
    1322:	4b01      	ldr	r3, [pc, #4]	; (1328 <prvCopyDataFromQueue+0x24>)
    1324:	4798      	blx	r3
}
    1326:	bd10      	pop	{r4, pc}
    1328:	00004c35 	.word	0x00004c35

0000132c <prvUnlockQueue>:
{
    132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    132e:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    1330:	4b25      	ldr	r3, [pc, #148]	; (13c8 <prvUnlockQueue+0x9c>)
    1332:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    1334:	2345      	movs	r3, #69	; 0x45
    1336:	5cfc      	ldrb	r4, [r7, r3]
    1338:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    133a:	2c00      	cmp	r4, #0
    133c:	dd1c      	ble.n	1378 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    133e:	4e23      	ldr	r6, [pc, #140]	; (13cc <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1340:	4d23      	ldr	r5, [pc, #140]	; (13d0 <prvUnlockQueue+0xa4>)
    1342:	e00b      	b.n	135c <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1346:	2b00      	cmp	r3, #0
    1348:	d016      	beq.n	1378 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    134a:	0038      	movs	r0, r7
    134c:	3024      	adds	r0, #36	; 0x24
    134e:	47a8      	blx	r5
    1350:	2800      	cmp	r0, #0
    1352:	d10e      	bne.n	1372 <prvUnlockQueue+0x46>
    1354:	3c01      	subs	r4, #1
    1356:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1358:	2c00      	cmp	r4, #0
    135a:	d00d      	beq.n	1378 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    135c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    135e:	2b00      	cmp	r3, #0
    1360:	d0f0      	beq.n	1344 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    1362:	2100      	movs	r1, #0
    1364:	0038      	movs	r0, r7
    1366:	47b0      	blx	r6
    1368:	2800      	cmp	r0, #0
    136a:	d0f3      	beq.n	1354 <prvUnlockQueue+0x28>
						vTaskMissedYield();
    136c:	4b19      	ldr	r3, [pc, #100]	; (13d4 <prvUnlockQueue+0xa8>)
    136e:	4798      	blx	r3
    1370:	e7f0      	b.n	1354 <prvUnlockQueue+0x28>
							vTaskMissedYield();
    1372:	4b18      	ldr	r3, [pc, #96]	; (13d4 <prvUnlockQueue+0xa8>)
    1374:	4798      	blx	r3
    1376:	e7ed      	b.n	1354 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    1378:	22ff      	movs	r2, #255	; 0xff
    137a:	2345      	movs	r3, #69	; 0x45
    137c:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    137e:	4b16      	ldr	r3, [pc, #88]	; (13d8 <prvUnlockQueue+0xac>)
    1380:	4798      	blx	r3
	taskENTER_CRITICAL();
    1382:	4b11      	ldr	r3, [pc, #68]	; (13c8 <prvUnlockQueue+0x9c>)
    1384:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    1386:	2344      	movs	r3, #68	; 0x44
    1388:	5cfc      	ldrb	r4, [r7, r3]
    138a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    138c:	2c00      	cmp	r4, #0
    138e:	dd14      	ble.n	13ba <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1390:	693b      	ldr	r3, [r7, #16]
    1392:	2b00      	cmp	r3, #0
    1394:	d011      	beq.n	13ba <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1396:	003d      	movs	r5, r7
    1398:	3510      	adds	r5, #16
    139a:	4e0d      	ldr	r6, [pc, #52]	; (13d0 <prvUnlockQueue+0xa4>)
    139c:	e006      	b.n	13ac <prvUnlockQueue+0x80>
    139e:	3c01      	subs	r4, #1
    13a0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    13a2:	2c00      	cmp	r4, #0
    13a4:	d009      	beq.n	13ba <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    13a6:	693b      	ldr	r3, [r7, #16]
    13a8:	2b00      	cmp	r3, #0
    13aa:	d006      	beq.n	13ba <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    13ac:	0028      	movs	r0, r5
    13ae:	47b0      	blx	r6
    13b0:	2800      	cmp	r0, #0
    13b2:	d0f4      	beq.n	139e <prvUnlockQueue+0x72>
					vTaskMissedYield();
    13b4:	4b07      	ldr	r3, [pc, #28]	; (13d4 <prvUnlockQueue+0xa8>)
    13b6:	4798      	blx	r3
    13b8:	e7f1      	b.n	139e <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    13ba:	22ff      	movs	r2, #255	; 0xff
    13bc:	2344      	movs	r3, #68	; 0x44
    13be:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    13c0:	4b05      	ldr	r3, [pc, #20]	; (13d8 <prvUnlockQueue+0xac>)
    13c2:	4798      	blx	r3
}
    13c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13c6:	46c0      	nop			; (mov r8, r8)
    13c8:	00001141 	.word	0x00001141
    13cc:	0000129d 	.word	0x0000129d
    13d0:	00002141 	.word	0x00002141
    13d4:	0000223d 	.word	0x0000223d
    13d8:	00001159 	.word	0x00001159

000013dc <xQueueGenericReset>:
{
    13dc:	b570      	push	{r4, r5, r6, lr}
    13de:	0004      	movs	r4, r0
    13e0:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    13e2:	2800      	cmp	r0, #0
    13e4:	d021      	beq.n	142a <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    13e6:	4b17      	ldr	r3, [pc, #92]	; (1444 <xQueueGenericReset+0x68>)
    13e8:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    13ea:	6822      	ldr	r2, [r4, #0]
    13ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
    13ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    13f0:	434b      	muls	r3, r1
    13f2:	18d0      	adds	r0, r2, r3
    13f4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    13f6:	2000      	movs	r0, #0
    13f8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    13fa:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    13fc:	1a5b      	subs	r3, r3, r1
    13fe:	18d3      	adds	r3, r2, r3
    1400:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    1402:	23ff      	movs	r3, #255	; 0xff
    1404:	2244      	movs	r2, #68	; 0x44
    1406:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    1408:	3201      	adds	r2, #1
    140a:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    140c:	2d00      	cmp	r5, #0
    140e:	d111      	bne.n	1434 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1410:	6923      	ldr	r3, [r4, #16]
    1412:	2b00      	cmp	r3, #0
    1414:	d005      	beq.n	1422 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1416:	0020      	movs	r0, r4
    1418:	3010      	adds	r0, #16
    141a:	4b0b      	ldr	r3, [pc, #44]	; (1448 <xQueueGenericReset+0x6c>)
    141c:	4798      	blx	r3
    141e:	2800      	cmp	r0, #0
    1420:	d105      	bne.n	142e <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    1422:	4b0a      	ldr	r3, [pc, #40]	; (144c <xQueueGenericReset+0x70>)
    1424:	4798      	blx	r3
}
    1426:	2001      	movs	r0, #1
    1428:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    142a:	b672      	cpsid	i
    142c:	e7fe      	b.n	142c <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    142e:	4b08      	ldr	r3, [pc, #32]	; (1450 <xQueueGenericReset+0x74>)
    1430:	4798      	blx	r3
    1432:	e7f6      	b.n	1422 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1434:	0020      	movs	r0, r4
    1436:	3010      	adds	r0, #16
    1438:	4d06      	ldr	r5, [pc, #24]	; (1454 <xQueueGenericReset+0x78>)
    143a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    143c:	0020      	movs	r0, r4
    143e:	3024      	adds	r0, #36	; 0x24
    1440:	47a8      	blx	r5
    1442:	e7ee      	b.n	1422 <xQueueGenericReset+0x46>
    1444:	00001141 	.word	0x00001141
    1448:	00002141 	.word	0x00002141
    144c:	00001159 	.word	0x00001159
    1450:	00001129 	.word	0x00001129
    1454:	00000d19 	.word	0x00000d19

00001458 <xQueueGenericCreate>:
	{
    1458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    145a:	0006      	movs	r6, r0
    145c:	000d      	movs	r5, r1
    145e:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    1460:	2800      	cmp	r0, #0
    1462:	d101      	bne.n	1468 <xQueueGenericCreate+0x10>
    1464:	b672      	cpsid	i
    1466:	e7fe      	b.n	1466 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1468:	0008      	movs	r0, r1
    146a:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    146c:	3054      	adds	r0, #84	; 0x54
    146e:	4b0b      	ldr	r3, [pc, #44]	; (149c <xQueueGenericCreate+0x44>)
    1470:	4798      	blx	r3
    1472:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    1474:	d010      	beq.n	1498 <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
    1476:	2d00      	cmp	r5, #0
    1478:	d003      	beq.n	1482 <xQueueGenericCreate+0x2a>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    147a:	0003      	movs	r3, r0
    147c:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    147e:	6003      	str	r3, [r0, #0]
    1480:	e000      	b.n	1484 <xQueueGenericCreate+0x2c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1482:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    1484:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    1486:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1488:	2101      	movs	r1, #1
    148a:	0020      	movs	r0, r4
    148c:	4b04      	ldr	r3, [pc, #16]	; (14a0 <xQueueGenericCreate+0x48>)
    148e:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    1490:	2350      	movs	r3, #80	; 0x50
    1492:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    1494:	2300      	movs	r3, #0
    1496:	64a3      	str	r3, [r4, #72]	; 0x48
	}
    1498:	0020      	movs	r0, r4
    149a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    149c:	00000c05 	.word	0x00000c05
    14a0:	000013dd 	.word	0x000013dd

000014a4 <xQueueGenericSend>:
{
    14a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14a6:	46ce      	mov	lr, r9
    14a8:	4647      	mov	r7, r8
    14aa:	b580      	push	{r7, lr}
    14ac:	b085      	sub	sp, #20
    14ae:	0004      	movs	r4, r0
    14b0:	000f      	movs	r7, r1
    14b2:	9201      	str	r2, [sp, #4]
    14b4:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    14b6:	2800      	cmp	r0, #0
    14b8:	d00c      	beq.n	14d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    14ba:	2900      	cmp	r1, #0
    14bc:	d00c      	beq.n	14d8 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    14be:	2d02      	cmp	r5, #2
    14c0:	d00f      	beq.n	14e2 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    14c2:	4b4e      	ldr	r3, [pc, #312]	; (15fc <xQueueGenericSend+0x158>)
    14c4:	4798      	blx	r3
    14c6:	2800      	cmp	r0, #0
    14c8:	d110      	bne.n	14ec <xQueueGenericSend+0x48>
    14ca:	9b01      	ldr	r3, [sp, #4]
    14cc:	2b00      	cmp	r3, #0
    14ce:	d011      	beq.n	14f4 <xQueueGenericSend+0x50>
    14d0:	b672      	cpsid	i
    14d2:	e7fe      	b.n	14d2 <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
    14d4:	b672      	cpsid	i
    14d6:	e7fe      	b.n	14d6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    14d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
    14da:	2b00      	cmp	r3, #0
    14dc:	d0ef      	beq.n	14be <xQueueGenericSend+0x1a>
    14de:	b672      	cpsid	i
    14e0:	e7fe      	b.n	14e0 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    14e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    14e4:	2b01      	cmp	r3, #1
    14e6:	d0ec      	beq.n	14c2 <xQueueGenericSend+0x1e>
    14e8:	b672      	cpsid	i
    14ea:	e7fe      	b.n	14ea <xQueueGenericSend+0x46>
    14ec:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    14ee:	4b44      	ldr	r3, [pc, #272]	; (1600 <xQueueGenericSend+0x15c>)
    14f0:	4698      	mov	r8, r3
    14f2:	e04c      	b.n	158e <xQueueGenericSend+0xea>
    14f4:	2600      	movs	r6, #0
    14f6:	e7fa      	b.n	14ee <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    14f8:	002a      	movs	r2, r5
    14fa:	0039      	movs	r1, r7
    14fc:	0020      	movs	r0, r4
    14fe:	4b41      	ldr	r3, [pc, #260]	; (1604 <xQueueGenericSend+0x160>)
    1500:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    1502:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1504:	2b00      	cmp	r3, #0
    1506:	d00f      	beq.n	1528 <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    1508:	0029      	movs	r1, r5
    150a:	0020      	movs	r0, r4
    150c:	4b3e      	ldr	r3, [pc, #248]	; (1608 <xQueueGenericSend+0x164>)
    150e:	4798      	blx	r3
    1510:	2800      	cmp	r0, #0
    1512:	d001      	beq.n	1518 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    1514:	4b3d      	ldr	r3, [pc, #244]	; (160c <xQueueGenericSend+0x168>)
    1516:	4798      	blx	r3
				taskEXIT_CRITICAL();
    1518:	4b3d      	ldr	r3, [pc, #244]	; (1610 <xQueueGenericSend+0x16c>)
    151a:	4798      	blx	r3
				return pdPASS;
    151c:	2001      	movs	r0, #1
}
    151e:	b005      	add	sp, #20
    1520:	bc0c      	pop	{r2, r3}
    1522:	4690      	mov	r8, r2
    1524:	4699      	mov	r9, r3
    1526:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1528:	6a63      	ldr	r3, [r4, #36]	; 0x24
    152a:	2b00      	cmp	r3, #0
    152c:	d008      	beq.n	1540 <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    152e:	0020      	movs	r0, r4
    1530:	3024      	adds	r0, #36	; 0x24
    1532:	4b38      	ldr	r3, [pc, #224]	; (1614 <xQueueGenericSend+0x170>)
    1534:	4798      	blx	r3
    1536:	2800      	cmp	r0, #0
    1538:	d0ee      	beq.n	1518 <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
    153a:	4b34      	ldr	r3, [pc, #208]	; (160c <xQueueGenericSend+0x168>)
    153c:	4798      	blx	r3
    153e:	e7eb      	b.n	1518 <xQueueGenericSend+0x74>
						else if( xYieldRequired != pdFALSE )
    1540:	2800      	cmp	r0, #0
    1542:	d0e9      	beq.n	1518 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    1544:	4b31      	ldr	r3, [pc, #196]	; (160c <xQueueGenericSend+0x168>)
    1546:	4798      	blx	r3
    1548:	e7e6      	b.n	1518 <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
    154a:	4b31      	ldr	r3, [pc, #196]	; (1610 <xQueueGenericSend+0x16c>)
    154c:	4798      	blx	r3
					return errQUEUE_FULL;
    154e:	2000      	movs	r0, #0
    1550:	e7e5      	b.n	151e <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
    1552:	4b2f      	ldr	r3, [pc, #188]	; (1610 <xQueueGenericSend+0x16c>)
    1554:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1556:	a901      	add	r1, sp, #4
    1558:	a802      	add	r0, sp, #8
    155a:	4b2f      	ldr	r3, [pc, #188]	; (1618 <xQueueGenericSend+0x174>)
    155c:	4798      	blx	r3
    155e:	2800      	cmp	r0, #0
    1560:	d144      	bne.n	15ec <xQueueGenericSend+0x148>
	taskENTER_CRITICAL();
    1562:	4b27      	ldr	r3, [pc, #156]	; (1600 <xQueueGenericSend+0x15c>)
    1564:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1568:	4699      	mov	r9, r3
    156a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    156c:	4b28      	ldr	r3, [pc, #160]	; (1610 <xQueueGenericSend+0x16c>)
    156e:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1570:	45b1      	cmp	r9, r6
    1572:	d135      	bne.n	15e0 <xQueueGenericSend+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1574:	0020      	movs	r0, r4
    1576:	3010      	adds	r0, #16
    1578:	9901      	ldr	r1, [sp, #4]
    157a:	4b28      	ldr	r3, [pc, #160]	; (161c <xQueueGenericSend+0x178>)
    157c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    157e:	0020      	movs	r0, r4
    1580:	4b27      	ldr	r3, [pc, #156]	; (1620 <xQueueGenericSend+0x17c>)
    1582:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1584:	4b27      	ldr	r3, [pc, #156]	; (1624 <xQueueGenericSend+0x180>)
    1586:	4798      	blx	r3
    1588:	2800      	cmp	r0, #0
    158a:	d026      	beq.n	15da <xQueueGenericSend+0x136>
    158c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    158e:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1590:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1592:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1594:	4293      	cmp	r3, r2
    1596:	d3af      	bcc.n	14f8 <xQueueGenericSend+0x54>
    1598:	2d02      	cmp	r5, #2
    159a:	d0ad      	beq.n	14f8 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    159c:	9b01      	ldr	r3, [sp, #4]
    159e:	2b00      	cmp	r3, #0
    15a0:	d0d3      	beq.n	154a <xQueueGenericSend+0xa6>
				else if( xEntryTimeSet == pdFALSE )
    15a2:	2e00      	cmp	r6, #0
    15a4:	d102      	bne.n	15ac <xQueueGenericSend+0x108>
					vTaskInternalSetTimeOutState( &xTimeOut );
    15a6:	a802      	add	r0, sp, #8
    15a8:	4b1f      	ldr	r3, [pc, #124]	; (1628 <xQueueGenericSend+0x184>)
    15aa:	4798      	blx	r3
		taskEXIT_CRITICAL();
    15ac:	4b18      	ldr	r3, [pc, #96]	; (1610 <xQueueGenericSend+0x16c>)
    15ae:	4798      	blx	r3
		vTaskSuspendAll();
    15b0:	4b1e      	ldr	r3, [pc, #120]	; (162c <xQueueGenericSend+0x188>)
    15b2:	4798      	blx	r3
		prvLockQueue( pxQueue );
    15b4:	4b12      	ldr	r3, [pc, #72]	; (1600 <xQueueGenericSend+0x15c>)
    15b6:	4798      	blx	r3
    15b8:	2344      	movs	r3, #68	; 0x44
    15ba:	5ce3      	ldrb	r3, [r4, r3]
    15bc:	b25b      	sxtb	r3, r3
    15be:	3301      	adds	r3, #1
    15c0:	d102      	bne.n	15c8 <xQueueGenericSend+0x124>
    15c2:	2200      	movs	r2, #0
    15c4:	2344      	movs	r3, #68	; 0x44
    15c6:	54e2      	strb	r2, [r4, r3]
    15c8:	2345      	movs	r3, #69	; 0x45
    15ca:	5ce3      	ldrb	r3, [r4, r3]
    15cc:	b25b      	sxtb	r3, r3
    15ce:	3301      	adds	r3, #1
    15d0:	d1bf      	bne.n	1552 <xQueueGenericSend+0xae>
    15d2:	2200      	movs	r2, #0
    15d4:	2345      	movs	r3, #69	; 0x45
    15d6:	54e2      	strb	r2, [r4, r3]
    15d8:	e7bb      	b.n	1552 <xQueueGenericSend+0xae>
					portYIELD_WITHIN_API();
    15da:	4b0c      	ldr	r3, [pc, #48]	; (160c <xQueueGenericSend+0x168>)
    15dc:	4798      	blx	r3
    15de:	e7d5      	b.n	158c <xQueueGenericSend+0xe8>
				prvUnlockQueue( pxQueue );
    15e0:	0020      	movs	r0, r4
    15e2:	4b0f      	ldr	r3, [pc, #60]	; (1620 <xQueueGenericSend+0x17c>)
    15e4:	4798      	blx	r3
				( void ) xTaskResumeAll();
    15e6:	4b0f      	ldr	r3, [pc, #60]	; (1624 <xQueueGenericSend+0x180>)
    15e8:	4798      	blx	r3
    15ea:	e7cf      	b.n	158c <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
    15ec:	0020      	movs	r0, r4
    15ee:	4b0c      	ldr	r3, [pc, #48]	; (1620 <xQueueGenericSend+0x17c>)
    15f0:	4798      	blx	r3
			( void ) xTaskResumeAll();
    15f2:	4b0c      	ldr	r3, [pc, #48]	; (1624 <xQueueGenericSend+0x180>)
    15f4:	4798      	blx	r3
			return errQUEUE_FULL;
    15f6:	2000      	movs	r0, #0
    15f8:	e791      	b.n	151e <xQueueGenericSend+0x7a>
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	00002249 	.word	0x00002249
    1600:	00001141 	.word	0x00001141
    1604:	00001221 	.word	0x00001221
    1608:	0000129d 	.word	0x0000129d
    160c:	00001129 	.word	0x00001129
    1610:	00001159 	.word	0x00001159
    1614:	00002141 	.word	0x00002141
    1618:	000021d1 	.word	0x000021d1
    161c:	000020dd 	.word	0x000020dd
    1620:	0000132d 	.word	0x0000132d
    1624:	00001f15 	.word	0x00001f15
    1628:	000021c1 	.word	0x000021c1
    162c:	00001de9 	.word	0x00001de9

00001630 <xQueueCreateMutex>:
	{
    1630:	b570      	push	{r4, r5, r6, lr}
    1632:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    1634:	2100      	movs	r1, #0
    1636:	2001      	movs	r0, #1
    1638:	4b06      	ldr	r3, [pc, #24]	; (1654 <xQueueCreateMutex+0x24>)
    163a:	4798      	blx	r3
    163c:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    163e:	d007      	beq.n	1650 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
    1640:	2300      	movs	r3, #0
    1642:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1644:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
    1646:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    1648:	2200      	movs	r2, #0
    164a:	2100      	movs	r1, #0
    164c:	4d02      	ldr	r5, [pc, #8]	; (1658 <xQueueCreateMutex+0x28>)
    164e:	47a8      	blx	r5
	}
    1650:	0020      	movs	r0, r4
    1652:	bd70      	pop	{r4, r5, r6, pc}
    1654:	00001459 	.word	0x00001459
    1658:	000014a5 	.word	0x000014a5

0000165c <xQueueGenericSendFromISR>:
{
    165c:	b5f0      	push	{r4, r5, r6, r7, lr}
    165e:	b083      	sub	sp, #12
    1660:	0004      	movs	r4, r0
    1662:	9101      	str	r1, [sp, #4]
    1664:	0016      	movs	r6, r2
    1666:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    1668:	2800      	cmp	r0, #0
    166a:	d012      	beq.n	1692 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    166c:	9b01      	ldr	r3, [sp, #4]
    166e:	2b00      	cmp	r3, #0
    1670:	d011      	beq.n	1696 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1672:	2d02      	cmp	r5, #2
    1674:	d014      	beq.n	16a0 <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1676:	4b28      	ldr	r3, [pc, #160]	; (1718 <xQueueGenericSendFromISR+0xbc>)
    1678:	4798      	blx	r3
    167a:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    167c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    167e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1680:	429a      	cmp	r2, r3
    1682:	d82f      	bhi.n	16e4 <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
    1684:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    1686:	9800      	ldr	r0, [sp, #0]
    1688:	4b24      	ldr	r3, [pc, #144]	; (171c <xQueueGenericSendFromISR+0xc0>)
    168a:	4798      	blx	r3
}
    168c:	0028      	movs	r0, r5
    168e:	b003      	add	sp, #12
    1690:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
    1692:	b672      	cpsid	i
    1694:	e7fe      	b.n	1694 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1696:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1698:	2b00      	cmp	r3, #0
    169a:	d0ea      	beq.n	1672 <xQueueGenericSendFromISR+0x16>
    169c:	b672      	cpsid	i
    169e:	e7fe      	b.n	169e <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    16a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    16a2:	2b01      	cmp	r3, #1
    16a4:	d01a      	beq.n	16dc <xQueueGenericSendFromISR+0x80>
    16a6:	b672      	cpsid	i
    16a8:	e7fe      	b.n	16a8 <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    16aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    16ac:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    16ae:	2b00      	cmp	r3, #0
    16b0:	d0e9      	beq.n	1686 <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    16b2:	0020      	movs	r0, r4
    16b4:	3024      	adds	r0, #36	; 0x24
    16b6:	4b1a      	ldr	r3, [pc, #104]	; (1720 <xQueueGenericSendFromISR+0xc4>)
    16b8:	4798      	blx	r3
    16ba:	2800      	cmp	r0, #0
    16bc:	d0e3      	beq.n	1686 <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
    16be:	2e00      	cmp	r6, #0
    16c0:	d00a      	beq.n	16d8 <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
    16c2:	2301      	movs	r3, #1
    16c4:	6033      	str	r3, [r6, #0]
    16c6:	e7de      	b.n	1686 <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    16c8:	1c7b      	adds	r3, r7, #1
    16ca:	b25b      	sxtb	r3, r3
    16cc:	2245      	movs	r2, #69	; 0x45
    16ce:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    16d0:	2501      	movs	r5, #1
    16d2:	e7d8      	b.n	1686 <xQueueGenericSendFromISR+0x2a>
    16d4:	2501      	movs	r5, #1
    16d6:	e7d6      	b.n	1686 <xQueueGenericSendFromISR+0x2a>
    16d8:	2501      	movs	r5, #1
    16da:	e7d4      	b.n	1686 <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    16dc:	4b0e      	ldr	r3, [pc, #56]	; (1718 <xQueueGenericSendFromISR+0xbc>)
    16de:	4798      	blx	r3
    16e0:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    16e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
    16e4:	2345      	movs	r3, #69	; 0x45
    16e6:	5ce7      	ldrb	r7, [r4, r3]
    16e8:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    16ea:	002a      	movs	r2, r5
    16ec:	9901      	ldr	r1, [sp, #4]
    16ee:	0020      	movs	r0, r4
    16f0:	4b0c      	ldr	r3, [pc, #48]	; (1724 <xQueueGenericSendFromISR+0xc8>)
    16f2:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    16f4:	1c7b      	adds	r3, r7, #1
    16f6:	d1e7      	bne.n	16c8 <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
    16f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    16fa:	2b00      	cmp	r3, #0
    16fc:	d0d5      	beq.n	16aa <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    16fe:	0029      	movs	r1, r5
    1700:	0020      	movs	r0, r4
    1702:	4b09      	ldr	r3, [pc, #36]	; (1728 <xQueueGenericSendFromISR+0xcc>)
    1704:	4798      	blx	r3
			xReturn = pdPASS;
    1706:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    1708:	2800      	cmp	r0, #0
    170a:	d0bc      	beq.n	1686 <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
    170c:	2e00      	cmp	r6, #0
    170e:	d0e1      	beq.n	16d4 <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
    1710:	2301      	movs	r3, #1
    1712:	6033      	str	r3, [r6, #0]
    1714:	e7b7      	b.n	1686 <xQueueGenericSendFromISR+0x2a>
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	00001179 	.word	0x00001179
    171c:	00001181 	.word	0x00001181
    1720:	00002141 	.word	0x00002141
    1724:	00001221 	.word	0x00001221
    1728:	0000129d 	.word	0x0000129d

0000172c <xQueueReceive>:
{
    172c:	b5f0      	push	{r4, r5, r6, r7, lr}
    172e:	46c6      	mov	lr, r8
    1730:	b500      	push	{lr}
    1732:	b084      	sub	sp, #16
    1734:	0004      	movs	r4, r0
    1736:	000f      	movs	r7, r1
    1738:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    173a:	2800      	cmp	r0, #0
    173c:	d00a      	beq.n	1754 <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    173e:	2900      	cmp	r1, #0
    1740:	d00a      	beq.n	1758 <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1742:	4b42      	ldr	r3, [pc, #264]	; (184c <xQueueReceive+0x120>)
    1744:	4798      	blx	r3
    1746:	2800      	cmp	r0, #0
    1748:	d10b      	bne.n	1762 <xQueueReceive+0x36>
    174a:	9b01      	ldr	r3, [sp, #4]
    174c:	2b00      	cmp	r3, #0
    174e:	d00c      	beq.n	176a <xQueueReceive+0x3e>
    1750:	b672      	cpsid	i
    1752:	e7fe      	b.n	1752 <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
    1754:	b672      	cpsid	i
    1756:	e7fe      	b.n	1756 <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1758:	6c03      	ldr	r3, [r0, #64]	; 0x40
    175a:	2b00      	cmp	r3, #0
    175c:	d0f1      	beq.n	1742 <xQueueReceive+0x16>
    175e:	b672      	cpsid	i
    1760:	e7fe      	b.n	1760 <xQueueReceive+0x34>
    1762:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    1764:	4b3a      	ldr	r3, [pc, #232]	; (1850 <xQueueReceive+0x124>)
    1766:	4698      	mov	r8, r3
    1768:	e02f      	b.n	17ca <xQueueReceive+0x9e>
    176a:	2600      	movs	r6, #0
    176c:	e7fa      	b.n	1764 <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    176e:	0039      	movs	r1, r7
    1770:	0020      	movs	r0, r4
    1772:	4b38      	ldr	r3, [pc, #224]	; (1854 <xQueueReceive+0x128>)
    1774:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    1776:	3d01      	subs	r5, #1
    1778:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    177a:	6923      	ldr	r3, [r4, #16]
    177c:	2b00      	cmp	r3, #0
    177e:	d007      	beq.n	1790 <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1780:	0020      	movs	r0, r4
    1782:	3010      	adds	r0, #16
    1784:	4b34      	ldr	r3, [pc, #208]	; (1858 <xQueueReceive+0x12c>)
    1786:	4798      	blx	r3
    1788:	2800      	cmp	r0, #0
    178a:	d001      	beq.n	1790 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
    178c:	4b33      	ldr	r3, [pc, #204]	; (185c <xQueueReceive+0x130>)
    178e:	4798      	blx	r3
				taskEXIT_CRITICAL();
    1790:	4b33      	ldr	r3, [pc, #204]	; (1860 <xQueueReceive+0x134>)
    1792:	4798      	blx	r3
				return pdPASS;
    1794:	2001      	movs	r0, #1
}
    1796:	b004      	add	sp, #16
    1798:	bc04      	pop	{r2}
    179a:	4690      	mov	r8, r2
    179c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    179e:	4b30      	ldr	r3, [pc, #192]	; (1860 <xQueueReceive+0x134>)
    17a0:	4798      	blx	r3
					return errQUEUE_EMPTY;
    17a2:	2000      	movs	r0, #0
    17a4:	e7f7      	b.n	1796 <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
    17a6:	a802      	add	r0, sp, #8
    17a8:	4b2e      	ldr	r3, [pc, #184]	; (1864 <xQueueReceive+0x138>)
    17aa:	4798      	blx	r3
    17ac:	e016      	b.n	17dc <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
    17ae:	2200      	movs	r2, #0
    17b0:	2344      	movs	r3, #68	; 0x44
    17b2:	54e2      	strb	r2, [r4, r3]
    17b4:	e01d      	b.n	17f2 <xQueueReceive+0xc6>
    17b6:	2200      	movs	r2, #0
    17b8:	2345      	movs	r3, #69	; 0x45
    17ba:	54e2      	strb	r2, [r4, r3]
    17bc:	e01e      	b.n	17fc <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
    17be:	0020      	movs	r0, r4
    17c0:	4b29      	ldr	r3, [pc, #164]	; (1868 <xQueueReceive+0x13c>)
    17c2:	4798      	blx	r3
				( void ) xTaskResumeAll();
    17c4:	4b29      	ldr	r3, [pc, #164]	; (186c <xQueueReceive+0x140>)
    17c6:	4798      	blx	r3
    17c8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    17ca:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    17cc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    17ce:	2d00      	cmp	r5, #0
    17d0:	d1cd      	bne.n	176e <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
    17d2:	9b01      	ldr	r3, [sp, #4]
    17d4:	2b00      	cmp	r3, #0
    17d6:	d0e2      	beq.n	179e <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
    17d8:	2e00      	cmp	r6, #0
    17da:	d0e4      	beq.n	17a6 <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
    17dc:	4b20      	ldr	r3, [pc, #128]	; (1860 <xQueueReceive+0x134>)
    17de:	4798      	blx	r3
		vTaskSuspendAll();
    17e0:	4b23      	ldr	r3, [pc, #140]	; (1870 <xQueueReceive+0x144>)
    17e2:	4798      	blx	r3
		prvLockQueue( pxQueue );
    17e4:	4b1a      	ldr	r3, [pc, #104]	; (1850 <xQueueReceive+0x124>)
    17e6:	4798      	blx	r3
    17e8:	2344      	movs	r3, #68	; 0x44
    17ea:	5ce3      	ldrb	r3, [r4, r3]
    17ec:	b25b      	sxtb	r3, r3
    17ee:	3301      	adds	r3, #1
    17f0:	d0dd      	beq.n	17ae <xQueueReceive+0x82>
    17f2:	2345      	movs	r3, #69	; 0x45
    17f4:	5ce3      	ldrb	r3, [r4, r3]
    17f6:	b25b      	sxtb	r3, r3
    17f8:	3301      	adds	r3, #1
    17fa:	d0dc      	beq.n	17b6 <xQueueReceive+0x8a>
    17fc:	4b18      	ldr	r3, [pc, #96]	; (1860 <xQueueReceive+0x134>)
    17fe:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1800:	a901      	add	r1, sp, #4
    1802:	a802      	add	r0, sp, #8
    1804:	4b1b      	ldr	r3, [pc, #108]	; (1874 <xQueueReceive+0x148>)
    1806:	4798      	blx	r3
    1808:	2800      	cmp	r0, #0
    180a:	d113      	bne.n	1834 <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    180c:	0020      	movs	r0, r4
    180e:	4b1a      	ldr	r3, [pc, #104]	; (1878 <xQueueReceive+0x14c>)
    1810:	4798      	blx	r3
    1812:	2800      	cmp	r0, #0
    1814:	d0d3      	beq.n	17be <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1816:	0020      	movs	r0, r4
    1818:	3024      	adds	r0, #36	; 0x24
    181a:	9901      	ldr	r1, [sp, #4]
    181c:	4b17      	ldr	r3, [pc, #92]	; (187c <xQueueReceive+0x150>)
    181e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1820:	0020      	movs	r0, r4
    1822:	4b11      	ldr	r3, [pc, #68]	; (1868 <xQueueReceive+0x13c>)
    1824:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1826:	4b11      	ldr	r3, [pc, #68]	; (186c <xQueueReceive+0x140>)
    1828:	4798      	blx	r3
    182a:	2800      	cmp	r0, #0
    182c:	d1cc      	bne.n	17c8 <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
    182e:	4b0b      	ldr	r3, [pc, #44]	; (185c <xQueueReceive+0x130>)
    1830:	4798      	blx	r3
    1832:	e7c9      	b.n	17c8 <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
    1834:	0020      	movs	r0, r4
    1836:	4b0c      	ldr	r3, [pc, #48]	; (1868 <xQueueReceive+0x13c>)
    1838:	4798      	blx	r3
			( void ) xTaskResumeAll();
    183a:	4b0c      	ldr	r3, [pc, #48]	; (186c <xQueueReceive+0x140>)
    183c:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    183e:	0020      	movs	r0, r4
    1840:	4b0d      	ldr	r3, [pc, #52]	; (1878 <xQueueReceive+0x14c>)
    1842:	4798      	blx	r3
    1844:	2800      	cmp	r0, #0
    1846:	d0bf      	beq.n	17c8 <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
    1848:	2000      	movs	r0, #0
    184a:	e7a4      	b.n	1796 <xQueueReceive+0x6a>
    184c:	00002249 	.word	0x00002249
    1850:	00001141 	.word	0x00001141
    1854:	00001305 	.word	0x00001305
    1858:	00002141 	.word	0x00002141
    185c:	00001129 	.word	0x00001129
    1860:	00001159 	.word	0x00001159
    1864:	000021c1 	.word	0x000021c1
    1868:	0000132d 	.word	0x0000132d
    186c:	00001f15 	.word	0x00001f15
    1870:	00001de9 	.word	0x00001de9
    1874:	000021d1 	.word	0x000021d1
    1878:	00001205 	.word	0x00001205
    187c:	000020dd 	.word	0x000020dd

00001880 <xQueueSemaphoreTake>:
{
    1880:	b5f0      	push	{r4, r5, r6, r7, lr}
    1882:	b085      	sub	sp, #20
    1884:	1e04      	subs	r4, r0, #0
    1886:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
    1888:	d004      	beq.n	1894 <xQueueSemaphoreTake+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
    188a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    188c:	2b00      	cmp	r3, #0
    188e:	d003      	beq.n	1898 <xQueueSemaphoreTake+0x18>
    1890:	b672      	cpsid	i
    1892:	e7fe      	b.n	1892 <xQueueSemaphoreTake+0x12>
	configASSERT( ( pxQueue ) );
    1894:	b672      	cpsid	i
    1896:	e7fe      	b.n	1896 <xQueueSemaphoreTake+0x16>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1898:	4b50      	ldr	r3, [pc, #320]	; (19dc <xQueueSemaphoreTake+0x15c>)
    189a:	4798      	blx	r3
    189c:	2800      	cmp	r0, #0
    189e:	d104      	bne.n	18aa <xQueueSemaphoreTake+0x2a>
    18a0:	9b01      	ldr	r3, [sp, #4]
    18a2:	2b00      	cmp	r3, #0
    18a4:	d005      	beq.n	18b2 <xQueueSemaphoreTake+0x32>
    18a6:	b672      	cpsid	i
    18a8:	e7fe      	b.n	18a8 <xQueueSemaphoreTake+0x28>
    18aa:	2500      	movs	r5, #0
    18ac:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    18ae:	4f4c      	ldr	r7, [pc, #304]	; (19e0 <xQueueSemaphoreTake+0x160>)
    18b0:	e048      	b.n	1944 <xQueueSemaphoreTake+0xc4>
    18b2:	2500      	movs	r5, #0
    18b4:	2600      	movs	r6, #0
    18b6:	e7fa      	b.n	18ae <xQueueSemaphoreTake+0x2e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    18b8:	3b01      	subs	r3, #1
    18ba:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    18bc:	6823      	ldr	r3, [r4, #0]
    18be:	2b00      	cmp	r3, #0
    18c0:	d102      	bne.n	18c8 <xQueueSemaphoreTake+0x48>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    18c2:	4b48      	ldr	r3, [pc, #288]	; (19e4 <xQueueSemaphoreTake+0x164>)
    18c4:	4798      	blx	r3
    18c6:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    18c8:	6923      	ldr	r3, [r4, #16]
    18ca:	2b00      	cmp	r3, #0
    18cc:	d007      	beq.n	18de <xQueueSemaphoreTake+0x5e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    18ce:	0020      	movs	r0, r4
    18d0:	3010      	adds	r0, #16
    18d2:	4b45      	ldr	r3, [pc, #276]	; (19e8 <xQueueSemaphoreTake+0x168>)
    18d4:	4798      	blx	r3
    18d6:	2800      	cmp	r0, #0
    18d8:	d001      	beq.n	18de <xQueueSemaphoreTake+0x5e>
						queueYIELD_IF_USING_PREEMPTION();
    18da:	4b44      	ldr	r3, [pc, #272]	; (19ec <xQueueSemaphoreTake+0x16c>)
    18dc:	4798      	blx	r3
				taskEXIT_CRITICAL();
    18de:	4b44      	ldr	r3, [pc, #272]	; (19f0 <xQueueSemaphoreTake+0x170>)
    18e0:	4798      	blx	r3
				return pdPASS;
    18e2:	2501      	movs	r5, #1
}
    18e4:	0028      	movs	r0, r5
    18e6:	b005      	add	sp, #20
    18e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
    18ea:	2d00      	cmp	r5, #0
    18ec:	d001      	beq.n	18f2 <xQueueSemaphoreTake+0x72>
    18ee:	b672      	cpsid	i
    18f0:	e7fe      	b.n	18f0 <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
    18f2:	4b3f      	ldr	r3, [pc, #252]	; (19f0 <xQueueSemaphoreTake+0x170>)
    18f4:	4798      	blx	r3
					return errQUEUE_EMPTY;
    18f6:	e7f5      	b.n	18e4 <xQueueSemaphoreTake+0x64>
					vTaskInternalSetTimeOutState( &xTimeOut );
    18f8:	a802      	add	r0, sp, #8
    18fa:	4b3e      	ldr	r3, [pc, #248]	; (19f4 <xQueueSemaphoreTake+0x174>)
    18fc:	4798      	blx	r3
    18fe:	e02a      	b.n	1956 <xQueueSemaphoreTake+0xd6>
		prvLockQueue( pxQueue );
    1900:	2200      	movs	r2, #0
    1902:	2344      	movs	r3, #68	; 0x44
    1904:	54e2      	strb	r2, [r4, r3]
    1906:	e031      	b.n	196c <xQueueSemaphoreTake+0xec>
    1908:	2200      	movs	r2, #0
    190a:	2345      	movs	r3, #69	; 0x45
    190c:	54e2      	strb	r2, [r4, r3]
    190e:	e032      	b.n	1976 <xQueueSemaphoreTake+0xf6>
						taskENTER_CRITICAL();
    1910:	4b33      	ldr	r3, [pc, #204]	; (19e0 <xQueueSemaphoreTake+0x160>)
    1912:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1914:	6860      	ldr	r0, [r4, #4]
    1916:	4b38      	ldr	r3, [pc, #224]	; (19f8 <xQueueSemaphoreTake+0x178>)
    1918:	4798      	blx	r3
    191a:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
    191c:	4b34      	ldr	r3, [pc, #208]	; (19f0 <xQueueSemaphoreTake+0x170>)
    191e:	4798      	blx	r3
    1920:	e039      	b.n	1996 <xQueueSemaphoreTake+0x116>
				prvUnlockQueue( pxQueue );
    1922:	0020      	movs	r0, r4
    1924:	4b35      	ldr	r3, [pc, #212]	; (19fc <xQueueSemaphoreTake+0x17c>)
    1926:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1928:	4b35      	ldr	r3, [pc, #212]	; (1a00 <xQueueSemaphoreTake+0x180>)
    192a:	4798      	blx	r3
    192c:	e009      	b.n	1942 <xQueueSemaphoreTake+0xc2>
			prvUnlockQueue( pxQueue );
    192e:	0020      	movs	r0, r4
    1930:	4b32      	ldr	r3, [pc, #200]	; (19fc <xQueueSemaphoreTake+0x17c>)
    1932:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1934:	4b32      	ldr	r3, [pc, #200]	; (1a00 <xQueueSemaphoreTake+0x180>)
    1936:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1938:	0020      	movs	r0, r4
    193a:	4b32      	ldr	r3, [pc, #200]	; (1a04 <xQueueSemaphoreTake+0x184>)
    193c:	4798      	blx	r3
    193e:	2800      	cmp	r0, #0
    1940:	d138      	bne.n	19b4 <xQueueSemaphoreTake+0x134>
    1942:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    1944:	47b8      	blx	r7
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    1946:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    1948:	2b00      	cmp	r3, #0
    194a:	d1b5      	bne.n	18b8 <xQueueSemaphoreTake+0x38>
				if( xTicksToWait == ( TickType_t ) 0 )
    194c:	9b01      	ldr	r3, [sp, #4]
    194e:	2b00      	cmp	r3, #0
    1950:	d0cb      	beq.n	18ea <xQueueSemaphoreTake+0x6a>
				else if( xEntryTimeSet == pdFALSE )
    1952:	2e00      	cmp	r6, #0
    1954:	d0d0      	beq.n	18f8 <xQueueSemaphoreTake+0x78>
		taskEXIT_CRITICAL();
    1956:	4b26      	ldr	r3, [pc, #152]	; (19f0 <xQueueSemaphoreTake+0x170>)
    1958:	4798      	blx	r3
		vTaskSuspendAll();
    195a:	4b2b      	ldr	r3, [pc, #172]	; (1a08 <xQueueSemaphoreTake+0x188>)
    195c:	4798      	blx	r3
		prvLockQueue( pxQueue );
    195e:	4b20      	ldr	r3, [pc, #128]	; (19e0 <xQueueSemaphoreTake+0x160>)
    1960:	4798      	blx	r3
    1962:	2344      	movs	r3, #68	; 0x44
    1964:	5ce3      	ldrb	r3, [r4, r3]
    1966:	b25b      	sxtb	r3, r3
    1968:	3301      	adds	r3, #1
    196a:	d0c9      	beq.n	1900 <xQueueSemaphoreTake+0x80>
    196c:	2345      	movs	r3, #69	; 0x45
    196e:	5ce3      	ldrb	r3, [r4, r3]
    1970:	b25b      	sxtb	r3, r3
    1972:	3301      	adds	r3, #1
    1974:	d0c8      	beq.n	1908 <xQueueSemaphoreTake+0x88>
    1976:	4b1e      	ldr	r3, [pc, #120]	; (19f0 <xQueueSemaphoreTake+0x170>)
    1978:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    197a:	a901      	add	r1, sp, #4
    197c:	a802      	add	r0, sp, #8
    197e:	4b23      	ldr	r3, [pc, #140]	; (1a0c <xQueueSemaphoreTake+0x18c>)
    1980:	4798      	blx	r3
    1982:	2800      	cmp	r0, #0
    1984:	d1d3      	bne.n	192e <xQueueSemaphoreTake+0xae>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1986:	0020      	movs	r0, r4
    1988:	4b1e      	ldr	r3, [pc, #120]	; (1a04 <xQueueSemaphoreTake+0x184>)
    198a:	4798      	blx	r3
    198c:	2800      	cmp	r0, #0
    198e:	d0c8      	beq.n	1922 <xQueueSemaphoreTake+0xa2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1990:	6823      	ldr	r3, [r4, #0]
    1992:	2b00      	cmp	r3, #0
    1994:	d0bc      	beq.n	1910 <xQueueSemaphoreTake+0x90>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1996:	0020      	movs	r0, r4
    1998:	3024      	adds	r0, #36	; 0x24
    199a:	9901      	ldr	r1, [sp, #4]
    199c:	4b1c      	ldr	r3, [pc, #112]	; (1a10 <xQueueSemaphoreTake+0x190>)
    199e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    19a0:	0020      	movs	r0, r4
    19a2:	4b16      	ldr	r3, [pc, #88]	; (19fc <xQueueSemaphoreTake+0x17c>)
    19a4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    19a6:	4b16      	ldr	r3, [pc, #88]	; (1a00 <xQueueSemaphoreTake+0x180>)
    19a8:	4798      	blx	r3
    19aa:	2800      	cmp	r0, #0
    19ac:	d1c9      	bne.n	1942 <xQueueSemaphoreTake+0xc2>
					portYIELD_WITHIN_API();
    19ae:	4b0f      	ldr	r3, [pc, #60]	; (19ec <xQueueSemaphoreTake+0x16c>)
    19b0:	4798      	blx	r3
    19b2:	e7c6      	b.n	1942 <xQueueSemaphoreTake+0xc2>
					if( xInheritanceOccurred != pdFALSE )
    19b4:	2d00      	cmp	r5, #0
    19b6:	d100      	bne.n	19ba <xQueueSemaphoreTake+0x13a>
    19b8:	e794      	b.n	18e4 <xQueueSemaphoreTake+0x64>
						taskENTER_CRITICAL();
    19ba:	4b09      	ldr	r3, [pc, #36]	; (19e0 <xQueueSemaphoreTake+0x160>)
    19bc:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    19be:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    19c0:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    19c2:	2b00      	cmp	r3, #0
    19c4:	d003      	beq.n	19ce <xQueueSemaphoreTake+0x14e>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    19c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    19c8:	681b      	ldr	r3, [r3, #0]
    19ca:	3105      	adds	r1, #5
    19cc:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    19ce:	6860      	ldr	r0, [r4, #4]
    19d0:	4b10      	ldr	r3, [pc, #64]	; (1a14 <xQueueSemaphoreTake+0x194>)
    19d2:	4798      	blx	r3
						taskEXIT_CRITICAL();
    19d4:	4b06      	ldr	r3, [pc, #24]	; (19f0 <xQueueSemaphoreTake+0x170>)
    19d6:	4798      	blx	r3
				return errQUEUE_EMPTY;
    19d8:	2500      	movs	r5, #0
    19da:	e783      	b.n	18e4 <xQueueSemaphoreTake+0x64>
    19dc:	00002249 	.word	0x00002249
    19e0:	00001141 	.word	0x00001141
    19e4:	00002405 	.word	0x00002405
    19e8:	00002141 	.word	0x00002141
    19ec:	00001129 	.word	0x00001129
    19f0:	00001159 	.word	0x00001159
    19f4:	000021c1 	.word	0x000021c1
    19f8:	00002265 	.word	0x00002265
    19fc:	0000132d 	.word	0x0000132d
    1a00:	00001f15 	.word	0x00001f15
    1a04:	00001205 	.word	0x00001205
    1a08:	00001de9 	.word	0x00001de9
    1a0c:	000021d1 	.word	0x000021d1
    1a10:	000020dd 	.word	0x000020dd
    1a14:	00002379 	.word	0x00002379

00001a18 <vQueueAddToRegistry>:
	{
    1a18:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    1a1a:	4b0a      	ldr	r3, [pc, #40]	; (1a44 <vQueueAddToRegistry+0x2c>)
    1a1c:	681b      	ldr	r3, [r3, #0]
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d009      	beq.n	1a36 <vQueueAddToRegistry+0x1e>
    1a22:	2301      	movs	r3, #1
    1a24:	4c07      	ldr	r4, [pc, #28]	; (1a44 <vQueueAddToRegistry+0x2c>)
    1a26:	00da      	lsls	r2, r3, #3
    1a28:	58a2      	ldr	r2, [r4, r2]
    1a2a:	2a00      	cmp	r2, #0
    1a2c:	d004      	beq.n	1a38 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    1a2e:	3301      	adds	r3, #1
    1a30:	2b08      	cmp	r3, #8
    1a32:	d1f8      	bne.n	1a26 <vQueueAddToRegistry+0xe>
	}
    1a34:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    1a36:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    1a38:	4a02      	ldr	r2, [pc, #8]	; (1a44 <vQueueAddToRegistry+0x2c>)
    1a3a:	00db      	lsls	r3, r3, #3
    1a3c:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
    1a3e:	18d3      	adds	r3, r2, r3
    1a40:	6058      	str	r0, [r3, #4]
				break;
    1a42:	e7f7      	b.n	1a34 <vQueueAddToRegistry+0x1c>
    1a44:	20004484 	.word	0x20004484

00001a48 <vQueueWaitForMessageRestricted>:
	{
    1a48:	b570      	push	{r4, r5, r6, lr}
    1a4a:	0004      	movs	r4, r0
    1a4c:	000d      	movs	r5, r1
    1a4e:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    1a50:	4b11      	ldr	r3, [pc, #68]	; (1a98 <vQueueWaitForMessageRestricted+0x50>)
    1a52:	4798      	blx	r3
    1a54:	2344      	movs	r3, #68	; 0x44
    1a56:	5ce3      	ldrb	r3, [r4, r3]
    1a58:	b25b      	sxtb	r3, r3
    1a5a:	3301      	adds	r3, #1
    1a5c:	d00d      	beq.n	1a7a <vQueueWaitForMessageRestricted+0x32>
    1a5e:	2345      	movs	r3, #69	; 0x45
    1a60:	5ce3      	ldrb	r3, [r4, r3]
    1a62:	b25b      	sxtb	r3, r3
    1a64:	3301      	adds	r3, #1
    1a66:	d00c      	beq.n	1a82 <vQueueWaitForMessageRestricted+0x3a>
    1a68:	4b0c      	ldr	r3, [pc, #48]	; (1a9c <vQueueWaitForMessageRestricted+0x54>)
    1a6a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1a6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d00b      	beq.n	1a8a <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    1a72:	0020      	movs	r0, r4
    1a74:	4b0a      	ldr	r3, [pc, #40]	; (1aa0 <vQueueWaitForMessageRestricted+0x58>)
    1a76:	4798      	blx	r3
	}
    1a78:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    1a7a:	2200      	movs	r2, #0
    1a7c:	2344      	movs	r3, #68	; 0x44
    1a7e:	54e2      	strb	r2, [r4, r3]
    1a80:	e7ed      	b.n	1a5e <vQueueWaitForMessageRestricted+0x16>
    1a82:	2200      	movs	r2, #0
    1a84:	2345      	movs	r3, #69	; 0x45
    1a86:	54e2      	strb	r2, [r4, r3]
    1a88:	e7ee      	b.n	1a68 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1a8a:	0020      	movs	r0, r4
    1a8c:	3024      	adds	r0, #36	; 0x24
    1a8e:	0032      	movs	r2, r6
    1a90:	0029      	movs	r1, r5
    1a92:	4b04      	ldr	r3, [pc, #16]	; (1aa4 <vQueueWaitForMessageRestricted+0x5c>)
    1a94:	4798      	blx	r3
    1a96:	e7ec      	b.n	1a72 <vQueueWaitForMessageRestricted+0x2a>
    1a98:	00001141 	.word	0x00001141
    1a9c:	00001159 	.word	0x00001159
    1aa0:	0000132d 	.word	0x0000132d
    1aa4:	00002109 	.word	0x00002109

00001aa8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1aa8:	4b08      	ldr	r3, [pc, #32]	; (1acc <prvResetNextTaskUnblockTime+0x24>)
    1aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1aac:	681b      	ldr	r3, [r3, #0]
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d006      	beq.n	1ac0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1ab2:	4b06      	ldr	r3, [pc, #24]	; (1acc <prvResetNextTaskUnblockTime+0x24>)
    1ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ab6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1ab8:	68d2      	ldr	r2, [r2, #12]
    1aba:	6852      	ldr	r2, [r2, #4]
    1abc:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
    1abe:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    1ac0:	2201      	movs	r2, #1
    1ac2:	4252      	negs	r2, r2
    1ac4:	4b01      	ldr	r3, [pc, #4]	; (1acc <prvResetNextTaskUnblockTime+0x24>)
    1ac6:	62da      	str	r2, [r3, #44]	; 0x2c
    1ac8:	e7f9      	b.n	1abe <prvResetNextTaskUnblockTime+0x16>
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	20004318 	.word	0x20004318

00001ad0 <prvIdleTask>:
{
    1ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ad2:	46ce      	mov	lr, r9
    1ad4:	4647      	mov	r7, r8
    1ad6:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1ad8:	4b12      	ldr	r3, [pc, #72]	; (1b24 <prvIdleTask+0x54>)
    1ada:	4698      	mov	r8, r3
			taskENTER_CRITICAL();
    1adc:	4f12      	ldr	r7, [pc, #72]	; (1b28 <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1ade:	001c      	movs	r4, r3
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1ae0:	4b12      	ldr	r3, [pc, #72]	; (1b2c <prvIdleTask+0x5c>)
    1ae2:	4699      	mov	r9, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1ae4:	4643      	mov	r3, r8
    1ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1ae8:	2b00      	cmp	r3, #0
    1aea:	d014      	beq.n	1b16 <prvIdleTask+0x46>
			taskENTER_CRITICAL();
    1aec:	47b8      	blx	r7
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1af0:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1af2:	1d28      	adds	r0, r5, #4
    1af4:	47c8      	blx	r9
				--uxCurrentNumberOfTasks;
    1af6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1af8:	3b01      	subs	r3, #1
    1afa:	64a3      	str	r3, [r4, #72]	; 0x48
				--uxDeletedTasksWaitingCleanUp;
    1afc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1afe:	3b01      	subs	r3, #1
    1b00:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
    1b02:	4b0b      	ldr	r3, [pc, #44]	; (1b30 <prvIdleTask+0x60>)
    1b04:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    1b06:	6b28      	ldr	r0, [r5, #48]	; 0x30
    1b08:	4e0a      	ldr	r6, [pc, #40]	; (1b34 <prvIdleTask+0x64>)
    1b0a:	47b0      	blx	r6
			vPortFree( pxTCB );
    1b0c:	0028      	movs	r0, r5
    1b0e:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1b10:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1b12:	2b00      	cmp	r3, #0
    1b14:	d1ea      	bne.n	1aec <prvIdleTask+0x1c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1b16:	4b03      	ldr	r3, [pc, #12]	; (1b24 <prvIdleTask+0x54>)
    1b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1b1a:	2b01      	cmp	r3, #1
    1b1c:	d9e2      	bls.n	1ae4 <prvIdleTask+0x14>
				taskYIELD();
    1b1e:	4b06      	ldr	r3, [pc, #24]	; (1b38 <prvIdleTask+0x68>)
    1b20:	4798      	blx	r3
    1b22:	e7df      	b.n	1ae4 <prvIdleTask+0x14>
    1b24:	20004318 	.word	0x20004318
    1b28:	00001141 	.word	0x00001141
    1b2c:	00000d7b 	.word	0x00000d7b
    1b30:	00001159 	.word	0x00001159
    1b34:	00000cd1 	.word	0x00000cd1
    1b38:	00001129 	.word	0x00001129

00001b3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    1b3c:	b570      	push	{r4, r5, r6, lr}
    1b3e:	0004      	movs	r4, r0
    1b40:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    1b42:	4b15      	ldr	r3, [pc, #84]	; (1b98 <prvAddCurrentTaskToDelayedList+0x5c>)
    1b44:	6b1e      	ldr	r6, [r3, #48]	; 0x30
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1b46:	6b58      	ldr	r0, [r3, #52]	; 0x34
    1b48:	3004      	adds	r0, #4
    1b4a:	4b14      	ldr	r3, [pc, #80]	; (1b9c <prvAddCurrentTaskToDelayedList+0x60>)
    1b4c:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1b4e:	1c63      	adds	r3, r4, #1
    1b50:	d012      	beq.n	1b78 <prvAddCurrentTaskToDelayedList+0x3c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    1b52:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1b54:	4b10      	ldr	r3, [pc, #64]	; (1b98 <prvAddCurrentTaskToDelayedList+0x5c>)
    1b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1b58:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    1b5a:	42a6      	cmp	r6, r4
    1b5c:	d815      	bhi.n	1b8a <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1b5e:	4d10      	ldr	r5, [pc, #64]	; (1ba0 <prvAddCurrentTaskToDelayedList+0x64>)
    1b60:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    1b62:	4b0d      	ldr	r3, [pc, #52]	; (1b98 <prvAddCurrentTaskToDelayedList+0x5c>)
    1b64:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1b66:	3104      	adds	r1, #4
    1b68:	4b0e      	ldr	r3, [pc, #56]	; (1ba4 <prvAddCurrentTaskToDelayedList+0x68>)
    1b6a:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    1b6c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1b6e:	429c      	cmp	r4, r3
    1b70:	d211      	bcs.n	1b96 <prvAddCurrentTaskToDelayedList+0x5a>
				{
					xNextTaskUnblockTime = xTimeToWake;
    1b72:	4b0b      	ldr	r3, [pc, #44]	; (1ba0 <prvAddCurrentTaskToDelayedList+0x64>)
    1b74:	62dc      	str	r4, [r3, #44]	; 0x2c

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1b76:	e00e      	b.n	1b96 <prvAddCurrentTaskToDelayedList+0x5a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1b78:	2d00      	cmp	r5, #0
    1b7a:	d0ea      	beq.n	1b52 <prvAddCurrentTaskToDelayedList+0x16>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1b7c:	4b06      	ldr	r3, [pc, #24]	; (1b98 <prvAddCurrentTaskToDelayedList+0x5c>)
    1b7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1b80:	3104      	adds	r1, #4
    1b82:	4807      	ldr	r0, [pc, #28]	; (1ba0 <prvAddCurrentTaskToDelayedList+0x64>)
    1b84:	4b08      	ldr	r3, [pc, #32]	; (1ba8 <prvAddCurrentTaskToDelayedList+0x6c>)
    1b86:	4798      	blx	r3
    1b88:	e005      	b.n	1b96 <prvAddCurrentTaskToDelayedList+0x5a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1b8a:	4b03      	ldr	r3, [pc, #12]	; (1b98 <prvAddCurrentTaskToDelayedList+0x5c>)
    1b8c:	6b98      	ldr	r0, [r3, #56]	; 0x38
    1b8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1b90:	3104      	adds	r1, #4
    1b92:	4b04      	ldr	r3, [pc, #16]	; (1ba4 <prvAddCurrentTaskToDelayedList+0x68>)
    1b94:	4798      	blx	r3
}
    1b96:	bd70      	pop	{r4, r5, r6, pc}
    1b98:	20004398 	.word	0x20004398
    1b9c:	00000d7b 	.word	0x00000d7b
    1ba0:	20004318 	.word	0x20004318
    1ba4:	00000d4d 	.word	0x00000d4d
    1ba8:	00000d35 	.word	0x00000d35

00001bac <xTaskCreate>:
	{
    1bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bae:	46d6      	mov	lr, sl
    1bb0:	464f      	mov	r7, r9
    1bb2:	4646      	mov	r6, r8
    1bb4:	b5c0      	push	{r6, r7, lr}
    1bb6:	b084      	sub	sp, #16
    1bb8:	9001      	str	r0, [sp, #4]
    1bba:	000d      	movs	r5, r1
    1bbc:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1bbe:	0097      	lsls	r7, r2, #2
    1bc0:	0038      	movs	r0, r7
    1bc2:	4b63      	ldr	r3, [pc, #396]	; (1d50 <xTaskCreate+0x1a4>)
    1bc4:	4798      	blx	r3
    1bc6:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    1bc8:	d100      	bne.n	1bcc <xTaskCreate+0x20>
    1bca:	e089      	b.n	1ce0 <xTaskCreate+0x134>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    1bcc:	2054      	movs	r0, #84	; 0x54
    1bce:	4b60      	ldr	r3, [pc, #384]	; (1d50 <xTaskCreate+0x1a4>)
    1bd0:	4798      	blx	r3
    1bd2:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    1bd4:	d100      	bne.n	1bd8 <xTaskCreate+0x2c>
    1bd6:	e080      	b.n	1cda <xTaskCreate+0x12e>
					pxNewTCB->pxStack = pxStack;
    1bd8:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    1bda:	003a      	movs	r2, r7
    1bdc:	21a5      	movs	r1, #165	; 0xa5
    1bde:	0030      	movs	r0, r6
    1be0:	4b5c      	ldr	r3, [pc, #368]	; (1d54 <xTaskCreate+0x1a8>)
    1be2:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    1be4:	1f3a      	subs	r2, r7, #4
    1be6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1be8:	469c      	mov	ip, r3
    1bea:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    1bec:	2307      	movs	r3, #7
    1bee:	439a      	bics	r2, r3
    1bf0:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1bf2:	782a      	ldrb	r2, [r5, #0]
    1bf4:	332d      	adds	r3, #45	; 0x2d
    1bf6:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    1bf8:	782b      	ldrb	r3, [r5, #0]
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d00c      	beq.n	1c18 <xTaskCreate+0x6c>
    1bfe:	1c6b      	adds	r3, r5, #1
    1c00:	0022      	movs	r2, r4
    1c02:	3235      	adds	r2, #53	; 0x35
    1c04:	3505      	adds	r5, #5
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1c06:	7819      	ldrb	r1, [r3, #0]
    1c08:	7011      	strb	r1, [r2, #0]
		if( pcName[ x ] == 0x00 )
    1c0a:	7819      	ldrb	r1, [r3, #0]
    1c0c:	2900      	cmp	r1, #0
    1c0e:	d003      	beq.n	1c18 <xTaskCreate+0x6c>
    1c10:	3301      	adds	r3, #1
    1c12:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1c14:	42ab      	cmp	r3, r5
    1c16:	d1f6      	bne.n	1c06 <xTaskCreate+0x5a>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1c18:	2200      	movs	r2, #0
    1c1a:	2338      	movs	r3, #56	; 0x38
    1c1c:	54e2      	strb	r2, [r4, r3]
    1c1e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    1c20:	2f04      	cmp	r7, #4
    1c22:	d900      	bls.n	1c26 <xTaskCreate+0x7a>
    1c24:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    1c26:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    1c28:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    1c2a:	2600      	movs	r6, #0
    1c2c:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    1c2e:	1d23      	adds	r3, r4, #4
    1c30:	9303      	str	r3, [sp, #12]
    1c32:	0018      	movs	r0, r3
    1c34:	4d48      	ldr	r5, [pc, #288]	; (1d58 <xTaskCreate+0x1ac>)
    1c36:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    1c38:	0020      	movs	r0, r4
    1c3a:	3018      	adds	r0, #24
    1c3c:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    1c3e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1c40:	2305      	movs	r3, #5
    1c42:	1bdb      	subs	r3, r3, r7
    1c44:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    1c46:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    1c48:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1c4a:	2350      	movs	r3, #80	; 0x50
    1c4c:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1c4e:	9a02      	ldr	r2, [sp, #8]
    1c50:	9901      	ldr	r1, [sp, #4]
    1c52:	4640      	mov	r0, r8
    1c54:	4b41      	ldr	r3, [pc, #260]	; (1d5c <xTaskCreate+0x1b0>)
    1c56:	4798      	blx	r3
    1c58:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    1c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d000      	beq.n	1c62 <xTaskCreate+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1c60:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    1c62:	4b3f      	ldr	r3, [pc, #252]	; (1d60 <xTaskCreate+0x1b4>)
    1c64:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    1c66:	4a3f      	ldr	r2, [pc, #252]	; (1d64 <xTaskCreate+0x1b8>)
    1c68:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1c6a:	3301      	adds	r3, #1
    1c6c:	6493      	str	r3, [r2, #72]	; 0x48
		if( pxCurrentTCB == NULL )
    1c6e:	4b3e      	ldr	r3, [pc, #248]	; (1d68 <xTaskCreate+0x1bc>)
    1c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1c72:	2b00      	cmp	r3, #0
    1c74:	d037      	beq.n	1ce6 <xTaskCreate+0x13a>
			if( xSchedulerRunning == pdFALSE )
    1c76:	4b3c      	ldr	r3, [pc, #240]	; (1d68 <xTaskCreate+0x1bc>)
    1c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d107      	bne.n	1c8e <xTaskCreate+0xe2>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    1c7e:	4b3a      	ldr	r3, [pc, #232]	; (1d68 <xTaskCreate+0x1bc>)
    1c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1c84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1c86:	4293      	cmp	r3, r2
    1c88:	d801      	bhi.n	1c8e <xTaskCreate+0xe2>
					pxCurrentTCB = pxNewTCB;
    1c8a:	4b37      	ldr	r3, [pc, #220]	; (1d68 <xTaskCreate+0x1bc>)
    1c8c:	635c      	str	r4, [r3, #52]	; 0x34
		uxTaskNumber++;
    1c8e:	4936      	ldr	r1, [pc, #216]	; (1d68 <xTaskCreate+0x1bc>)
    1c90:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1c92:	3301      	adds	r3, #1
    1c94:	668b      	str	r3, [r1, #104]	; 0x68
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    1c96:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList( pxNewTCB );
    1c98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1c9a:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
    1c9c:	429a      	cmp	r2, r3
    1c9e:	d900      	bls.n	1ca2 <xTaskCreate+0xf6>
    1ca0:	66ca      	str	r2, [r1, #108]	; 0x6c
    1ca2:	0090      	lsls	r0, r2, #2
    1ca4:	1882      	adds	r2, r0, r2
    1ca6:	0092      	lsls	r2, r2, #2
    1ca8:	482e      	ldr	r0, [pc, #184]	; (1d64 <xTaskCreate+0x1b8>)
    1caa:	304c      	adds	r0, #76	; 0x4c
    1cac:	1880      	adds	r0, r0, r2
    1cae:	9903      	ldr	r1, [sp, #12]
    1cb0:	4b2e      	ldr	r3, [pc, #184]	; (1d6c <xTaskCreate+0x1c0>)
    1cb2:	4798      	blx	r3
	taskEXIT_CRITICAL();
    1cb4:	4b2e      	ldr	r3, [pc, #184]	; (1d70 <xTaskCreate+0x1c4>)
    1cb6:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    1cb8:	4b2b      	ldr	r3, [pc, #172]	; (1d68 <xTaskCreate+0x1bc>)
    1cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			xReturn = pdPASS;
    1cbc:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d005      	beq.n	1cce <xTaskCreate+0x122>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    1cc2:	4b29      	ldr	r3, [pc, #164]	; (1d68 <xTaskCreate+0x1bc>)
    1cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1cc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1cca:	429a      	cmp	r2, r3
    1ccc:	d33b      	bcc.n	1d46 <xTaskCreate+0x19a>
	}
    1cce:	b004      	add	sp, #16
    1cd0:	bc1c      	pop	{r2, r3, r4}
    1cd2:	4690      	mov	r8, r2
    1cd4:	4699      	mov	r9, r3
    1cd6:	46a2      	mov	sl, r4
    1cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    1cda:	0030      	movs	r0, r6
    1cdc:	4b25      	ldr	r3, [pc, #148]	; (1d74 <xTaskCreate+0x1c8>)
    1cde:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1ce0:	2001      	movs	r0, #1
    1ce2:	4240      	negs	r0, r0
    1ce4:	e7f3      	b.n	1cce <xTaskCreate+0x122>
			pxCurrentTCB = pxNewTCB;
    1ce6:	4b20      	ldr	r3, [pc, #128]	; (1d68 <xTaskCreate+0x1bc>)
    1ce8:	635c      	str	r4, [r3, #52]	; 0x34
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1cea:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1cec:	2b01      	cmp	r3, #1
    1cee:	d1ce      	bne.n	1c8e <xTaskCreate+0xe2>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1cf0:	0017      	movs	r7, r2
    1cf2:	0010      	movs	r0, r2
    1cf4:	304c      	adds	r0, #76	; 0x4c
    1cf6:	4e20      	ldr	r6, [pc, #128]	; (1d78 <xTaskCreate+0x1cc>)
    1cf8:	47b0      	blx	r6
    1cfa:	0038      	movs	r0, r7
    1cfc:	3060      	adds	r0, #96	; 0x60
    1cfe:	47b0      	blx	r6
    1d00:	0038      	movs	r0, r7
    1d02:	3074      	adds	r0, #116	; 0x74
    1d04:	47b0      	blx	r6
    1d06:	0038      	movs	r0, r7
    1d08:	3088      	adds	r0, #136	; 0x88
    1d0a:	47b0      	blx	r6
    1d0c:	0038      	movs	r0, r7
    1d0e:	309c      	adds	r0, #156	; 0x9c
    1d10:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    1d12:	4b15      	ldr	r3, [pc, #84]	; (1d68 <xTaskCreate+0x1bc>)
    1d14:	4698      	mov	r8, r3
    1d16:	233c      	movs	r3, #60	; 0x3c
    1d18:	4443      	add	r3, r8
    1d1a:	469a      	mov	sl, r3
    1d1c:	0018      	movs	r0, r3
    1d1e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    1d20:	2350      	movs	r3, #80	; 0x50
    1d22:	4443      	add	r3, r8
    1d24:	4699      	mov	r9, r3
    1d26:	0018      	movs	r0, r3
    1d28:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    1d2a:	0038      	movs	r0, r7
    1d2c:	3014      	adds	r0, #20
    1d2e:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    1d30:	0038      	movs	r0, r7
    1d32:	3034      	adds	r0, #52	; 0x34
    1d34:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    1d36:	0038      	movs	r0, r7
    1d38:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    1d3a:	4653      	mov	r3, sl
    1d3c:	62bb      	str	r3, [r7, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1d3e:	4643      	mov	r3, r8
    1d40:	464a      	mov	r2, r9
    1d42:	639a      	str	r2, [r3, #56]	; 0x38
    1d44:	e7a3      	b.n	1c8e <xTaskCreate+0xe2>
			taskYIELD_IF_USING_PREEMPTION();
    1d46:	4b0d      	ldr	r3, [pc, #52]	; (1d7c <xTaskCreate+0x1d0>)
    1d48:	4798      	blx	r3
			xReturn = pdPASS;
    1d4a:	2001      	movs	r0, #1
    1d4c:	e7bf      	b.n	1cce <xTaskCreate+0x122>
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	00000c05 	.word	0x00000c05
    1d54:	00004cb9 	.word	0x00004cb9
    1d58:	00000d2f 	.word	0x00000d2f
    1d5c:	000010a5 	.word	0x000010a5
    1d60:	00001141 	.word	0x00001141
    1d64:	20004318 	.word	0x20004318
    1d68:	20004398 	.word	0x20004398
    1d6c:	00000d35 	.word	0x00000d35
    1d70:	00001159 	.word	0x00001159
    1d74:	00000cd1 	.word	0x00000cd1
    1d78:	00000d19 	.word	0x00000d19
    1d7c:	00001129 	.word	0x00001129

00001d80 <vTaskStartScheduler>:
{
    1d80:	b510      	push	{r4, lr}
    1d82:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    1d84:	4b11      	ldr	r3, [pc, #68]	; (1dcc <vTaskStartScheduler+0x4c>)
    1d86:	3374      	adds	r3, #116	; 0x74
    1d88:	9301      	str	r3, [sp, #4]
    1d8a:	2300      	movs	r3, #0
    1d8c:	9300      	str	r3, [sp, #0]
    1d8e:	2246      	movs	r2, #70	; 0x46
    1d90:	490f      	ldr	r1, [pc, #60]	; (1dd0 <vTaskStartScheduler+0x50>)
    1d92:	4810      	ldr	r0, [pc, #64]	; (1dd4 <vTaskStartScheduler+0x54>)
    1d94:	4c10      	ldr	r4, [pc, #64]	; (1dd8 <vTaskStartScheduler+0x58>)
    1d96:	47a0      	blx	r4
		if( xReturn == pdPASS )
    1d98:	2801      	cmp	r0, #1
    1d9a:	d003      	beq.n	1da4 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    1d9c:	1c43      	adds	r3, r0, #1
    1d9e:	d012      	beq.n	1dc6 <vTaskStartScheduler+0x46>
}
    1da0:	b002      	add	sp, #8
    1da2:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    1da4:	4b0d      	ldr	r3, [pc, #52]	; (1ddc <vTaskStartScheduler+0x5c>)
    1da6:	4798      	blx	r3
	if( xReturn == pdPASS )
    1da8:	2801      	cmp	r0, #1
    1daa:	d1f7      	bne.n	1d9c <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
    1dac:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    1dae:	2201      	movs	r2, #1
    1db0:	4252      	negs	r2, r2
    1db2:	4b0b      	ldr	r3, [pc, #44]	; (1de0 <vTaskStartScheduler+0x60>)
    1db4:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
    1db6:	4b05      	ldr	r3, [pc, #20]	; (1dcc <vTaskStartScheduler+0x4c>)
    1db8:	3202      	adds	r2, #2
    1dba:	665a      	str	r2, [r3, #100]	; 0x64
		xTickCount = ( TickType_t ) 0U;
    1dbc:	2200      	movs	r2, #0
    1dbe:	631a      	str	r2, [r3, #48]	; 0x30
		if( xPortStartScheduler() != pdFALSE )
    1dc0:	4b08      	ldr	r3, [pc, #32]	; (1de4 <vTaskStartScheduler+0x64>)
    1dc2:	4798      	blx	r3
    1dc4:	e7ec      	b.n	1da0 <vTaskStartScheduler+0x20>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    1dc6:	b672      	cpsid	i
    1dc8:	e7fe      	b.n	1dc8 <vTaskStartScheduler+0x48>
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	20004398 	.word	0x20004398
    1dd0:	00004f48 	.word	0x00004f48
    1dd4:	00001ad1 	.word	0x00001ad1
    1dd8:	00001bad 	.word	0x00001bad
    1ddc:	000024c5 	.word	0x000024c5
    1de0:	20004318 	.word	0x20004318
    1de4:	000010c5 	.word	0x000010c5

00001de8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    1de8:	4a02      	ldr	r2, [pc, #8]	; (1df4 <vTaskSuspendAll+0xc>)
    1dea:	6f13      	ldr	r3, [r2, #112]	; 0x70
    1dec:	3301      	adds	r3, #1
    1dee:	6713      	str	r3, [r2, #112]	; 0x70
}
    1df0:	4770      	bx	lr
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	20004398 	.word	0x20004398

00001df8 <xTaskGetTickCount>:
		xTicks = xTickCount;
    1df8:	4b01      	ldr	r3, [pc, #4]	; (1e00 <xTaskGetTickCount+0x8>)
    1dfa:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
    1dfc:	4770      	bx	lr
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	20004398 	.word	0x20004398

00001e04 <xTaskIncrementTick>:
{
    1e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e06:	46ce      	mov	lr, r9
    1e08:	4647      	mov	r7, r8
    1e0a:	b580      	push	{r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1e0c:	4b3b      	ldr	r3, [pc, #236]	; (1efc <xTaskIncrementTick+0xf8>)
    1e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1e10:	2b00      	cmp	r3, #0
    1e12:	d164      	bne.n	1ede <xTaskIncrementTick+0xda>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    1e14:	4b39      	ldr	r3, [pc, #228]	; (1efc <xTaskIncrementTick+0xf8>)
    1e16:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    1e18:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    1e1a:	631e      	str	r6, [r3, #48]	; 0x30
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    1e1c:	2e00      	cmp	r6, #0
    1e1e:	d111      	bne.n	1e44 <xTaskIncrementTick+0x40>
			taskSWITCH_DELAYED_LISTS();
    1e20:	4b37      	ldr	r3, [pc, #220]	; (1f00 <xTaskIncrementTick+0xfc>)
    1e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e24:	681b      	ldr	r3, [r3, #0]
    1e26:	2b00      	cmp	r3, #0
    1e28:	d001      	beq.n	1e2e <xTaskIncrementTick+0x2a>
    1e2a:	b672      	cpsid	i
    1e2c:	e7fe      	b.n	1e2c <xTaskIncrementTick+0x28>
    1e2e:	4a34      	ldr	r2, [pc, #208]	; (1f00 <xTaskIncrementTick+0xfc>)
    1e30:	6a91      	ldr	r1, [r2, #40]	; 0x28
    1e32:	4b32      	ldr	r3, [pc, #200]	; (1efc <xTaskIncrementTick+0xf8>)
    1e34:	6b98      	ldr	r0, [r3, #56]	; 0x38
    1e36:	6290      	str	r0, [r2, #40]	; 0x28
    1e38:	6399      	str	r1, [r3, #56]	; 0x38
    1e3a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    1e3c:	3201      	adds	r2, #1
    1e3e:	679a      	str	r2, [r3, #120]	; 0x78
    1e40:	4b30      	ldr	r3, [pc, #192]	; (1f04 <xTaskIncrementTick+0x100>)
    1e42:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    1e44:	4b2e      	ldr	r3, [pc, #184]	; (1f00 <xTaskIncrementTick+0xfc>)
    1e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
BaseType_t xSwitchRequired = pdFALSE;
    1e48:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    1e4a:	429e      	cmp	r6, r3
    1e4c:	d337      	bcc.n	1ebe <xTaskIncrementTick+0xba>
    1e4e:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1e50:	4b2b      	ldr	r3, [pc, #172]	; (1f00 <xTaskIncrementTick+0xfc>)
    1e52:	4699      	mov	r9, r3
					prvAddTaskToReadyList( pxTCB );
    1e54:	224c      	movs	r2, #76	; 0x4c
    1e56:	4694      	mov	ip, r2
    1e58:	4463      	add	r3, ip
    1e5a:	4698      	mov	r8, r3
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1e5c:	464b      	mov	r3, r9
    1e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e60:	681b      	ldr	r3, [r3, #0]
    1e62:	2b00      	cmp	r3, #0
    1e64:	d027      	beq.n	1eb6 <xTaskIncrementTick+0xb2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1e66:	4b26      	ldr	r3, [pc, #152]	; (1f00 <xTaskIncrementTick+0xfc>)
    1e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e6a:	68db      	ldr	r3, [r3, #12]
    1e6c:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1e6e:	687b      	ldr	r3, [r7, #4]
					if( xConstTickCount < xItemValue )
    1e70:	429e      	cmp	r6, r3
    1e72:	d331      	bcc.n	1ed8 <xTaskIncrementTick+0xd4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1e74:	1d3d      	adds	r5, r7, #4
    1e76:	0028      	movs	r0, r5
    1e78:	4b23      	ldr	r3, [pc, #140]	; (1f08 <xTaskIncrementTick+0x104>)
    1e7a:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e7e:	2b00      	cmp	r3, #0
    1e80:	d003      	beq.n	1e8a <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1e82:	0038      	movs	r0, r7
    1e84:	3018      	adds	r0, #24
    1e86:	4b20      	ldr	r3, [pc, #128]	; (1f08 <xTaskIncrementTick+0x104>)
    1e88:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    1e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1e8c:	4a1b      	ldr	r2, [pc, #108]	; (1efc <xTaskIncrementTick+0xf8>)
    1e8e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    1e90:	4293      	cmp	r3, r2
    1e92:	d901      	bls.n	1e98 <xTaskIncrementTick+0x94>
    1e94:	4a19      	ldr	r2, [pc, #100]	; (1efc <xTaskIncrementTick+0xf8>)
    1e96:	66d3      	str	r3, [r2, #108]	; 0x6c
    1e98:	0098      	lsls	r0, r3, #2
    1e9a:	18c0      	adds	r0, r0, r3
    1e9c:	0080      	lsls	r0, r0, #2
    1e9e:	4440      	add	r0, r8
    1ea0:	0029      	movs	r1, r5
    1ea2:	4b1a      	ldr	r3, [pc, #104]	; (1f0c <xTaskIncrementTick+0x108>)
    1ea4:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1ea6:	4b15      	ldr	r3, [pc, #84]	; (1efc <xTaskIncrementTick+0xf8>)
    1ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1eae:	429a      	cmp	r2, r3
    1eb0:	d3d4      	bcc.n	1e5c <xTaskIncrementTick+0x58>
							xSwitchRequired = pdTRUE;
    1eb2:	2401      	movs	r4, #1
    1eb4:	e7d2      	b.n	1e5c <xTaskIncrementTick+0x58>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1eb6:	2201      	movs	r2, #1
    1eb8:	4252      	negs	r2, r2
    1eba:	4b11      	ldr	r3, [pc, #68]	; (1f00 <xTaskIncrementTick+0xfc>)
    1ebc:	62da      	str	r2, [r3, #44]	; 0x2c
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    1ebe:	4b0f      	ldr	r3, [pc, #60]	; (1efc <xTaskIncrementTick+0xf8>)
    1ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ec4:	0093      	lsls	r3, r2, #2
    1ec6:	189b      	adds	r3, r3, r2
    1ec8:	009b      	lsls	r3, r3, #2
    1eca:	4a0d      	ldr	r2, [pc, #52]	; (1f00 <xTaskIncrementTick+0xfc>)
    1ecc:	18d3      	adds	r3, r2, r3
    1ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1ed0:	2b01      	cmp	r3, #1
    1ed2:	d909      	bls.n	1ee8 <xTaskIncrementTick+0xe4>
				xSwitchRequired = pdTRUE;
    1ed4:	2401      	movs	r4, #1
    1ed6:	e007      	b.n	1ee8 <xTaskIncrementTick+0xe4>
						xNextTaskUnblockTime = xItemValue;
    1ed8:	4a09      	ldr	r2, [pc, #36]	; (1f00 <xTaskIncrementTick+0xfc>)
    1eda:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
    1edc:	e7ef      	b.n	1ebe <xTaskIncrementTick+0xba>
		++uxPendedTicks;
    1ede:	4a07      	ldr	r2, [pc, #28]	; (1efc <xTaskIncrementTick+0xf8>)
    1ee0:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
    1ee2:	3301      	adds	r3, #1
    1ee4:	67d3      	str	r3, [r2, #124]	; 0x7c
BaseType_t xSwitchRequired = pdFALSE;
    1ee6:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
    1ee8:	4b09      	ldr	r3, [pc, #36]	; (1f10 <xTaskIncrementTick+0x10c>)
    1eea:	681b      	ldr	r3, [r3, #0]
    1eec:	2b00      	cmp	r3, #0
    1eee:	d000      	beq.n	1ef2 <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
    1ef0:	2401      	movs	r4, #1
}
    1ef2:	0020      	movs	r0, r4
    1ef4:	bc0c      	pop	{r2, r3}
    1ef6:	4690      	mov	r8, r2
    1ef8:	4699      	mov	r9, r3
    1efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1efc:	20004398 	.word	0x20004398
    1f00:	20004318 	.word	0x20004318
    1f04:	00001aa9 	.word	0x00001aa9
    1f08:	00000d7b 	.word	0x00000d7b
    1f0c:	00000d35 	.word	0x00000d35
    1f10:	20004418 	.word	0x20004418

00001f14 <xTaskResumeAll>:
{
    1f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f16:	b083      	sub	sp, #12
	configASSERT( uxSchedulerSuspended );
    1f18:	4b31      	ldr	r3, [pc, #196]	; (1fe0 <xTaskResumeAll+0xcc>)
    1f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d101      	bne.n	1f24 <xTaskResumeAll+0x10>
    1f20:	b672      	cpsid	i
    1f22:	e7fe      	b.n	1f22 <xTaskResumeAll+0xe>
	taskENTER_CRITICAL();
    1f24:	4b2f      	ldr	r3, [pc, #188]	; (1fe4 <xTaskResumeAll+0xd0>)
    1f26:	4798      	blx	r3
		--uxSchedulerSuspended;
    1f28:	4b2d      	ldr	r3, [pc, #180]	; (1fe0 <xTaskResumeAll+0xcc>)
    1f2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    1f2c:	3a01      	subs	r2, #1
    1f2e:	671a      	str	r2, [r3, #112]	; 0x70
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
BaseType_t xAlreadyYielded = pdFALSE;
    1f32:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1f34:	2b00      	cmp	r3, #0
    1f36:	d104      	bne.n	1f42 <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1f38:	4b2b      	ldr	r3, [pc, #172]	; (1fe8 <xTaskResumeAll+0xd4>)
    1f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1f3c:	2500      	movs	r5, #0
    1f3e:	2b00      	cmp	r3, #0
    1f40:	d104      	bne.n	1f4c <xTaskResumeAll+0x38>
	taskEXIT_CRITICAL();
    1f42:	4b2a      	ldr	r3, [pc, #168]	; (1fec <xTaskResumeAll+0xd8>)
    1f44:	4798      	blx	r3
}
    1f46:	0020      	movs	r0, r4
    1f48:	b003      	add	sp, #12
    1f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1f4c:	4f26      	ldr	r7, [pc, #152]	; (1fe8 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
    1f4e:	003e      	movs	r6, r7
    1f50:	364c      	adds	r6, #76	; 0x4c
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1f52:	697b      	ldr	r3, [r7, #20]
    1f54:	2b00      	cmp	r3, #0
    1f56:	d022      	beq.n	1f9e <xTaskResumeAll+0x8a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1f58:	4b23      	ldr	r3, [pc, #140]	; (1fe8 <xTaskResumeAll+0xd4>)
    1f5a:	6a1b      	ldr	r3, [r3, #32]
    1f5c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1f5e:	0028      	movs	r0, r5
    1f60:	3018      	adds	r0, #24
    1f62:	4c23      	ldr	r4, [pc, #140]	; (1ff0 <xTaskResumeAll+0xdc>)
    1f64:	47a0      	blx	r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1f66:	1d2b      	adds	r3, r5, #4
    1f68:	9301      	str	r3, [sp, #4]
    1f6a:	0018      	movs	r0, r3
    1f6c:	47a0      	blx	r4
					prvAddTaskToReadyList( pxTCB );
    1f6e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1f70:	4a1b      	ldr	r2, [pc, #108]	; (1fe0 <xTaskResumeAll+0xcc>)
    1f72:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    1f74:	4293      	cmp	r3, r2
    1f76:	d901      	bls.n	1f7c <xTaskResumeAll+0x68>
    1f78:	4a19      	ldr	r2, [pc, #100]	; (1fe0 <xTaskResumeAll+0xcc>)
    1f7a:	66d3      	str	r3, [r2, #108]	; 0x6c
    1f7c:	0098      	lsls	r0, r3, #2
    1f7e:	18c0      	adds	r0, r0, r3
    1f80:	0080      	lsls	r0, r0, #2
    1f82:	1830      	adds	r0, r6, r0
    1f84:	9901      	ldr	r1, [sp, #4]
    1f86:	4b1b      	ldr	r3, [pc, #108]	; (1ff4 <xTaskResumeAll+0xe0>)
    1f88:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1f8a:	4b15      	ldr	r3, [pc, #84]	; (1fe0 <xTaskResumeAll+0xcc>)
    1f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f90:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    1f92:	429a      	cmp	r2, r3
    1f94:	d3dd      	bcc.n	1f52 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
    1f96:	2201      	movs	r2, #1
    1f98:	4b17      	ldr	r3, [pc, #92]	; (1ff8 <xTaskResumeAll+0xe4>)
    1f9a:	601a      	str	r2, [r3, #0]
    1f9c:	e7d9      	b.n	1f52 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
    1f9e:	2d00      	cmp	r5, #0
    1fa0:	d001      	beq.n	1fa6 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
    1fa2:	4b16      	ldr	r3, [pc, #88]	; (1ffc <xTaskResumeAll+0xe8>)
    1fa4:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    1fa6:	4b0e      	ldr	r3, [pc, #56]	; (1fe0 <xTaskResumeAll+0xcc>)
    1fa8:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    1faa:	2c00      	cmp	r4, #0
    1fac:	d00e      	beq.n	1fcc <xTaskResumeAll+0xb8>
							if( xTaskIncrementTick() != pdFALSE )
    1fae:	4f14      	ldr	r7, [pc, #80]	; (2000 <STACK_SIZE>)
								xYieldPending = pdTRUE;
    1fb0:	4e11      	ldr	r6, [pc, #68]	; (1ff8 <xTaskResumeAll+0xe4>)
    1fb2:	2501      	movs	r5, #1
    1fb4:	e002      	b.n	1fbc <xTaskResumeAll+0xa8>
							--uxPendedCounts;
    1fb6:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1fb8:	2c00      	cmp	r4, #0
    1fba:	d004      	beq.n	1fc6 <xTaskResumeAll+0xb2>
							if( xTaskIncrementTick() != pdFALSE )
    1fbc:	47b8      	blx	r7
    1fbe:	2800      	cmp	r0, #0
    1fc0:	d0f9      	beq.n	1fb6 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
    1fc2:	6035      	str	r5, [r6, #0]
    1fc4:	e7f7      	b.n	1fb6 <xTaskResumeAll+0xa2>
						uxPendedTicks = 0;
    1fc6:	2200      	movs	r2, #0
    1fc8:	4b05      	ldr	r3, [pc, #20]	; (1fe0 <xTaskResumeAll+0xcc>)
    1fca:	67da      	str	r2, [r3, #124]	; 0x7c
				if( xYieldPending != pdFALSE )
    1fcc:	4b0a      	ldr	r3, [pc, #40]	; (1ff8 <xTaskResumeAll+0xe4>)
    1fce:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    1fd0:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    1fd2:	2b00      	cmp	r3, #0
    1fd4:	d0b5      	beq.n	1f42 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
    1fd6:	4b0b      	ldr	r3, [pc, #44]	; (2004 <STACK_SIZE+0x4>)
    1fd8:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    1fda:	3401      	adds	r4, #1
    1fdc:	e7b1      	b.n	1f42 <xTaskResumeAll+0x2e>
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	20004398 	.word	0x20004398
    1fe4:	00001141 	.word	0x00001141
    1fe8:	20004318 	.word	0x20004318
    1fec:	00001159 	.word	0x00001159
    1ff0:	00000d7b 	.word	0x00000d7b
    1ff4:	00000d35 	.word	0x00000d35
    1ff8:	20004418 	.word	0x20004418
    1ffc:	00001aa9 	.word	0x00001aa9
    2000:	00001e05 	.word	0x00001e05
    2004:	00001129 	.word	0x00001129

00002008 <vTaskDelay>:
	{
    2008:	b510      	push	{r4, lr}
    200a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    200c:	d00f      	beq.n	202e <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
    200e:	4b09      	ldr	r3, [pc, #36]	; (2034 <vTaskDelay+0x2c>)
    2010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2012:	2b00      	cmp	r3, #0
    2014:	d001      	beq.n	201a <vTaskDelay+0x12>
    2016:	b672      	cpsid	i
    2018:	e7fe      	b.n	2018 <vTaskDelay+0x10>
			vTaskSuspendAll();
    201a:	4b07      	ldr	r3, [pc, #28]	; (2038 <vTaskDelay+0x30>)
    201c:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    201e:	2100      	movs	r1, #0
    2020:	0020      	movs	r0, r4
    2022:	4b06      	ldr	r3, [pc, #24]	; (203c <vTaskDelay+0x34>)
    2024:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    2026:	4b06      	ldr	r3, [pc, #24]	; (2040 <vTaskDelay+0x38>)
    2028:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    202a:	2800      	cmp	r0, #0
    202c:	d101      	bne.n	2032 <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
    202e:	4b05      	ldr	r3, [pc, #20]	; (2044 <vTaskDelay+0x3c>)
    2030:	4798      	blx	r3
	}
    2032:	bd10      	pop	{r4, pc}
    2034:	20004398 	.word	0x20004398
    2038:	00001de9 	.word	0x00001de9
    203c:	00001b3d 	.word	0x00001b3d
    2040:	00001f15 	.word	0x00001f15
    2044:	00001129 	.word	0x00001129

00002048 <vTaskSwitchContext>:
{
    2048:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    204a:	4b21      	ldr	r3, [pc, #132]	; (20d0 <vTaskSwitchContext+0x88>)
    204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    204e:	2b00      	cmp	r3, #0
    2050:	d11a      	bne.n	2088 <vTaskSwitchContext+0x40>
		xYieldPending = pdFALSE;
    2052:	2200      	movs	r2, #0
    2054:	4b1f      	ldr	r3, [pc, #124]	; (20d4 <vTaskSwitchContext+0x8c>)
    2056:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2058:	4b1d      	ldr	r3, [pc, #116]	; (20d0 <vTaskSwitchContext+0x88>)
    205a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    205c:	009a      	lsls	r2, r3, #2
    205e:	18d2      	adds	r2, r2, r3
    2060:	0092      	lsls	r2, r2, #2
    2062:	491d      	ldr	r1, [pc, #116]	; (20d8 <vTaskSwitchContext+0x90>)
    2064:	188a      	adds	r2, r1, r2
    2066:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    2068:	2a00      	cmp	r2, #0
    206a:	d111      	bne.n	2090 <vTaskSwitchContext+0x48>
    206c:	2b00      	cmp	r3, #0
    206e:	d009      	beq.n	2084 <vTaskSwitchContext+0x3c>
    2070:	3b01      	subs	r3, #1
    2072:	009a      	lsls	r2, r3, #2
    2074:	18d2      	adds	r2, r2, r3
    2076:	0092      	lsls	r2, r2, #2
    2078:	188a      	adds	r2, r1, r2
    207a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    207c:	2a00      	cmp	r2, #0
    207e:	d107      	bne.n	2090 <vTaskSwitchContext+0x48>
    2080:	2b00      	cmp	r3, #0
    2082:	d1f5      	bne.n	2070 <vTaskSwitchContext+0x28>
    2084:	b672      	cpsid	i
    2086:	e7fe      	b.n	2086 <vTaskSwitchContext+0x3e>
		xYieldPending = pdTRUE;
    2088:	2201      	movs	r2, #1
    208a:	4b12      	ldr	r3, [pc, #72]	; (20d4 <vTaskSwitchContext+0x8c>)
    208c:	601a      	str	r2, [r3, #0]
}
    208e:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2090:	4a11      	ldr	r2, [pc, #68]	; (20d8 <vTaskSwitchContext+0x90>)
    2092:	0099      	lsls	r1, r3, #2
    2094:	18c8      	adds	r0, r1, r3
    2096:	0080      	lsls	r0, r0, #2
    2098:	1810      	adds	r0, r2, r0
    209a:	6d04      	ldr	r4, [r0, #80]	; 0x50
    209c:	6864      	ldr	r4, [r4, #4]
    209e:	6504      	str	r4, [r0, #80]	; 0x50
    20a0:	18c9      	adds	r1, r1, r3
    20a2:	0089      	lsls	r1, r1, #2
    20a4:	0002      	movs	r2, r0
    20a6:	3254      	adds	r2, #84	; 0x54
    20a8:	4294      	cmp	r4, r2
    20aa:	d00a      	beq.n	20c2 <vTaskSwitchContext+0x7a>
    20ac:	009a      	lsls	r2, r3, #2
    20ae:	18d2      	adds	r2, r2, r3
    20b0:	0092      	lsls	r2, r2, #2
    20b2:	4909      	ldr	r1, [pc, #36]	; (20d8 <vTaskSwitchContext+0x90>)
    20b4:	188a      	adds	r2, r1, r2
    20b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
    20b8:	68d1      	ldr	r1, [r2, #12]
    20ba:	4a05      	ldr	r2, [pc, #20]	; (20d0 <vTaskSwitchContext+0x88>)
    20bc:	6351      	str	r1, [r2, #52]	; 0x34
    20be:	66d3      	str	r3, [r2, #108]	; 0x6c
}
    20c0:	e7e5      	b.n	208e <vTaskSwitchContext+0x46>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    20c2:	6860      	ldr	r0, [r4, #4]
    20c4:	000a      	movs	r2, r1
    20c6:	4904      	ldr	r1, [pc, #16]	; (20d8 <vTaskSwitchContext+0x90>)
    20c8:	188a      	adds	r2, r1, r2
    20ca:	6510      	str	r0, [r2, #80]	; 0x50
    20cc:	e7ee      	b.n	20ac <vTaskSwitchContext+0x64>
    20ce:	46c0      	nop			; (mov r8, r8)
    20d0:	20004398 	.word	0x20004398
    20d4:	20004418 	.word	0x20004418
    20d8:	20004318 	.word	0x20004318

000020dc <vTaskPlaceOnEventList>:
{
    20dc:	b510      	push	{r4, lr}
    20de:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    20e0:	2800      	cmp	r0, #0
    20e2:	d101      	bne.n	20e8 <vTaskPlaceOnEventList+0xc>
    20e4:	b672      	cpsid	i
    20e6:	e7fe      	b.n	20e6 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    20e8:	4b04      	ldr	r3, [pc, #16]	; (20fc <vTaskPlaceOnEventList+0x20>)
    20ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
    20ec:	3118      	adds	r1, #24
    20ee:	4b04      	ldr	r3, [pc, #16]	; (2100 <vTaskPlaceOnEventList+0x24>)
    20f0:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    20f2:	2101      	movs	r1, #1
    20f4:	0020      	movs	r0, r4
    20f6:	4b03      	ldr	r3, [pc, #12]	; (2104 <vTaskPlaceOnEventList+0x28>)
    20f8:	4798      	blx	r3
}
    20fa:	bd10      	pop	{r4, pc}
    20fc:	20004398 	.word	0x20004398
    2100:	00000d4d 	.word	0x00000d4d
    2104:	00001b3d 	.word	0x00001b3d

00002108 <vTaskPlaceOnEventListRestricted>:
	{
    2108:	b570      	push	{r4, r5, r6, lr}
    210a:	000c      	movs	r4, r1
    210c:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    210e:	2800      	cmp	r0, #0
    2110:	d00d      	beq.n	212e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2112:	4b08      	ldr	r3, [pc, #32]	; (2134 <vTaskPlaceOnEventListRestricted+0x2c>)
    2114:	6b59      	ldr	r1, [r3, #52]	; 0x34
    2116:	3118      	adds	r1, #24
    2118:	4b07      	ldr	r3, [pc, #28]	; (2138 <vTaskPlaceOnEventListRestricted+0x30>)
    211a:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    211c:	2d00      	cmp	r5, #0
    211e:	d001      	beq.n	2124 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    2120:	2401      	movs	r4, #1
    2122:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    2124:	0029      	movs	r1, r5
    2126:	0020      	movs	r0, r4
    2128:	4b04      	ldr	r3, [pc, #16]	; (213c <vTaskPlaceOnEventListRestricted+0x34>)
    212a:	4798      	blx	r3
	}
    212c:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    212e:	b672      	cpsid	i
    2130:	e7fe      	b.n	2130 <vTaskPlaceOnEventListRestricted+0x28>
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	20004398 	.word	0x20004398
    2138:	00000d35 	.word	0x00000d35
    213c:	00001b3d 	.word	0x00001b3d

00002140 <xTaskRemoveFromEventList>:
{
    2140:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2142:	68c3      	ldr	r3, [r0, #12]
    2144:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    2146:	2c00      	cmp	r4, #0
    2148:	d028      	beq.n	219c <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    214a:	0025      	movs	r5, r4
    214c:	3518      	adds	r5, #24
    214e:	0028      	movs	r0, r5
    2150:	4b16      	ldr	r3, [pc, #88]	; (21ac <xTaskRemoveFromEventList+0x6c>)
    2152:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2154:	4b16      	ldr	r3, [pc, #88]	; (21b0 <xTaskRemoveFromEventList+0x70>)
    2156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2158:	2b00      	cmp	r3, #0
    215a:	d121      	bne.n	21a0 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    215c:	1d25      	adds	r5, r4, #4
    215e:	0028      	movs	r0, r5
    2160:	4b12      	ldr	r3, [pc, #72]	; (21ac <xTaskRemoveFromEventList+0x6c>)
    2162:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    2164:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2166:	4a12      	ldr	r2, [pc, #72]	; (21b0 <xTaskRemoveFromEventList+0x70>)
    2168:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    216a:	4293      	cmp	r3, r2
    216c:	d901      	bls.n	2172 <xTaskRemoveFromEventList+0x32>
    216e:	4a10      	ldr	r2, [pc, #64]	; (21b0 <xTaskRemoveFromEventList+0x70>)
    2170:	66d3      	str	r3, [r2, #108]	; 0x6c
    2172:	0098      	lsls	r0, r3, #2
    2174:	18c3      	adds	r3, r0, r3
    2176:	009b      	lsls	r3, r3, #2
    2178:	480e      	ldr	r0, [pc, #56]	; (21b4 <xTaskRemoveFromEventList+0x74>)
    217a:	304c      	adds	r0, #76	; 0x4c
    217c:	18c0      	adds	r0, r0, r3
    217e:	0029      	movs	r1, r5
    2180:	4b0d      	ldr	r3, [pc, #52]	; (21b8 <xTaskRemoveFromEventList+0x78>)
    2182:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2184:	4b0a      	ldr	r3, [pc, #40]	; (21b0 <xTaskRemoveFromEventList+0x70>)
    2186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2188:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    218c:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    218e:	429a      	cmp	r2, r3
    2190:	d903      	bls.n	219a <xTaskRemoveFromEventList+0x5a>
		xYieldPending = pdTRUE;
    2192:	2201      	movs	r2, #1
    2194:	4b09      	ldr	r3, [pc, #36]	; (21bc <xTaskRemoveFromEventList+0x7c>)
    2196:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    2198:	3001      	adds	r0, #1
}
    219a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    219c:	b672      	cpsid	i
    219e:	e7fe      	b.n	219e <xTaskRemoveFromEventList+0x5e>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    21a0:	0029      	movs	r1, r5
    21a2:	4804      	ldr	r0, [pc, #16]	; (21b4 <xTaskRemoveFromEventList+0x74>)
    21a4:	3014      	adds	r0, #20
    21a6:	4b04      	ldr	r3, [pc, #16]	; (21b8 <xTaskRemoveFromEventList+0x78>)
    21a8:	4798      	blx	r3
    21aa:	e7eb      	b.n	2184 <xTaskRemoveFromEventList+0x44>
    21ac:	00000d7b 	.word	0x00000d7b
    21b0:	20004398 	.word	0x20004398
    21b4:	20004318 	.word	0x20004318
    21b8:	00000d35 	.word	0x00000d35
    21bc:	20004418 	.word	0x20004418

000021c0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    21c0:	4b02      	ldr	r3, [pc, #8]	; (21cc <vTaskInternalSetTimeOutState+0xc>)
    21c2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    21c4:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    21c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    21c8:	6043      	str	r3, [r0, #4]
}
    21ca:	4770      	bx	lr
    21cc:	20004398 	.word	0x20004398

000021d0 <xTaskCheckForTimeOut>:
{
    21d0:	b570      	push	{r4, r5, r6, lr}
    21d2:	0006      	movs	r6, r0
    21d4:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    21d6:	2800      	cmp	r0, #0
    21d8:	d01b      	beq.n	2212 <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    21da:	2900      	cmp	r1, #0
    21dc:	d01b      	beq.n	2216 <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    21de:	4b13      	ldr	r3, [pc, #76]	; (222c <xTaskCheckForTimeOut+0x5c>)
    21e0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    21e2:	4b13      	ldr	r3, [pc, #76]	; (2230 <xTaskCheckForTimeOut+0x60>)
    21e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    21e6:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    21e8:	682b      	ldr	r3, [r5, #0]
    21ea:	1c58      	adds	r0, r3, #1
    21ec:	d01c      	beq.n	2228 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    21ee:	4810      	ldr	r0, [pc, #64]	; (2230 <xTaskCheckForTimeOut+0x60>)
    21f0:	6f80      	ldr	r0, [r0, #120]	; 0x78
    21f2:	6834      	ldr	r4, [r6, #0]
    21f4:	4284      	cmp	r4, r0
    21f6:	d002      	beq.n	21fe <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    21f8:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    21fa:	428a      	cmp	r2, r1
    21fc:	d205      	bcs.n	220a <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    21fe:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    2200:	429a      	cmp	r2, r3
    2202:	d30a      	bcc.n	221a <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    2204:	2300      	movs	r3, #0
    2206:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    2208:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    220a:	4b0a      	ldr	r3, [pc, #40]	; (2234 <xTaskCheckForTimeOut+0x64>)
    220c:	4798      	blx	r3
}
    220e:	0020      	movs	r0, r4
    2210:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    2212:	b672      	cpsid	i
    2214:	e7fe      	b.n	2214 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    2216:	b672      	cpsid	i
    2218:	e7fe      	b.n	2218 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    221a:	1a9b      	subs	r3, r3, r2
    221c:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    221e:	0030      	movs	r0, r6
    2220:	4b05      	ldr	r3, [pc, #20]	; (2238 <xTaskCheckForTimeOut+0x68>)
    2222:	4798      	blx	r3
			xReturn = pdFALSE;
    2224:	2400      	movs	r4, #0
    2226:	e7f0      	b.n	220a <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    2228:	2400      	movs	r4, #0
    222a:	e7ee      	b.n	220a <xTaskCheckForTimeOut+0x3a>
    222c:	00001141 	.word	0x00001141
    2230:	20004398 	.word	0x20004398
    2234:	00001159 	.word	0x00001159
    2238:	000021c1 	.word	0x000021c1

0000223c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    223c:	2201      	movs	r2, #1
    223e:	4b01      	ldr	r3, [pc, #4]	; (2244 <vTaskMissedYield+0x8>)
    2240:	601a      	str	r2, [r3, #0]
}
    2242:	4770      	bx	lr
    2244:	20004418 	.word	0x20004418

00002248 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    2248:	4b05      	ldr	r3, [pc, #20]	; (2260 <xTaskGetSchedulerState+0x18>)
    224a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			xReturn = taskSCHEDULER_NOT_STARTED;
    224c:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    224e:	2b00      	cmp	r3, #0
    2250:	d004      	beq.n	225c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2252:	4b03      	ldr	r3, [pc, #12]	; (2260 <xTaskGetSchedulerState+0x18>)
    2254:	6f18      	ldr	r0, [r3, #112]	; 0x70
				xReturn = taskSCHEDULER_SUSPENDED;
    2256:	4243      	negs	r3, r0
    2258:	4158      	adcs	r0, r3
    225a:	0040      	lsls	r0, r0, #1
	}
    225c:	4770      	bx	lr
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	20004398 	.word	0x20004398

00002264 <xTaskPriorityInherit>:
	{
    2264:	b570      	push	{r4, r5, r6, lr}
    2266:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    2268:	d03d      	beq.n	22e6 <xTaskPriorityInherit+0x82>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    226a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    226c:	4b1f      	ldr	r3, [pc, #124]	; (22ec <xTaskPriorityInherit+0x88>)
    226e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2272:	4299      	cmp	r1, r3
    2274:	d22f      	bcs.n	22d6 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2276:	6983      	ldr	r3, [r0, #24]
    2278:	2b00      	cmp	r3, #0
    227a:	db05      	blt.n	2288 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    227c:	4b1b      	ldr	r3, [pc, #108]	; (22ec <xTaskPriorityInherit+0x88>)
    227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2282:	2305      	movs	r3, #5
    2284:	1a9b      	subs	r3, r3, r2
    2286:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    2288:	008b      	lsls	r3, r1, #2
    228a:	1859      	adds	r1, r3, r1
    228c:	0089      	lsls	r1, r1, #2
    228e:	4b18      	ldr	r3, [pc, #96]	; (22f0 <xTaskPriorityInherit+0x8c>)
    2290:	334c      	adds	r3, #76	; 0x4c
    2292:	185b      	adds	r3, r3, r1
    2294:	6962      	ldr	r2, [r4, #20]
    2296:	429a      	cmp	r2, r3
    2298:	d005      	beq.n	22a6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    229a:	4b14      	ldr	r3, [pc, #80]	; (22ec <xTaskPriorityInherit+0x88>)
    229c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    22a0:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
    22a2:	2001      	movs	r0, #1
    22a4:	e01e      	b.n	22e4 <xTaskPriorityInherit+0x80>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    22a6:	1d25      	adds	r5, r4, #4
    22a8:	0028      	movs	r0, r5
    22aa:	4b12      	ldr	r3, [pc, #72]	; (22f4 <xTaskPriorityInherit+0x90>)
    22ac:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    22ae:	4b0f      	ldr	r3, [pc, #60]	; (22ec <xTaskPriorityInherit+0x88>)
    22b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    22b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    22b4:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    22b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    22b8:	429a      	cmp	r2, r3
    22ba:	d901      	bls.n	22c0 <xTaskPriorityInherit+0x5c>
    22bc:	4b0b      	ldr	r3, [pc, #44]	; (22ec <xTaskPriorityInherit+0x88>)
    22be:	66da      	str	r2, [r3, #108]	; 0x6c
    22c0:	0090      	lsls	r0, r2, #2
    22c2:	1882      	adds	r2, r0, r2
    22c4:	0092      	lsls	r2, r2, #2
    22c6:	480a      	ldr	r0, [pc, #40]	; (22f0 <xTaskPriorityInherit+0x8c>)
    22c8:	304c      	adds	r0, #76	; 0x4c
    22ca:	1880      	adds	r0, r0, r2
    22cc:	0029      	movs	r1, r5
    22ce:	4b0a      	ldr	r3, [pc, #40]	; (22f8 <xTaskPriorityInherit+0x94>)
    22d0:	4798      	blx	r3
				xReturn = pdTRUE;
    22d2:	2001      	movs	r0, #1
    22d4:	e006      	b.n	22e4 <xTaskPriorityInherit+0x80>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    22d6:	4b05      	ldr	r3, [pc, #20]	; (22ec <xTaskPriorityInherit+0x88>)
    22d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    22da:	6c40      	ldr	r0, [r0, #68]	; 0x44
    22dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    22de:	4298      	cmp	r0, r3
    22e0:	4180      	sbcs	r0, r0
    22e2:	4240      	negs	r0, r0
	}
    22e4:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    22e6:	2000      	movs	r0, #0
		return xReturn;
    22e8:	e7fc      	b.n	22e4 <xTaskPriorityInherit+0x80>
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	20004398 	.word	0x20004398
    22f0:	20004318 	.word	0x20004318
    22f4:	00000d7b 	.word	0x00000d7b
    22f8:	00000d35 	.word	0x00000d35

000022fc <xTaskPriorityDisinherit>:
	{
    22fc:	b570      	push	{r4, r5, r6, lr}
    22fe:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    2300:	d02d      	beq.n	235e <xTaskPriorityDisinherit+0x62>
			configASSERT( pxTCB == pxCurrentTCB );
    2302:	4b19      	ldr	r3, [pc, #100]	; (2368 <xTaskPriorityDisinherit+0x6c>)
    2304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2306:	4298      	cmp	r0, r3
    2308:	d001      	beq.n	230e <xTaskPriorityDisinherit+0x12>
    230a:	b672      	cpsid	i
    230c:	e7fe      	b.n	230c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    230e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2310:	2b00      	cmp	r3, #0
    2312:	d101      	bne.n	2318 <xTaskPriorityDisinherit+0x1c>
    2314:	b672      	cpsid	i
    2316:	e7fe      	b.n	2316 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    2318:	3b01      	subs	r3, #1
    231a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    231c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    231e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    2320:	428a      	cmp	r2, r1
    2322:	d01e      	beq.n	2362 <xTaskPriorityDisinherit+0x66>
	BaseType_t xReturn = pdFALSE;
    2324:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2326:	2b00      	cmp	r3, #0
    2328:	d118      	bne.n	235c <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    232a:	1d25      	adds	r5, r4, #4
    232c:	0028      	movs	r0, r5
    232e:	4b0f      	ldr	r3, [pc, #60]	; (236c <xTaskPriorityDisinherit+0x70>)
    2330:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    2332:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2334:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2336:	2205      	movs	r2, #5
    2338:	1ad2      	subs	r2, r2, r3
    233a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    233c:	4a0a      	ldr	r2, [pc, #40]	; (2368 <xTaskPriorityDisinherit+0x6c>)
    233e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    2340:	4293      	cmp	r3, r2
    2342:	d901      	bls.n	2348 <xTaskPriorityDisinherit+0x4c>
    2344:	4a08      	ldr	r2, [pc, #32]	; (2368 <xTaskPriorityDisinherit+0x6c>)
    2346:	66d3      	str	r3, [r2, #108]	; 0x6c
    2348:	0098      	lsls	r0, r3, #2
    234a:	18c3      	adds	r3, r0, r3
    234c:	009b      	lsls	r3, r3, #2
    234e:	4808      	ldr	r0, [pc, #32]	; (2370 <xTaskPriorityDisinherit+0x74>)
    2350:	304c      	adds	r0, #76	; 0x4c
    2352:	18c0      	adds	r0, r0, r3
    2354:	0029      	movs	r1, r5
    2356:	4b07      	ldr	r3, [pc, #28]	; (2374 <xTaskPriorityDisinherit+0x78>)
    2358:	4798      	blx	r3
					xReturn = pdTRUE;
    235a:	2001      	movs	r0, #1
	}
    235c:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    235e:	2000      	movs	r0, #0
    2360:	e7fc      	b.n	235c <xTaskPriorityDisinherit+0x60>
    2362:	2000      	movs	r0, #0
    2364:	e7fa      	b.n	235c <xTaskPriorityDisinherit+0x60>
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	20004398 	.word	0x20004398
    236c:	00000d7b 	.word	0x00000d7b
    2370:	20004318 	.word	0x20004318
    2374:	00000d35 	.word	0x00000d35

00002378 <vTaskPriorityDisinheritAfterTimeout>:
	{
    2378:	b570      	push	{r4, r5, r6, lr}
    237a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    237c:	d00d      	beq.n	239a <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    237e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2380:	2b00      	cmp	r3, #0
    2382:	d101      	bne.n	2388 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2384:	b672      	cpsid	i
    2386:	e7fe      	b.n	2386 <vTaskPriorityDisinheritAfterTimeout+0xe>
    2388:	6c40      	ldr	r0, [r0, #68]	; 0x44
    238a:	4288      	cmp	r0, r1
    238c:	d200      	bcs.n	2390 <vTaskPriorityDisinheritAfterTimeout+0x18>
    238e:	0008      	movs	r0, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
    2390:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2392:	4282      	cmp	r2, r0
    2394:	d001      	beq.n	239a <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    2396:	2b01      	cmp	r3, #1
    2398:	d000      	beq.n	239c <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
    239a:	bd70      	pop	{r4, r5, r6, pc}
					configASSERT( pxTCB != pxCurrentTCB );
    239c:	4b15      	ldr	r3, [pc, #84]	; (23f4 <vTaskPriorityDisinheritAfterTimeout+0x7c>)
    239e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    23a0:	429c      	cmp	r4, r3
    23a2:	d101      	bne.n	23a8 <vTaskPriorityDisinheritAfterTimeout+0x30>
    23a4:	b672      	cpsid	i
    23a6:	e7fe      	b.n	23a6 <vTaskPriorityDisinheritAfterTimeout+0x2e>
					pxTCB->uxPriority = uxPriorityToUse;
    23a8:	62e0      	str	r0, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    23aa:	69a3      	ldr	r3, [r4, #24]
    23ac:	2b00      	cmp	r3, #0
    23ae:	db02      	blt.n	23b6 <vTaskPriorityDisinheritAfterTimeout+0x3e>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    23b0:	2305      	movs	r3, #5
    23b2:	1a18      	subs	r0, r3, r0
    23b4:	61a0      	str	r0, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    23b6:	0093      	lsls	r3, r2, #2
    23b8:	189a      	adds	r2, r3, r2
    23ba:	0092      	lsls	r2, r2, #2
    23bc:	4b0e      	ldr	r3, [pc, #56]	; (23f8 <vTaskPriorityDisinheritAfterTimeout+0x80>)
    23be:	334c      	adds	r3, #76	; 0x4c
    23c0:	189b      	adds	r3, r3, r2
    23c2:	6962      	ldr	r2, [r4, #20]
    23c4:	429a      	cmp	r2, r3
    23c6:	d1e8      	bne.n	239a <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    23c8:	1d25      	adds	r5, r4, #4
    23ca:	0028      	movs	r0, r5
    23cc:	4b0b      	ldr	r3, [pc, #44]	; (23fc <vTaskPriorityDisinheritAfterTimeout+0x84>)
    23ce:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    23d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    23d2:	4a08      	ldr	r2, [pc, #32]	; (23f4 <vTaskPriorityDisinheritAfterTimeout+0x7c>)
    23d4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    23d6:	4293      	cmp	r3, r2
    23d8:	d901      	bls.n	23de <vTaskPriorityDisinheritAfterTimeout+0x66>
    23da:	4a06      	ldr	r2, [pc, #24]	; (23f4 <vTaskPriorityDisinheritAfterTimeout+0x7c>)
    23dc:	66d3      	str	r3, [r2, #108]	; 0x6c
    23de:	0098      	lsls	r0, r3, #2
    23e0:	18c3      	adds	r3, r0, r3
    23e2:	009b      	lsls	r3, r3, #2
    23e4:	4804      	ldr	r0, [pc, #16]	; (23f8 <vTaskPriorityDisinheritAfterTimeout+0x80>)
    23e6:	304c      	adds	r0, #76	; 0x4c
    23e8:	18c0      	adds	r0, r0, r3
    23ea:	0029      	movs	r1, r5
    23ec:	4b04      	ldr	r3, [pc, #16]	; (2400 <vTaskPriorityDisinheritAfterTimeout+0x88>)
    23ee:	4798      	blx	r3
	}
    23f0:	e7d3      	b.n	239a <vTaskPriorityDisinheritAfterTimeout+0x22>
    23f2:	46c0      	nop			; (mov r8, r8)
    23f4:	20004398 	.word	0x20004398
    23f8:	20004318 	.word	0x20004318
    23fc:	00000d7b 	.word	0x00000d7b
    2400:	00000d35 	.word	0x00000d35

00002404 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    2404:	4b05      	ldr	r3, [pc, #20]	; (241c <pvTaskIncrementMutexHeldCount+0x18>)
    2406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2408:	2b00      	cmp	r3, #0
    240a:	d004      	beq.n	2416 <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
    240c:	4b03      	ldr	r3, [pc, #12]	; (241c <pvTaskIncrementMutexHeldCount+0x18>)
    240e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2410:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2412:	3301      	adds	r3, #1
    2414:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
    2416:	4b01      	ldr	r3, [pc, #4]	; (241c <pvTaskIncrementMutexHeldCount+0x18>)
    2418:	6b58      	ldr	r0, [r3, #52]	; 0x34
	}
    241a:	4770      	bx	lr
    241c:	20004398 	.word	0x20004398

00002420 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    2420:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2422:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2424:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    2426:	4291      	cmp	r1, r2
    2428:	d80b      	bhi.n	2442 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    242a:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    242c:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    242e:	6983      	ldr	r3, [r0, #24]
    2430:	429a      	cmp	r2, r3
    2432:	d211      	bcs.n	2458 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2434:	1d01      	adds	r1, r0, #4
    2436:	4b09      	ldr	r3, [pc, #36]	; (245c <prvInsertTimerInActiveList+0x3c>)
    2438:	6818      	ldr	r0, [r3, #0]
    243a:	4b09      	ldr	r3, [pc, #36]	; (2460 <prvInsertTimerInActiveList+0x40>)
    243c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    243e:	2400      	movs	r4, #0
    2440:	e00a      	b.n	2458 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2442:	429a      	cmp	r2, r3
    2444:	d202      	bcs.n	244c <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    2446:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2448:	4299      	cmp	r1, r3
    244a:	d205      	bcs.n	2458 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    244c:	1d01      	adds	r1, r0, #4
    244e:	4b03      	ldr	r3, [pc, #12]	; (245c <prvInsertTimerInActiveList+0x3c>)
    2450:	6858      	ldr	r0, [r3, #4]
    2452:	4b03      	ldr	r3, [pc, #12]	; (2460 <prvInsertTimerInActiveList+0x40>)
    2454:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    2456:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    2458:	0020      	movs	r0, r4
    245a:	bd10      	pop	{r4, pc}
    245c:	2000441c 	.word	0x2000441c
    2460:	00000d4d 	.word	0x00000d4d

00002464 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    2464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    2466:	4b10      	ldr	r3, [pc, #64]	; (24a8 <prvCheckForValidListAndQueue+0x44>)
    2468:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    246a:	4b10      	ldr	r3, [pc, #64]	; (24ac <prvCheckForValidListAndQueue+0x48>)
    246c:	689b      	ldr	r3, [r3, #8]
    246e:	2b00      	cmp	r3, #0
    2470:	d002      	beq.n	2478 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2472:	4b0f      	ldr	r3, [pc, #60]	; (24b0 <prvCheckForValidListAndQueue+0x4c>)
    2474:	4798      	blx	r3
}
    2476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
    2478:	4c0c      	ldr	r4, [pc, #48]	; (24ac <prvCheckForValidListAndQueue+0x48>)
    247a:	0026      	movs	r6, r4
    247c:	360c      	adds	r6, #12
    247e:	0030      	movs	r0, r6
    2480:	4f0c      	ldr	r7, [pc, #48]	; (24b4 <prvCheckForValidListAndQueue+0x50>)
    2482:	47b8      	blx	r7
			vListInitialise( &xActiveTimerList2 );
    2484:	0025      	movs	r5, r4
    2486:	3520      	adds	r5, #32
    2488:	0028      	movs	r0, r5
    248a:	47b8      	blx	r7
			pxCurrentTimerList = &xActiveTimerList1;
    248c:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    248e:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2490:	2200      	movs	r2, #0
    2492:	210c      	movs	r1, #12
    2494:	2005      	movs	r0, #5
    2496:	4b08      	ldr	r3, [pc, #32]	; (24b8 <prvCheckForValidListAndQueue+0x54>)
    2498:	4798      	blx	r3
    249a:	60a0      	str	r0, [r4, #8]
				if( xTimerQueue != NULL )
    249c:	2800      	cmp	r0, #0
    249e:	d0e8      	beq.n	2472 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    24a0:	4906      	ldr	r1, [pc, #24]	; (24bc <prvCheckForValidListAndQueue+0x58>)
    24a2:	4b07      	ldr	r3, [pc, #28]	; (24c0 <prvCheckForValidListAndQueue+0x5c>)
    24a4:	4798      	blx	r3
    24a6:	e7e4      	b.n	2472 <prvCheckForValidListAndQueue+0xe>
    24a8:	00001141 	.word	0x00001141
    24ac:	2000441c 	.word	0x2000441c
    24b0:	00001159 	.word	0x00001159
    24b4:	00000d19 	.word	0x00000d19
    24b8:	00001459 	.word	0x00001459
    24bc:	00004f88 	.word	0x00004f88
    24c0:	00001a19 	.word	0x00001a19

000024c4 <xTimerCreateTimerTask>:
{
    24c4:	b510      	push	{r4, lr}
    24c6:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    24c8:	4b0b      	ldr	r3, [pc, #44]	; (24f8 <xTimerCreateTimerTask+0x34>)
    24ca:	4798      	blx	r3
	if( xTimerQueue != NULL )
    24cc:	4b0b      	ldr	r3, [pc, #44]	; (24fc <xTimerCreateTimerTask+0x38>)
    24ce:	689b      	ldr	r3, [r3, #8]
    24d0:	2b00      	cmp	r3, #0
    24d2:	d00e      	beq.n	24f2 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
    24d4:	4b09      	ldr	r3, [pc, #36]	; (24fc <xTimerCreateTimerTask+0x38>)
    24d6:	3334      	adds	r3, #52	; 0x34
    24d8:	9301      	str	r3, [sp, #4]
    24da:	2302      	movs	r3, #2
    24dc:	9300      	str	r3, [sp, #0]
    24de:	2300      	movs	r3, #0
    24e0:	2250      	movs	r2, #80	; 0x50
    24e2:	4907      	ldr	r1, [pc, #28]	; (2500 <xTimerCreateTimerTask+0x3c>)
    24e4:	4807      	ldr	r0, [pc, #28]	; (2504 <xTimerCreateTimerTask+0x40>)
    24e6:	4c08      	ldr	r4, [pc, #32]	; (2508 <xTimerCreateTimerTask+0x44>)
    24e8:	47a0      	blx	r4
	configASSERT( xReturn );
    24ea:	2800      	cmp	r0, #0
    24ec:	d001      	beq.n	24f2 <xTimerCreateTimerTask+0x2e>
}
    24ee:	b002      	add	sp, #8
    24f0:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    24f2:	b672      	cpsid	i
    24f4:	e7fe      	b.n	24f4 <xTimerCreateTimerTask+0x30>
    24f6:	46c0      	nop			; (mov r8, r8)
    24f8:	00002465 	.word	0x00002465
    24fc:	2000441c 	.word	0x2000441c
    2500:	00004f90 	.word	0x00004f90
    2504:	00002629 	.word	0x00002629
    2508:	00001bad 	.word	0x00001bad

0000250c <xTimerGenericCommand>:
{
    250c:	b530      	push	{r4, r5, lr}
    250e:	b085      	sub	sp, #20
    2510:	0004      	movs	r4, r0
    2512:	001d      	movs	r5, r3
	configASSERT( xTimer );
    2514:	2800      	cmp	r0, #0
    2516:	d014      	beq.n	2542 <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    2518:	4b13      	ldr	r3, [pc, #76]	; (2568 <xTimerGenericCommand+0x5c>)
    251a:	6898      	ldr	r0, [r3, #8]
    251c:	2800      	cmp	r0, #0
    251e:	d021      	beq.n	2564 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    2520:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2522:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2524:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2526:	2905      	cmp	r1, #5
    2528:	dc15      	bgt.n	2556 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    252a:	4b10      	ldr	r3, [pc, #64]	; (256c <xTimerGenericCommand+0x60>)
    252c:	4798      	blx	r3
    252e:	2802      	cmp	r0, #2
    2530:	d009      	beq.n	2546 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2532:	4b0d      	ldr	r3, [pc, #52]	; (2568 <xTimerGenericCommand+0x5c>)
    2534:	6898      	ldr	r0, [r3, #8]
    2536:	2300      	movs	r3, #0
    2538:	2200      	movs	r2, #0
    253a:	a901      	add	r1, sp, #4
    253c:	4c0c      	ldr	r4, [pc, #48]	; (2570 <xTimerGenericCommand+0x64>)
    253e:	47a0      	blx	r4
    2540:	e00e      	b.n	2560 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    2542:	b672      	cpsid	i
    2544:	e7fe      	b.n	2544 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2546:	4b08      	ldr	r3, [pc, #32]	; (2568 <xTimerGenericCommand+0x5c>)
    2548:	6898      	ldr	r0, [r3, #8]
    254a:	2300      	movs	r3, #0
    254c:	9a08      	ldr	r2, [sp, #32]
    254e:	a901      	add	r1, sp, #4
    2550:	4c07      	ldr	r4, [pc, #28]	; (2570 <xTimerGenericCommand+0x64>)
    2552:	47a0      	blx	r4
    2554:	e004      	b.n	2560 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2556:	2300      	movs	r3, #0
    2558:	002a      	movs	r2, r5
    255a:	a901      	add	r1, sp, #4
    255c:	4c05      	ldr	r4, [pc, #20]	; (2574 <xTimerGenericCommand+0x68>)
    255e:	47a0      	blx	r4
}
    2560:	b005      	add	sp, #20
    2562:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    2564:	2000      	movs	r0, #0
	return xReturn;
    2566:	e7fb      	b.n	2560 <xTimerGenericCommand+0x54>
    2568:	2000441c 	.word	0x2000441c
    256c:	00002249 	.word	0x00002249
    2570:	000014a5 	.word	0x000014a5
    2574:	0000165d 	.word	0x0000165d

00002578 <prvSampleTimeNow>:
{
    2578:	b5f0      	push	{r4, r5, r6, r7, lr}
    257a:	46d6      	mov	lr, sl
    257c:	464f      	mov	r7, r9
    257e:	4646      	mov	r6, r8
    2580:	b5c0      	push	{r6, r7, lr}
    2582:	b082      	sub	sp, #8
    2584:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    2586:	4b23      	ldr	r3, [pc, #140]	; (2614 <prvSampleTimeNow+0x9c>)
    2588:	4798      	blx	r3
    258a:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    258c:	4b22      	ldr	r3, [pc, #136]	; (2618 <prvSampleTimeNow+0xa0>)
    258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2590:	4298      	cmp	r0, r3
    2592:	d317      	bcc.n	25c4 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    2594:	2300      	movs	r3, #0
    2596:	4642      	mov	r2, r8
    2598:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    259a:	4b1f      	ldr	r3, [pc, #124]	; (2618 <prvSampleTimeNow+0xa0>)
    259c:	4652      	mov	r2, sl
    259e:	639a      	str	r2, [r3, #56]	; 0x38
}
    25a0:	4650      	mov	r0, sl
    25a2:	b002      	add	sp, #8
    25a4:	bc1c      	pop	{r2, r3, r4}
    25a6:	4690      	mov	r8, r2
    25a8:	4699      	mov	r9, r3
    25aa:	46a2      	mov	sl, r4
    25ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    25ae:	2300      	movs	r3, #0
    25b0:	9300      	str	r3, [sp, #0]
    25b2:	003a      	movs	r2, r7
    25b4:	2100      	movs	r1, #0
    25b6:	0020      	movs	r0, r4
    25b8:	4c18      	ldr	r4, [pc, #96]	; (261c <prvSampleTimeNow+0xa4>)
    25ba:	47a0      	blx	r4
				configASSERT( xResult );
    25bc:	2800      	cmp	r0, #0
    25be:	d104      	bne.n	25ca <prvSampleTimeNow+0x52>
    25c0:	b672      	cpsid	i
    25c2:	e7fe      	b.n	25c2 <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    25c4:	4d14      	ldr	r5, [pc, #80]	; (2618 <prvSampleTimeNow+0xa0>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    25c6:	4b16      	ldr	r3, [pc, #88]	; (2620 <prvSampleTimeNow+0xa8>)
    25c8:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    25ca:	686b      	ldr	r3, [r5, #4]
    25cc:	681a      	ldr	r2, [r3, #0]
    25ce:	2a00      	cmp	r2, #0
    25d0:	d017      	beq.n	2602 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    25d2:	68db      	ldr	r3, [r3, #12]
    25d4:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    25d6:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    25d8:	1d26      	adds	r6, r4, #4
    25da:	0030      	movs	r0, r6
    25dc:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    25de:	0020      	movs	r0, r4
    25e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    25e2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    25e4:	69e3      	ldr	r3, [r4, #28]
    25e6:	2b01      	cmp	r3, #1
    25e8:	d1ef      	bne.n	25ca <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    25ea:	69a3      	ldr	r3, [r4, #24]
    25ec:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    25ee:	429f      	cmp	r7, r3
    25f0:	d2dd      	bcs.n	25ae <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    25f2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    25f4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    25f6:	4b08      	ldr	r3, [pc, #32]	; (2618 <prvSampleTimeNow+0xa0>)
    25f8:	6858      	ldr	r0, [r3, #4]
    25fa:	0031      	movs	r1, r6
    25fc:	4b09      	ldr	r3, [pc, #36]	; (2624 <prvSampleTimeNow+0xac>)
    25fe:	4798      	blx	r3
    2600:	e7e3      	b.n	25ca <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    2602:	4a05      	ldr	r2, [pc, #20]	; (2618 <prvSampleTimeNow+0xa0>)
    2604:	6811      	ldr	r1, [r2, #0]
    2606:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    2608:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    260a:	2301      	movs	r3, #1
    260c:	4642      	mov	r2, r8
    260e:	6013      	str	r3, [r2, #0]
    2610:	e7c3      	b.n	259a <prvSampleTimeNow+0x22>
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	00001df9 	.word	0x00001df9
    2618:	2000441c 	.word	0x2000441c
    261c:	0000250d 	.word	0x0000250d
    2620:	00000d7b 	.word	0x00000d7b
    2624:	00000d4d 	.word	0x00000d4d

00002628 <prvTimerTask>:
{
    2628:	b5f0      	push	{r4, r5, r6, r7, lr}
    262a:	b089      	sub	sp, #36	; 0x24
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    262c:	4f52      	ldr	r7, [pc, #328]	; (2778 <prvTimerTask+0x150>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    262e:	4b53      	ldr	r3, [pc, #332]	; (277c <prvTimerTask+0x154>)
    2630:	685b      	ldr	r3, [r3, #4]
    2632:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    2634:	2a00      	cmp	r2, #0
    2636:	d00e      	beq.n	2656 <prvTimerTask+0x2e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2638:	68db      	ldr	r3, [r3, #12]
    263a:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    263c:	4b50      	ldr	r3, [pc, #320]	; (2780 <prvTimerTask+0x158>)
    263e:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2640:	a805      	add	r0, sp, #20
    2642:	4b50      	ldr	r3, [pc, #320]	; (2784 <prvTimerTask+0x15c>)
    2644:	4798      	blx	r3
    2646:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    2648:	9b05      	ldr	r3, [sp, #20]
    264a:	2b00      	cmp	r3, #0
    264c:	d15f      	bne.n	270e <prvTimerTask+0xe6>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    264e:	42a0      	cmp	r0, r4
    2650:	d236      	bcs.n	26c0 <prvTimerTask+0x98>
    2652:	2200      	movs	r2, #0
    2654:	e00f      	b.n	2676 <prvTimerTask+0x4e>
	vTaskSuspendAll();
    2656:	4b4a      	ldr	r3, [pc, #296]	; (2780 <prvTimerTask+0x158>)
    2658:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    265a:	a805      	add	r0, sp, #20
    265c:	4b49      	ldr	r3, [pc, #292]	; (2784 <prvTimerTask+0x15c>)
    265e:	4798      	blx	r3
    2660:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    2662:	9b05      	ldr	r3, [sp, #20]
    2664:	2b00      	cmp	r3, #0
    2666:	d152      	bne.n	270e <prvTimerTask+0xe6>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2668:	4b44      	ldr	r3, [pc, #272]	; (277c <prvTimerTask+0x154>)
    266a:	681b      	ldr	r3, [r3, #0]
    266c:	681b      	ldr	r3, [r3, #0]
    266e:	425a      	negs	r2, r3
    2670:	415a      	adcs	r2, r3
    2672:	b2d2      	uxtb	r2, r2
    2674:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2676:	1b61      	subs	r1, r4, r5
    2678:	4b40      	ldr	r3, [pc, #256]	; (277c <prvTimerTask+0x154>)
    267a:	6898      	ldr	r0, [r3, #8]
    267c:	4b42      	ldr	r3, [pc, #264]	; (2788 <prvTimerTask+0x160>)
    267e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2680:	4b42      	ldr	r3, [pc, #264]	; (278c <prvTimerTask+0x164>)
    2682:	4798      	blx	r3
    2684:	2800      	cmp	r0, #0
    2686:	d03f      	beq.n	2708 <prvTimerTask+0xe0>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2688:	4d3c      	ldr	r5, [pc, #240]	; (277c <prvTimerTask+0x154>)
    268a:	4c41      	ldr	r4, [pc, #260]	; (2790 <prvTimerTask+0x168>)
    268c:	2200      	movs	r2, #0
    268e:	a905      	add	r1, sp, #20
    2690:	68a8      	ldr	r0, [r5, #8]
    2692:	47a0      	blx	r4
    2694:	2800      	cmp	r0, #0
    2696:	d0ca      	beq.n	262e <prvTimerTask+0x6>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2698:	9b05      	ldr	r3, [sp, #20]
    269a:	9303      	str	r3, [sp, #12]
    269c:	2b00      	cmp	r3, #0
    269e:	dbf5      	blt.n	268c <prvTimerTask+0x64>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    26a0:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    26a2:	6973      	ldr	r3, [r6, #20]
    26a4:	2b00      	cmp	r3, #0
    26a6:	d001      	beq.n	26ac <prvTimerTask+0x84>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    26a8:	1d30      	adds	r0, r6, #4
    26aa:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    26ac:	a804      	add	r0, sp, #16
    26ae:	4b35      	ldr	r3, [pc, #212]	; (2784 <prvTimerTask+0x15c>)
    26b0:	4798      	blx	r3
			switch( xMessage.xMessageID )
    26b2:	9b05      	ldr	r3, [sp, #20]
    26b4:	2b09      	cmp	r3, #9
    26b6:	d8e9      	bhi.n	268c <prvTimerTask+0x64>
    26b8:	009b      	lsls	r3, r3, #2
    26ba:	4a36      	ldr	r2, [pc, #216]	; (2794 <prvTimerTask+0x16c>)
    26bc:	58d3      	ldr	r3, [r2, r3]
    26be:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    26c0:	4b32      	ldr	r3, [pc, #200]	; (278c <prvTimerTask+0x164>)
    26c2:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    26c4:	4b2d      	ldr	r3, [pc, #180]	; (277c <prvTimerTask+0x154>)
    26c6:	685b      	ldr	r3, [r3, #4]
    26c8:	68db      	ldr	r3, [r3, #12]
    26ca:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    26cc:	1d30      	adds	r0, r6, #4
    26ce:	4b2a      	ldr	r3, [pc, #168]	; (2778 <prvTimerTask+0x150>)
    26d0:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    26d2:	69f3      	ldr	r3, [r6, #28]
    26d4:	2b01      	cmp	r3, #1
    26d6:	d003      	beq.n	26e0 <prvTimerTask+0xb8>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    26d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    26da:	0030      	movs	r0, r6
    26dc:	4798      	blx	r3
    26de:	e7d3      	b.n	2688 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    26e0:	69b3      	ldr	r3, [r6, #24]
    26e2:	18e1      	adds	r1, r4, r3
    26e4:	0023      	movs	r3, r4
    26e6:	002a      	movs	r2, r5
    26e8:	0030      	movs	r0, r6
    26ea:	4d2b      	ldr	r5, [pc, #172]	; (2798 <prvTimerTask+0x170>)
    26ec:	47a8      	blx	r5
    26ee:	2800      	cmp	r0, #0
    26f0:	d0f2      	beq.n	26d8 <prvTimerTask+0xb0>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    26f2:	2300      	movs	r3, #0
    26f4:	9300      	str	r3, [sp, #0]
    26f6:	0022      	movs	r2, r4
    26f8:	2100      	movs	r1, #0
    26fa:	0030      	movs	r0, r6
    26fc:	4c27      	ldr	r4, [pc, #156]	; (279c <prvTimerTask+0x174>)
    26fe:	47a0      	blx	r4
			configASSERT( xResult );
    2700:	2800      	cmp	r0, #0
    2702:	d1e9      	bne.n	26d8 <prvTimerTask+0xb0>
    2704:	b672      	cpsid	i
    2706:	e7fe      	b.n	2706 <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
    2708:	4b25      	ldr	r3, [pc, #148]	; (27a0 <prvTimerTask+0x178>)
    270a:	4798      	blx	r3
    270c:	e7bc      	b.n	2688 <prvTimerTask+0x60>
			( void ) xTaskResumeAll();
    270e:	4b1f      	ldr	r3, [pc, #124]	; (278c <prvTimerTask+0x164>)
    2710:	4798      	blx	r3
    2712:	e7b9      	b.n	2688 <prvTimerTask+0x60>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2714:	9b06      	ldr	r3, [sp, #24]
    2716:	69b2      	ldr	r2, [r6, #24]
    2718:	4694      	mov	ip, r2
    271a:	4463      	add	r3, ip
    271c:	0019      	movs	r1, r3
    271e:	9b06      	ldr	r3, [sp, #24]
    2720:	0002      	movs	r2, r0
    2722:	0030      	movs	r0, r6
    2724:	4c1c      	ldr	r4, [pc, #112]	; (2798 <prvTimerTask+0x170>)
    2726:	47a0      	blx	r4
    2728:	2800      	cmp	r0, #0
    272a:	d0ae      	beq.n	268a <prvTimerTask+0x62>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    272c:	0030      	movs	r0, r6
    272e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    2730:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2732:	69f3      	ldr	r3, [r6, #28]
    2734:	2b01      	cmp	r3, #1
    2736:	d1a8      	bne.n	268a <prvTimerTask+0x62>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2738:	9b06      	ldr	r3, [sp, #24]
    273a:	69b1      	ldr	r1, [r6, #24]
    273c:	468c      	mov	ip, r1
    273e:	4463      	add	r3, ip
    2740:	001a      	movs	r2, r3
    2742:	2300      	movs	r3, #0
    2744:	9300      	str	r3, [sp, #0]
    2746:	2100      	movs	r1, #0
    2748:	0030      	movs	r0, r6
    274a:	4c14      	ldr	r4, [pc, #80]	; (279c <prvTimerTask+0x174>)
    274c:	47a0      	blx	r4
							configASSERT( xResult );
    274e:	2800      	cmp	r0, #0
    2750:	d19b      	bne.n	268a <prvTimerTask+0x62>
    2752:	b672      	cpsid	i
    2754:	e7fe      	b.n	2754 <prvTimerTask+0x12c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2756:	9906      	ldr	r1, [sp, #24]
    2758:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    275a:	2900      	cmp	r1, #0
    275c:	d006      	beq.n	276c <prvTimerTask+0x144>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    275e:	1841      	adds	r1, r0, r1
    2760:	0003      	movs	r3, r0
    2762:	0002      	movs	r2, r0
    2764:	0030      	movs	r0, r6
    2766:	4c0c      	ldr	r4, [pc, #48]	; (2798 <prvTimerTask+0x170>)
    2768:	47a0      	blx	r4
    276a:	e78e      	b.n	268a <prvTimerTask+0x62>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    276c:	b672      	cpsid	i
    276e:	e7fe      	b.n	276e <prvTimerTask+0x146>
						vPortFree( pxTimer );
    2770:	0030      	movs	r0, r6
    2772:	4b0c      	ldr	r3, [pc, #48]	; (27a4 <prvTimerTask+0x17c>)
    2774:	4798      	blx	r3
    2776:	e788      	b.n	268a <prvTimerTask+0x62>
    2778:	00000d7b 	.word	0x00000d7b
    277c:	2000441c 	.word	0x2000441c
    2780:	00001de9 	.word	0x00001de9
    2784:	00002579 	.word	0x00002579
    2788:	00001a49 	.word	0x00001a49
    278c:	00001f15 	.word	0x00001f15
    2790:	0000172d 	.word	0x0000172d
    2794:	00004f60 	.word	0x00004f60
    2798:	00002421 	.word	0x00002421
    279c:	0000250d 	.word	0x0000250d
    27a0:	00001129 	.word	0x00001129
    27a4:	00000cd1 	.word	0x00000cd1

000027a8 <initUART>:
/* Replace with your library code */
void initUART(void) {

	/* APBCMASK */
   /* SERCOM 0 enable*/
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
    27a8:	4a1f      	ldr	r2, [pc, #124]	; (2828 <initUART+0x80>)
    27aa:	6a13      	ldr	r3, [r2, #32]
    27ac:	2104      	movs	r1, #4
    27ae:	430b      	orrs	r3, r1
    27b0:	6213      	str	r3, [r2, #32]

	/*GCLK configuration for sercom0 module: using generic clock generator 0, ID for sercom0, enable GCLK*/
    GCLK->GENCTRL.reg=GCLK_GENCTRL_SRC_OSC8M|GCLK_GENCTRL_ID(0)|
    27b2:	4b1e      	ldr	r3, [pc, #120]	; (282c <initUART+0x84>)
    27b4:	2283      	movs	r2, #131	; 0x83
    27b6:	0252      	lsls	r2, r2, #9
    27b8:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_GENEN;

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
    27ba:	4a1d      	ldr	r2, [pc, #116]	; (2830 <initUART+0x88>)
    27bc:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);

  /*CONFIGURAR PA10 y PA11 como salidas tipo C (SERCOM 0) */
  PORT->Group[0].PINCFG[PIN_PA10].reg= PA10_TX;
    27be:	4b1d      	ldr	r3, [pc, #116]	; (2834 <initUART+0x8c>)
    27c0:	3903      	subs	r1, #3
    27c2:	224a      	movs	r2, #74	; 0x4a
    27c4:	5499      	strb	r1, [r3, r2]
  PORT->Group[0].PINCFG[PIN_PA11].reg= PA11_RX;
    27c6:	3106      	adds	r1, #6
    27c8:	3201      	adds	r2, #1
    27ca:	5499      	strb	r1, [r3, r2]
  PORT->Group[0].PMUX[5].bit.PMUXE=Type_C;
    27cc:	312e      	adds	r1, #46	; 0x2e
    27ce:	5c5a      	ldrb	r2, [r3, r1]
    27d0:	200f      	movs	r0, #15
    27d2:	4382      	bics	r2, r0
    27d4:	2002      	movs	r0, #2
    27d6:	4302      	orrs	r2, r0
    27d8:	545a      	strb	r2, [r3, r1]
  PORT->Group[0].PMUX[5].bit.PMUXO=Type_C;
    27da:	5c58      	ldrb	r0, [r3, r1]
    27dc:	220f      	movs	r2, #15
    27de:	4002      	ands	r2, r0
    27e0:	2020      	movs	r0, #32
    27e2:	4302      	orrs	r2, r0
    27e4:	545a      	strb	r2, [r3, r1]
	
	//desahibilitar UART para inicializacion
	SERCOM0->USART.CTRLA.bit.ENABLE=0;
    27e6:	4b14      	ldr	r3, [pc, #80]	; (2838 <initUART+0x90>)
    27e8:	681a      	ldr	r2, [r3, #0]
    27ea:	3933      	subs	r1, #51	; 0x33
    27ec:	438a      	bics	r2, r1
    27ee:	601a      	str	r2, [r3, #0]
   
   DEFINES:
   1)SERCOM_USART_CTRLA_DORD (_U(0x1) << SERCOM_USART_CTRLA_DORD_Pos)
   2)SERCOM_USART_CTRLA_MODE_USART_INT_CLK (0x1 << 2)
   3)SERCOM_USART_CTRLA_RXPO(value) (SERCOM_USART_CTRLA_RXPO_Msk & ((value) << SERCOM_USART_CTRLA_RXPO_Pos) */
	SERCOM0->USART.CTRLA.reg =
    27f0:	4a12      	ldr	r2, [pc, #72]	; (283c <initUART+0x94>)
    27f2:	601a      	str	r2, [r3, #0]
	SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
	SERCOM_USART_CTRLA_RXPO(3) | SERCOM_USART_CTRLA_TXPO(1);
	
	while(SERCOM0->USART.SYNCBUSY.reg){} // waiting loading
    27f4:	001a      	movs	r2, r3
    27f6:	69d3      	ldr	r3, [r2, #28]
    27f8:	2b00      	cmp	r3, #0
    27fa:	d1fc      	bne.n	27f6 <initUART+0x4e>
	uint64_t br = (uint64_t)65536 * (8000000 - 16 * 9600) / 8000000;

	SERCOM0->USART.BAUD.reg = (uint16_t)br;
    27fc:	4a10      	ldr	r2, [pc, #64]	; (2840 <initUART+0x98>)
    27fe:	4b0e      	ldr	r3, [pc, #56]	; (2838 <initUART+0x90>)
    2800:	819a      	strh	r2, [r3, #12]
	
	while(SERCOM0->USART.SYNCBUSY.reg){} // waiting loading
    2802:	001a      	movs	r2, r3
    2804:	69d3      	ldr	r3, [r2, #28]
    2806:	2b00      	cmp	r3, #0
    2808:	d1fc      	bne.n	2804 <initUART+0x5c>
	SERCOM0->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_CHSIZE(0/*8 bits*/);
    280a:	22c0      	movs	r2, #192	; 0xc0
    280c:	0292      	lsls	r2, r2, #10
    280e:	4b0a      	ldr	r3, [pc, #40]	; (2838 <initUART+0x90>)
    2810:	605a      	str	r2, [r3, #4]
    while(SERCOM0->USART.SYNCBUSY.reg){} // waiting loading
    2812:	001a      	movs	r2, r3
    2814:	69d3      	ldr	r3, [r2, #28]
    2816:	2b00      	cmp	r3, #0
    2818:	d1fc      	bne.n	2814 <initUART+0x6c>
	SERCOM0->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    281a:	4a07      	ldr	r2, [pc, #28]	; (2838 <initUART+0x90>)
    281c:	6813      	ldr	r3, [r2, #0]
    281e:	2102      	movs	r1, #2
    2820:	430b      	orrs	r3, r1
    2822:	6013      	str	r3, [r2, #0]
}
    2824:	4770      	bx	lr
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	40000400 	.word	0x40000400
    282c:	40000c00 	.word	0x40000c00
    2830:	00004014 	.word	0x00004014
    2834:	41004400 	.word	0x41004400
    2838:	42000800 	.word	0x42000800
    283c:	40310004 	.word	0x40310004
    2840:	fffffb15 	.word	0xfffffb15

00002844 <initSPI>:
#include "spi.h"

void initSPI(void) {
	
	// SLAVE SELECT PIN 8 ARDUINO
	REG_PORT_DIRSET0 = PORT_PA06;
    2844:	4a15      	ldr	r2, [pc, #84]	; (289c <initSPI+0x58>)
    2846:	2140      	movs	r1, #64	; 0x40
    2848:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTSET0 = PORT_PA06;
    284a:	4b15      	ldr	r3, [pc, #84]	; (28a0 <initSPI+0x5c>)
    284c:	6019      	str	r1, [r3, #0]
	// SLAVE SELECT PIN 9 ARDUINO
	REG_PORT_DIRSET0 = PORT_PA07;
    284e:	3140      	adds	r1, #64	; 0x40
    2850:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTSET0 = PORT_PA07;
    2852:	6019      	str	r1, [r3, #0]
	// SLAVE SELECT PIN 10 ARDUINO
	REG_PORT_DIRSET0 = PORT_PA18;
    2854:	2180      	movs	r1, #128	; 0x80
    2856:	02c9      	lsls	r1, r1, #11
    2858:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTSET0 = PORT_PA18;
    285a:	6019      	str	r1, [r3, #0]
	
	// INIT SPI PROTOCOL
	PM->APBCMASK.bit.SERCOM1_ = 1;
    285c:	4a11      	ldr	r2, [pc, #68]	; (28a4 <initSPI+0x60>)
    285e:	6a13      	ldr	r3, [r2, #32]
    2860:	2108      	movs	r1, #8
    2862:	430b      	orrs	r3, r1
    2864:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    2866:	4a10      	ldr	r2, [pc, #64]	; (28a8 <initSPI+0x64>)
    2868:	4b10      	ldr	r3, [pc, #64]	; (28ac <initSPI+0x68>)
    286a:	805a      	strh	r2, [r3, #2]
	while(GCLK->STATUS.bit.SYNCBUSY);
    286c:	001a      	movs	r2, r3
    286e:	7853      	ldrb	r3, [r2, #1]
    2870:	09db      	lsrs	r3, r3, #7
    2872:	d1fc      	bne.n	286e <initSPI+0x2a>
		.bit.FORM = 0, // SPI frame
		.bit.DIPO = 3, // MISO on PAD[3]
		.bit.DOPO = 0, // MOSI on PAD[0], SCK on PAD[1], SS_ on PAD[2]
		.bit.MODE = 3  // Master
	};
	SERCOM1->SPI.CTRLA.reg = ctrla.reg;
    2874:	4a0e      	ldr	r2, [pc, #56]	; (28b0 <initSPI+0x6c>)
    2876:	4b0f      	ldr	r3, [pc, #60]	; (28b4 <initSPI+0x70>)
    2878:	6811      	ldr	r1, [r2, #0]
    287a:	6019      	str	r1, [r3, #0]
	const SERCOM_SPI_CTRLB_Type ctrlb = {
    287c:	2180      	movs	r1, #128	; 0x80
    287e:	0289      	lsls	r1, r1, #10
		.bit.RXEN = 1,   // RX enabled
		.bit.MSSEN = 0,  // Manual SC
		.bit.CHSIZE = 0 // 8-bit
	};
	SERCOM1->SPI.CTRLB.reg = ctrlb.reg;
    2880:	6059      	str	r1, [r3, #4]

	SERCOM1->SPI.BAUD.reg = 2; // Rate is clock / 2
    2882:	2102      	movs	r1, #2
    2884:	7319      	strb	r1, [r3, #12]
		.bit.PMUX = MUX_PA16C_SERCOM1_PAD0,
		.bit.PMUXEN = 1,
		.bit.HWSEL = 1,
		.bit.PINMASK = (uint16_t)((PORT_PA16 | PORT_PA17 | PORT_PA19) >> 16)
	};
	PORT->Group[0].WRCONFIG.reg = wrconfig.reg;
    2886:	6850      	ldr	r0, [r2, #4]
    2888:	4a0b      	ldr	r2, [pc, #44]	; (28b8 <initSPI+0x74>)
    288a:	6290      	str	r0, [r2, #40]	; 0x28

	SERCOM1->SPI.CTRLA.bit.ENABLE = 1;
    288c:	681a      	ldr	r2, [r3, #0]
    288e:	430a      	orrs	r2, r1
    2890:	601a      	str	r2, [r3, #0]
	while(SERCOM1->SPI.SYNCBUSY.bit.ENABLE);
    2892:	001a      	movs	r2, r3
    2894:	69d3      	ldr	r3, [r2, #28]
    2896:	079b      	lsls	r3, r3, #30
    2898:	d4fc      	bmi.n	2894 <initSPI+0x50>
}
    289a:	4770      	bx	lr
    289c:	41004408 	.word	0x41004408
    28a0:	41004418 	.word	0x41004418
    28a4:	40000400 	.word	0x40000400
    28a8:	00004015 	.word	0x00004015
    28ac:	40000c00 	.word	0x40000c00
    28b0:	00004f98 	.word	0x00004f98
    28b4:	42000c00 	.word	0x42000c00
    28b8:	41004400 	.word	0x41004400

000028bc <spiSend>:

uint8_t spiSend(uint8_t data) {
	uint8_t ret;
	while(SERCOM1->SPI.INTFLAG.bit.DRE == 0);
    28bc:	4a08      	ldr	r2, [pc, #32]	; (28e0 <spiSend+0x24>)
    28be:	7e13      	ldrb	r3, [r2, #24]
    28c0:	07db      	lsls	r3, r3, #31
    28c2:	d5fc      	bpl.n	28be <spiSend+0x2>
	SERCOM1->SPI.DATA.reg = data;
    28c4:	4b06      	ldr	r3, [pc, #24]	; (28e0 <spiSend+0x24>)
    28c6:	6298      	str	r0, [r3, #40]	; 0x28
	while(SERCOM1->SPI.INTFLAG.bit.TXC == 0);
    28c8:	001a      	movs	r2, r3
    28ca:	7e13      	ldrb	r3, [r2, #24]
    28cc:	079b      	lsls	r3, r3, #30
    28ce:	d5fc      	bpl.n	28ca <spiSend+0xe>
	while(SERCOM1->SPI.INTFLAG.bit.RXC == 0);
    28d0:	4a03      	ldr	r2, [pc, #12]	; (28e0 <spiSend+0x24>)
    28d2:	7e13      	ldrb	r3, [r2, #24]
    28d4:	075b      	lsls	r3, r3, #29
    28d6:	d5fc      	bpl.n	28d2 <spiSend+0x16>
	ret = SERCOM1->SPI.DATA.reg;
    28d8:	4b01      	ldr	r3, [pc, #4]	; (28e0 <spiSend+0x24>)
    28da:	6a98      	ldr	r0, [r3, #40]	; 0x28
	return ret;
    28dc:	b2c0      	uxtb	r0, r0
}
    28de:	4770      	bx	lr
    28e0:	42000c00 	.word	0x42000c00

000028e4 <spiSS>:

uint8_t spiSS(uint8_t device)
{
    28e4:	b510      	push	{r4, lr}
    28e6:	0004      	movs	r4, r0
	spiSend(0xFF);
    28e8:	20ff      	movs	r0, #255	; 0xff
    28ea:	4b0d      	ldr	r3, [pc, #52]	; (2920 <spiSS+0x3c>)
    28ec:	4798      	blx	r3
	int ret = 0;
	switch (device)
    28ee:	2c01      	cmp	r4, #1
    28f0:	d00c      	beq.n	290c <spiSS+0x28>
    28f2:	2c00      	cmp	r4, #0
    28f4:	d003      	beq.n	28fe <spiSS+0x1a>
    28f6:	2c02      	cmp	r4, #2
    28f8:	d00d      	beq.n	2916 <spiSS+0x32>
		case SLAVE_CAN_1:
		REG_PORT_OUTCLR0 = PORT_PA06;
		break;
		
		default:
		ret = 1;
    28fa:	2001      	movs	r0, #1
    28fc:	e004      	b.n	2908 <spiSS+0x24>
		REG_PORT_OUTCLR0 = PORT_PA18;
    28fe:	2280      	movs	r2, #128	; 0x80
    2900:	02d2      	lsls	r2, r2, #11
    2902:	4b08      	ldr	r3, [pc, #32]	; (2924 <spiSS+0x40>)
    2904:	601a      	str	r2, [r3, #0]
	int ret = 0;
    2906:	2000      	movs	r0, #0
		break;
	}
	return ret;
    2908:	b2c0      	uxtb	r0, r0
}
    290a:	bd10      	pop	{r4, pc}
		REG_PORT_OUTCLR0 = PORT_PA07;
    290c:	2280      	movs	r2, #128	; 0x80
    290e:	4b05      	ldr	r3, [pc, #20]	; (2924 <spiSS+0x40>)
    2910:	601a      	str	r2, [r3, #0]
	int ret = 0;
    2912:	2000      	movs	r0, #0
		break;
    2914:	e7f8      	b.n	2908 <spiSS+0x24>
		REG_PORT_OUTCLR0 = PORT_PA06;
    2916:	2240      	movs	r2, #64	; 0x40
    2918:	4b02      	ldr	r3, [pc, #8]	; (2924 <spiSS+0x40>)
    291a:	601a      	str	r2, [r3, #0]
	int ret = 0;
    291c:	2000      	movs	r0, #0
		break;
    291e:	e7f3      	b.n	2908 <spiSS+0x24>
    2920:	000028bd 	.word	0x000028bd
    2924:	41004414 	.word	0x41004414

00002928 <spiSR>:

uint8_t spiSR(uint8_t device)
{
	int ret = 0;
	switch (device)
    2928:	2801      	cmp	r0, #1
    292a:	d00c      	beq.n	2946 <spiSR+0x1e>
    292c:	2800      	cmp	r0, #0
    292e:	d003      	beq.n	2938 <spiSR+0x10>
    2930:	2802      	cmp	r0, #2
    2932:	d00d      	beq.n	2950 <spiSR+0x28>
		case SLAVE_CAN_1:
		REG_PORT_OUTSET0 = PORT_PA06;
		break;
		
		default:
		ret = 1;
    2934:	2001      	movs	r0, #1
    2936:	e004      	b.n	2942 <spiSR+0x1a>
		REG_PORT_OUTSET0 = PORT_PA18;
    2938:	2280      	movs	r2, #128	; 0x80
    293a:	02d2      	lsls	r2, r2, #11
    293c:	4b07      	ldr	r3, [pc, #28]	; (295c <spiSR+0x34>)
    293e:	601a      	str	r2, [r3, #0]
	int ret = 0;
    2940:	2000      	movs	r0, #0
		break;
	}
	return ret;
    2942:	b2c0      	uxtb	r0, r0
    2944:	4770      	bx	lr
		REG_PORT_OUTSET0 = PORT_PA07;
    2946:	2280      	movs	r2, #128	; 0x80
    2948:	4b04      	ldr	r3, [pc, #16]	; (295c <spiSR+0x34>)
    294a:	601a      	str	r2, [r3, #0]
	int ret = 0;
    294c:	2000      	movs	r0, #0
		break;
    294e:	e7f8      	b.n	2942 <spiSR+0x1a>
		REG_PORT_OUTSET0 = PORT_PA06;
    2950:	2240      	movs	r2, #64	; 0x40
    2952:	4b02      	ldr	r3, [pc, #8]	; (295c <spiSR+0x34>)
    2954:	601a      	str	r2, [r3, #0]
	int ret = 0;
    2956:	2000      	movs	r0, #0
		break;
    2958:	e7f3      	b.n	2942 <spiSR+0x1a>
    295a:	46c0      	nop			; (mov r8, r8)
    295c:	41004418 	.word	0x41004418

00002960 <log>:
    2960:	b5f0      	push	{r4, r5, r6, r7, lr}
    2962:	46c6      	mov	lr, r8
    2964:	b500      	push	{lr}
    2966:	b08c      	sub	sp, #48	; 0x30
    2968:	0004      	movs	r4, r0
    296a:	000d      	movs	r5, r1
    296c:	f000 f880 	bl	2a70 <__ieee754_log>
    2970:	4b3a      	ldr	r3, [pc, #232]	; (2a5c <log+0xfc>)
    2972:	0006      	movs	r6, r0
    2974:	781b      	ldrb	r3, [r3, #0]
    2976:	000f      	movs	r7, r1
    2978:	b25b      	sxtb	r3, r3
    297a:	4698      	mov	r8, r3
    297c:	3301      	adds	r3, #1
    297e:	d00f      	beq.n	29a0 <log+0x40>
    2980:	0022      	movs	r2, r4
    2982:	002b      	movs	r3, r5
    2984:	0020      	movs	r0, r4
    2986:	0029      	movs	r1, r5
    2988:	f002 f83e 	bl	4a08 <__aeabi_dcmpun>
    298c:	2800      	cmp	r0, #0
    298e:	d107      	bne.n	29a0 <log+0x40>
    2990:	2200      	movs	r2, #0
    2992:	2300      	movs	r3, #0
    2994:	0020      	movs	r0, r4
    2996:	0029      	movs	r1, r5
    2998:	f000 fb2a 	bl	2ff0 <__aeabi_dcmpgt>
    299c:	2800      	cmp	r0, #0
    299e:	d005      	beq.n	29ac <log+0x4c>
    29a0:	0030      	movs	r0, r6
    29a2:	0039      	movs	r1, r7
    29a4:	b00c      	add	sp, #48	; 0x30
    29a6:	bc04      	pop	{r2}
    29a8:	4690      	mov	r8, r2
    29aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29ac:	4b2c      	ldr	r3, [pc, #176]	; (2a60 <log+0x100>)
    29ae:	900a      	str	r0, [sp, #40]	; 0x28
    29b0:	9303      	str	r3, [sp, #12]
    29b2:	4643      	mov	r3, r8
    29b4:	9404      	str	r4, [sp, #16]
    29b6:	9505      	str	r5, [sp, #20]
    29b8:	9406      	str	r4, [sp, #24]
    29ba:	9507      	str	r5, [sp, #28]
    29bc:	2b00      	cmp	r3, #0
    29be:	d11a      	bne.n	29f6 <log+0x96>
    29c0:	22e0      	movs	r2, #224	; 0xe0
    29c2:	4b28      	ldr	r3, [pc, #160]	; (2a64 <log+0x104>)
    29c4:	0612      	lsls	r2, r2, #24
    29c6:	9208      	str	r2, [sp, #32]
    29c8:	9309      	str	r3, [sp, #36]	; 0x24
    29ca:	0020      	movs	r0, r4
    29cc:	2200      	movs	r2, #0
    29ce:	2300      	movs	r3, #0
    29d0:	0029      	movs	r1, r5
    29d2:	f000 faf3 	bl	2fbc <__aeabi_dcmpeq>
    29d6:	2800      	cmp	r0, #0
    29d8:	d038      	beq.n	2a4c <log+0xec>
    29da:	2302      	movs	r3, #2
    29dc:	9302      	str	r3, [sp, #8]
    29de:	a802      	add	r0, sp, #8
    29e0:	f000 fa48 	bl	2e74 <matherr>
    29e4:	2800      	cmp	r0, #0
    29e6:	d017      	beq.n	2a18 <log+0xb8>
    29e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    29ea:	9301      	str	r3, [sp, #4]
    29ec:	2b00      	cmp	r3, #0
    29ee:	d118      	bne.n	2a22 <log+0xc2>
    29f0:	9e08      	ldr	r6, [sp, #32]
    29f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    29f4:	e7d4      	b.n	29a0 <log+0x40>
    29f6:	2200      	movs	r2, #0
    29f8:	4b1b      	ldr	r3, [pc, #108]	; (2a68 <log+0x108>)
    29fa:	0020      	movs	r0, r4
    29fc:	9208      	str	r2, [sp, #32]
    29fe:	9309      	str	r3, [sp, #36]	; 0x24
    2a00:	0029      	movs	r1, r5
    2a02:	2200      	movs	r2, #0
    2a04:	2300      	movs	r3, #0
    2a06:	f000 fad9 	bl	2fbc <__aeabi_dcmpeq>
    2a0a:	2800      	cmp	r0, #0
    2a0c:	d00f      	beq.n	2a2e <log+0xce>
    2a0e:	2302      	movs	r3, #2
    2a10:	9302      	str	r3, [sp, #8]
    2a12:	4643      	mov	r3, r8
    2a14:	2b02      	cmp	r3, #2
    2a16:	d1e2      	bne.n	29de <log+0x7e>
    2a18:	f002 f8e2 	bl	4be0 <__errno>
    2a1c:	2322      	movs	r3, #34	; 0x22
    2a1e:	6003      	str	r3, [r0, #0]
    2a20:	e7e2      	b.n	29e8 <log+0x88>
    2a22:	f002 f8dd 	bl	4be0 <__errno>
    2a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2a28:	9301      	str	r3, [sp, #4]
    2a2a:	6003      	str	r3, [r0, #0]
    2a2c:	e7e0      	b.n	29f0 <log+0x90>
    2a2e:	2301      	movs	r3, #1
    2a30:	9302      	str	r3, [sp, #8]
    2a32:	4643      	mov	r3, r8
    2a34:	2b02      	cmp	r3, #2
    2a36:	d10b      	bne.n	2a50 <log+0xf0>
    2a38:	f002 f8d2 	bl	4be0 <__errno>
    2a3c:	2321      	movs	r3, #33	; 0x21
    2a3e:	6003      	str	r3, [r0, #0]
    2a40:	480a      	ldr	r0, [pc, #40]	; (2a6c <log+0x10c>)
    2a42:	f000 fa19 	bl	2e78 <nan>
    2a46:	9008      	str	r0, [sp, #32]
    2a48:	9109      	str	r1, [sp, #36]	; 0x24
    2a4a:	e7cd      	b.n	29e8 <log+0x88>
    2a4c:	2301      	movs	r3, #1
    2a4e:	9302      	str	r3, [sp, #8]
    2a50:	a802      	add	r0, sp, #8
    2a52:	f000 fa0f 	bl	2e74 <matherr>
    2a56:	2800      	cmp	r0, #0
    2a58:	d1f2      	bne.n	2a40 <log+0xe0>
    2a5a:	e7ed      	b.n	2a38 <log+0xd8>
    2a5c:	2000000c 	.word	0x2000000c
    2a60:	00004fa0 	.word	0x00004fa0
    2a64:	c7efffff 	.word	0xc7efffff
    2a68:	fff00000 	.word	0xfff00000
    2a6c:	00004f4c 	.word	0x00004f4c

00002a70 <__ieee754_log>:
    2a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a72:	46d6      	mov	lr, sl
    2a74:	464f      	mov	r7, r9
    2a76:	4646      	mov	r6, r8
    2a78:	b5c0      	push	{r6, r7, lr}
    2a7a:	4ada      	ldr	r2, [pc, #872]	; (2de4 <__ieee754_log+0x374>)
    2a7c:	b088      	sub	sp, #32
    2a7e:	000b      	movs	r3, r1
    2a80:	4291      	cmp	r1, r2
    2a82:	dc55      	bgt.n	2b30 <__ieee754_log+0xc0>
    2a84:	004a      	lsls	r2, r1, #1
    2a86:	0852      	lsrs	r2, r2, #1
    2a88:	4302      	orrs	r2, r0
    2a8a:	d100      	bne.n	2a8e <__ieee754_log+0x1e>
    2a8c:	e0ef      	b.n	2c6e <__ieee754_log+0x1fe>
    2a8e:	2900      	cmp	r1, #0
    2a90:	da00      	bge.n	2a94 <__ieee754_log+0x24>
    2a92:	e179      	b.n	2d88 <__ieee754_log+0x318>
    2a94:	4bd4      	ldr	r3, [pc, #848]	; (2de8 <__ieee754_log+0x378>)
    2a96:	2200      	movs	r2, #0
    2a98:	f001 fa20 	bl	3edc <__aeabi_dmul>
    2a9c:	2536      	movs	r5, #54	; 0x36
    2a9e:	4cd3      	ldr	r4, [pc, #844]	; (2dec <__ieee754_log+0x37c>)
    2aa0:	000b      	movs	r3, r1
    2aa2:	426d      	negs	r5, r5
    2aa4:	42a3      	cmp	r3, r4
    2aa6:	dc47      	bgt.n	2b38 <__ieee754_log+0xc8>
    2aa8:	151a      	asrs	r2, r3, #20
    2aaa:	4cd1      	ldr	r4, [pc, #836]	; (2df0 <__ieee754_log+0x380>)
    2aac:	031b      	lsls	r3, r3, #12
    2aae:	0b1b      	lsrs	r3, r3, #12
    2ab0:	4698      	mov	r8, r3
    2ab2:	46a4      	mov	ip, r4
    2ab4:	2480      	movs	r4, #128	; 0x80
    2ab6:	4bcf      	ldr	r3, [pc, #828]	; (2df4 <__ieee754_log+0x384>)
    2ab8:	0364      	lsls	r4, r4, #13
    2aba:	4443      	add	r3, r8
    2abc:	4023      	ands	r3, r4
    2abe:	4cce      	ldr	r4, [pc, #824]	; (2df8 <__ieee754_log+0x388>)
    2ac0:	4462      	add	r2, ip
    2ac2:	1952      	adds	r2, r2, r5
    2ac4:	405c      	eors	r4, r3
    2ac6:	4645      	mov	r5, r8
    2ac8:	151b      	asrs	r3, r3, #20
    2aca:	4699      	mov	r9, r3
    2acc:	4325      	orrs	r5, r4
    2ace:	4bca      	ldr	r3, [pc, #808]	; (2df8 <__ieee754_log+0x388>)
    2ad0:	0029      	movs	r1, r5
    2ad2:	4491      	add	r9, r2
    2ad4:	2200      	movs	r2, #0
    2ad6:	f001 fc81 	bl	43dc <__aeabi_dsub>
    2ada:	4643      	mov	r3, r8
    2adc:	3302      	adds	r3, #2
    2ade:	031b      	lsls	r3, r3, #12
    2ae0:	0006      	movs	r6, r0
    2ae2:	000f      	movs	r7, r1
    2ae4:	0b1b      	lsrs	r3, r3, #12
    2ae6:	2200      	movs	r2, #0
    2ae8:	2b02      	cmp	r3, #2
    2aea:	dc2f      	bgt.n	2b4c <__ieee754_log+0xdc>
    2aec:	2300      	movs	r3, #0
    2aee:	f000 fa65 	bl	2fbc <__aeabi_dcmpeq>
    2af2:	2800      	cmp	r0, #0
    2af4:	d100      	bne.n	2af8 <__ieee754_log+0x88>
    2af6:	e0c1      	b.n	2c7c <__ieee754_log+0x20c>
    2af8:	464b      	mov	r3, r9
    2afa:	2b00      	cmp	r3, #0
    2afc:	d100      	bne.n	2b00 <__ieee754_log+0x90>
    2afe:	e14c      	b.n	2d9a <__ieee754_log+0x32a>
    2b00:	4648      	mov	r0, r9
    2b02:	f001 ffd5 	bl	4ab0 <__aeabi_i2d>
    2b06:	4abd      	ldr	r2, [pc, #756]	; (2dfc <__ieee754_log+0x38c>)
    2b08:	4bbd      	ldr	r3, [pc, #756]	; (2e00 <__ieee754_log+0x390>)
    2b0a:	0004      	movs	r4, r0
    2b0c:	000d      	movs	r5, r1
    2b0e:	f001 f9e5 	bl	3edc <__aeabi_dmul>
    2b12:	4abc      	ldr	r2, [pc, #752]	; (2e04 <__ieee754_log+0x394>)
    2b14:	0006      	movs	r6, r0
    2b16:	000f      	movs	r7, r1
    2b18:	4bbb      	ldr	r3, [pc, #748]	; (2e08 <__ieee754_log+0x398>)
    2b1a:	0020      	movs	r0, r4
    2b1c:	0029      	movs	r1, r5
    2b1e:	f001 f9dd 	bl	3edc <__aeabi_dmul>
    2b22:	0002      	movs	r2, r0
    2b24:	000b      	movs	r3, r1
    2b26:	0030      	movs	r0, r6
    2b28:	0039      	movs	r1, r7
    2b2a:	f000 fa93 	bl	3054 <__aeabi_dadd>
    2b2e:	e007      	b.n	2b40 <__ieee754_log+0xd0>
    2b30:	4cae      	ldr	r4, [pc, #696]	; (2dec <__ieee754_log+0x37c>)
    2b32:	2500      	movs	r5, #0
    2b34:	42a3      	cmp	r3, r4
    2b36:	ddb7      	ble.n	2aa8 <__ieee754_log+0x38>
    2b38:	0002      	movs	r2, r0
    2b3a:	000b      	movs	r3, r1
    2b3c:	f000 fa8a 	bl	3054 <__aeabi_dadd>
    2b40:	b008      	add	sp, #32
    2b42:	bc1c      	pop	{r2, r3, r4}
    2b44:	4690      	mov	r8, r2
    2b46:	4699      	mov	r9, r3
    2b48:	46a2      	mov	sl, r4
    2b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b4c:	2380      	movs	r3, #128	; 0x80
    2b4e:	05db      	lsls	r3, r3, #23
    2b50:	f000 fa80 	bl	3054 <__aeabi_dadd>
    2b54:	0002      	movs	r2, r0
    2b56:	000b      	movs	r3, r1
    2b58:	0030      	movs	r0, r6
    2b5a:	0039      	movs	r1, r7
    2b5c:	f000 fd8a 	bl	3674 <__aeabi_ddiv>
    2b60:	0004      	movs	r4, r0
    2b62:	4648      	mov	r0, r9
    2b64:	000d      	movs	r5, r1
    2b66:	f001 ffa3 	bl	4ab0 <__aeabi_i2d>
    2b6a:	0022      	movs	r2, r4
    2b6c:	9002      	str	r0, [sp, #8]
    2b6e:	9103      	str	r1, [sp, #12]
    2b70:	002b      	movs	r3, r5
    2b72:	0020      	movs	r0, r4
    2b74:	0029      	movs	r1, r5
    2b76:	9404      	str	r4, [sp, #16]
    2b78:	9505      	str	r5, [sp, #20]
    2b7a:	f001 f9af 	bl	3edc <__aeabi_dmul>
    2b7e:	0004      	movs	r4, r0
    2b80:	000d      	movs	r5, r1
    2b82:	4ba2      	ldr	r3, [pc, #648]	; (2e0c <__ieee754_log+0x39c>)
    2b84:	0002      	movs	r2, r0
    2b86:	4443      	add	r3, r8
    2b88:	469a      	mov	sl, r3
    2b8a:	000b      	movs	r3, r1
    2b8c:	9400      	str	r4, [sp, #0]
    2b8e:	9501      	str	r5, [sp, #4]
    2b90:	f001 f9a4 	bl	3edc <__aeabi_dmul>
    2b94:	0004      	movs	r4, r0
    2b96:	000d      	movs	r5, r1
    2b98:	4a9d      	ldr	r2, [pc, #628]	; (2e10 <__ieee754_log+0x3a0>)
    2b9a:	4b9e      	ldr	r3, [pc, #632]	; (2e14 <__ieee754_log+0x3a4>)
    2b9c:	f001 f99e 	bl	3edc <__aeabi_dmul>
    2ba0:	4a9d      	ldr	r2, [pc, #628]	; (2e18 <__ieee754_log+0x3a8>)
    2ba2:	4b9e      	ldr	r3, [pc, #632]	; (2e1c <__ieee754_log+0x3ac>)
    2ba4:	f000 fa56 	bl	3054 <__aeabi_dadd>
    2ba8:	0022      	movs	r2, r4
    2baa:	002b      	movs	r3, r5
    2bac:	f001 f996 	bl	3edc <__aeabi_dmul>
    2bb0:	4a9b      	ldr	r2, [pc, #620]	; (2e20 <__ieee754_log+0x3b0>)
    2bb2:	4b9c      	ldr	r3, [pc, #624]	; (2e24 <__ieee754_log+0x3b4>)
    2bb4:	f000 fa4e 	bl	3054 <__aeabi_dadd>
    2bb8:	0022      	movs	r2, r4
    2bba:	002b      	movs	r3, r5
    2bbc:	f001 f98e 	bl	3edc <__aeabi_dmul>
    2bc0:	4a99      	ldr	r2, [pc, #612]	; (2e28 <__ieee754_log+0x3b8>)
    2bc2:	4b9a      	ldr	r3, [pc, #616]	; (2e2c <__ieee754_log+0x3bc>)
    2bc4:	f000 fa46 	bl	3054 <__aeabi_dadd>
    2bc8:	9a00      	ldr	r2, [sp, #0]
    2bca:	9b01      	ldr	r3, [sp, #4]
    2bcc:	f001 f986 	bl	3edc <__aeabi_dmul>
    2bd0:	4a97      	ldr	r2, [pc, #604]	; (2e30 <__ieee754_log+0x3c0>)
    2bd2:	9000      	str	r0, [sp, #0]
    2bd4:	9101      	str	r1, [sp, #4]
    2bd6:	4b97      	ldr	r3, [pc, #604]	; (2e34 <__ieee754_log+0x3c4>)
    2bd8:	0020      	movs	r0, r4
    2bda:	0029      	movs	r1, r5
    2bdc:	f001 f97e 	bl	3edc <__aeabi_dmul>
    2be0:	4a95      	ldr	r2, [pc, #596]	; (2e38 <__ieee754_log+0x3c8>)
    2be2:	4b96      	ldr	r3, [pc, #600]	; (2e3c <__ieee754_log+0x3cc>)
    2be4:	f000 fa36 	bl	3054 <__aeabi_dadd>
    2be8:	0022      	movs	r2, r4
    2bea:	002b      	movs	r3, r5
    2bec:	f001 f976 	bl	3edc <__aeabi_dmul>
    2bf0:	4a93      	ldr	r2, [pc, #588]	; (2e40 <__ieee754_log+0x3d0>)
    2bf2:	4b94      	ldr	r3, [pc, #592]	; (2e44 <__ieee754_log+0x3d4>)
    2bf4:	f000 fa2e 	bl	3054 <__aeabi_dadd>
    2bf8:	0022      	movs	r2, r4
    2bfa:	002b      	movs	r3, r5
    2bfc:	f001 f96e 	bl	3edc <__aeabi_dmul>
    2c00:	000b      	movs	r3, r1
    2c02:	0002      	movs	r2, r0
    2c04:	9800      	ldr	r0, [sp, #0]
    2c06:	9901      	ldr	r1, [sp, #4]
    2c08:	f000 fa24 	bl	3054 <__aeabi_dadd>
    2c0c:	000d      	movs	r5, r1
    2c0e:	4641      	mov	r1, r8
    2c10:	4b8d      	ldr	r3, [pc, #564]	; (2e48 <__ieee754_log+0x3d8>)
    2c12:	0004      	movs	r4, r0
    2c14:	1a5b      	subs	r3, r3, r1
    2c16:	4651      	mov	r1, sl
    2c18:	430b      	orrs	r3, r1
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	dd54      	ble.n	2cc8 <__ieee754_log+0x258>
    2c1e:	2200      	movs	r2, #0
    2c20:	4b8a      	ldr	r3, [pc, #552]	; (2e4c <__ieee754_log+0x3dc>)
    2c22:	0030      	movs	r0, r6
    2c24:	0039      	movs	r1, r7
    2c26:	f001 f959 	bl	3edc <__aeabi_dmul>
    2c2a:	0032      	movs	r2, r6
    2c2c:	003b      	movs	r3, r7
    2c2e:	f001 f955 	bl	3edc <__aeabi_dmul>
    2c32:	464b      	mov	r3, r9
    2c34:	000a      	movs	r2, r1
    2c36:	0001      	movs	r1, r0
    2c38:	9100      	str	r1, [sp, #0]
    2c3a:	9201      	str	r2, [sp, #4]
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d172      	bne.n	2d26 <__ieee754_log+0x2b6>
    2c40:	0013      	movs	r3, r2
    2c42:	0029      	movs	r1, r5
    2c44:	0002      	movs	r2, r0
    2c46:	0020      	movs	r0, r4
    2c48:	f000 fa04 	bl	3054 <__aeabi_dadd>
    2c4c:	9a04      	ldr	r2, [sp, #16]
    2c4e:	9b05      	ldr	r3, [sp, #20]
    2c50:	f001 f944 	bl	3edc <__aeabi_dmul>
    2c54:	0002      	movs	r2, r0
    2c56:	000b      	movs	r3, r1
    2c58:	9800      	ldr	r0, [sp, #0]
    2c5a:	9901      	ldr	r1, [sp, #4]
    2c5c:	f001 fbbe 	bl	43dc <__aeabi_dsub>
    2c60:	0002      	movs	r2, r0
    2c62:	000b      	movs	r3, r1
    2c64:	0030      	movs	r0, r6
    2c66:	0039      	movs	r1, r7
    2c68:	f001 fbb8 	bl	43dc <__aeabi_dsub>
    2c6c:	e768      	b.n	2b40 <__ieee754_log+0xd0>
    2c6e:	2200      	movs	r2, #0
    2c70:	2300      	movs	r3, #0
    2c72:	2000      	movs	r0, #0
    2c74:	4976      	ldr	r1, [pc, #472]	; (2e50 <__ieee754_log+0x3e0>)
    2c76:	f000 fcfd 	bl	3674 <__aeabi_ddiv>
    2c7a:	e761      	b.n	2b40 <__ieee754_log+0xd0>
    2c7c:	4a75      	ldr	r2, [pc, #468]	; (2e54 <__ieee754_log+0x3e4>)
    2c7e:	4b76      	ldr	r3, [pc, #472]	; (2e58 <__ieee754_log+0x3e8>)
    2c80:	0030      	movs	r0, r6
    2c82:	0039      	movs	r1, r7
    2c84:	f001 f92a 	bl	3edc <__aeabi_dmul>
    2c88:	0002      	movs	r2, r0
    2c8a:	000b      	movs	r3, r1
    2c8c:	2000      	movs	r0, #0
    2c8e:	496f      	ldr	r1, [pc, #444]	; (2e4c <__ieee754_log+0x3dc>)
    2c90:	f001 fba4 	bl	43dc <__aeabi_dsub>
    2c94:	0032      	movs	r2, r6
    2c96:	0004      	movs	r4, r0
    2c98:	000d      	movs	r5, r1
    2c9a:	003b      	movs	r3, r7
    2c9c:	0030      	movs	r0, r6
    2c9e:	0039      	movs	r1, r7
    2ca0:	f001 f91c 	bl	3edc <__aeabi_dmul>
    2ca4:	000b      	movs	r3, r1
    2ca6:	0002      	movs	r2, r0
    2ca8:	0029      	movs	r1, r5
    2caa:	0020      	movs	r0, r4
    2cac:	f001 f916 	bl	3edc <__aeabi_dmul>
    2cb0:	464b      	mov	r3, r9
    2cb2:	0004      	movs	r4, r0
    2cb4:	000d      	movs	r5, r1
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	d172      	bne.n	2da0 <__ieee754_log+0x330>
    2cba:	0002      	movs	r2, r0
    2cbc:	000b      	movs	r3, r1
    2cbe:	0030      	movs	r0, r6
    2cc0:	0039      	movs	r1, r7
    2cc2:	f001 fb8b 	bl	43dc <__aeabi_dsub>
    2cc6:	e73b      	b.n	2b40 <__ieee754_log+0xd0>
    2cc8:	464b      	mov	r3, r9
    2cca:	2b00      	cmp	r3, #0
    2ccc:	d100      	bne.n	2cd0 <__ieee754_log+0x260>
    2cce:	e0c5      	b.n	2e5c <__ieee754_log+0x3ec>
    2cd0:	9802      	ldr	r0, [sp, #8]
    2cd2:	9903      	ldr	r1, [sp, #12]
    2cd4:	4a49      	ldr	r2, [pc, #292]	; (2dfc <__ieee754_log+0x38c>)
    2cd6:	4b4a      	ldr	r3, [pc, #296]	; (2e00 <__ieee754_log+0x390>)
    2cd8:	f001 f900 	bl	3edc <__aeabi_dmul>
    2cdc:	0022      	movs	r2, r4
    2cde:	9000      	str	r0, [sp, #0]
    2ce0:	9101      	str	r1, [sp, #4]
    2ce2:	002b      	movs	r3, r5
    2ce4:	0030      	movs	r0, r6
    2ce6:	0039      	movs	r1, r7
    2ce8:	f001 fb78 	bl	43dc <__aeabi_dsub>
    2cec:	9a04      	ldr	r2, [sp, #16]
    2cee:	9b05      	ldr	r3, [sp, #20]
    2cf0:	f001 f8f4 	bl	3edc <__aeabi_dmul>
    2cf4:	4a43      	ldr	r2, [pc, #268]	; (2e04 <__ieee754_log+0x394>)
    2cf6:	0004      	movs	r4, r0
    2cf8:	000d      	movs	r5, r1
    2cfa:	9802      	ldr	r0, [sp, #8]
    2cfc:	9903      	ldr	r1, [sp, #12]
    2cfe:	4b42      	ldr	r3, [pc, #264]	; (2e08 <__ieee754_log+0x398>)
    2d00:	f001 f8ec 	bl	3edc <__aeabi_dmul>
    2d04:	0002      	movs	r2, r0
    2d06:	000b      	movs	r3, r1
    2d08:	0020      	movs	r0, r4
    2d0a:	0029      	movs	r1, r5
    2d0c:	f001 fb66 	bl	43dc <__aeabi_dsub>
    2d10:	0032      	movs	r2, r6
    2d12:	003b      	movs	r3, r7
    2d14:	f001 fb62 	bl	43dc <__aeabi_dsub>
    2d18:	0002      	movs	r2, r0
    2d1a:	000b      	movs	r3, r1
    2d1c:	9800      	ldr	r0, [sp, #0]
    2d1e:	9901      	ldr	r1, [sp, #4]
    2d20:	f001 fb5c 	bl	43dc <__aeabi_dsub>
    2d24:	e70c      	b.n	2b40 <__ieee754_log+0xd0>
    2d26:	4a35      	ldr	r2, [pc, #212]	; (2dfc <__ieee754_log+0x38c>)
    2d28:	4b35      	ldr	r3, [pc, #212]	; (2e00 <__ieee754_log+0x390>)
    2d2a:	9802      	ldr	r0, [sp, #8]
    2d2c:	9903      	ldr	r1, [sp, #12]
    2d2e:	f001 f8d5 	bl	3edc <__aeabi_dmul>
    2d32:	9a00      	ldr	r2, [sp, #0]
    2d34:	9b01      	ldr	r3, [sp, #4]
    2d36:	9006      	str	r0, [sp, #24]
    2d38:	9107      	str	r1, [sp, #28]
    2d3a:	0020      	movs	r0, r4
    2d3c:	0029      	movs	r1, r5
    2d3e:	f000 f989 	bl	3054 <__aeabi_dadd>
    2d42:	9a04      	ldr	r2, [sp, #16]
    2d44:	9b05      	ldr	r3, [sp, #20]
    2d46:	f001 f8c9 	bl	3edc <__aeabi_dmul>
    2d4a:	4a2e      	ldr	r2, [pc, #184]	; (2e04 <__ieee754_log+0x394>)
    2d4c:	0004      	movs	r4, r0
    2d4e:	000d      	movs	r5, r1
    2d50:	9802      	ldr	r0, [sp, #8]
    2d52:	9903      	ldr	r1, [sp, #12]
    2d54:	4b2c      	ldr	r3, [pc, #176]	; (2e08 <__ieee754_log+0x398>)
    2d56:	f001 f8c1 	bl	3edc <__aeabi_dmul>
    2d5a:	0002      	movs	r2, r0
    2d5c:	000b      	movs	r3, r1
    2d5e:	0020      	movs	r0, r4
    2d60:	0029      	movs	r1, r5
    2d62:	f000 f977 	bl	3054 <__aeabi_dadd>
    2d66:	0002      	movs	r2, r0
    2d68:	000b      	movs	r3, r1
    2d6a:	9800      	ldr	r0, [sp, #0]
    2d6c:	9901      	ldr	r1, [sp, #4]
    2d6e:	f001 fb35 	bl	43dc <__aeabi_dsub>
    2d72:	0032      	movs	r2, r6
    2d74:	003b      	movs	r3, r7
    2d76:	f001 fb31 	bl	43dc <__aeabi_dsub>
    2d7a:	0002      	movs	r2, r0
    2d7c:	000b      	movs	r3, r1
    2d7e:	9806      	ldr	r0, [sp, #24]
    2d80:	9907      	ldr	r1, [sp, #28]
    2d82:	f001 fb2b 	bl	43dc <__aeabi_dsub>
    2d86:	e6db      	b.n	2b40 <__ieee754_log+0xd0>
    2d88:	0002      	movs	r2, r0
    2d8a:	000b      	movs	r3, r1
    2d8c:	f001 fb26 	bl	43dc <__aeabi_dsub>
    2d90:	2200      	movs	r2, #0
    2d92:	2300      	movs	r3, #0
    2d94:	f000 fc6e 	bl	3674 <__aeabi_ddiv>
    2d98:	e6d2      	b.n	2b40 <__ieee754_log+0xd0>
    2d9a:	2000      	movs	r0, #0
    2d9c:	2100      	movs	r1, #0
    2d9e:	e6cf      	b.n	2b40 <__ieee754_log+0xd0>
    2da0:	4648      	mov	r0, r9
    2da2:	f001 fe85 	bl	4ab0 <__aeabi_i2d>
    2da6:	4a15      	ldr	r2, [pc, #84]	; (2dfc <__ieee754_log+0x38c>)
    2da8:	4b15      	ldr	r3, [pc, #84]	; (2e00 <__ieee754_log+0x390>)
    2daa:	9000      	str	r0, [sp, #0]
    2dac:	9101      	str	r1, [sp, #4]
    2dae:	f001 f895 	bl	3edc <__aeabi_dmul>
    2db2:	4a14      	ldr	r2, [pc, #80]	; (2e04 <__ieee754_log+0x394>)
    2db4:	9002      	str	r0, [sp, #8]
    2db6:	9103      	str	r1, [sp, #12]
    2db8:	9800      	ldr	r0, [sp, #0]
    2dba:	9901      	ldr	r1, [sp, #4]
    2dbc:	4b12      	ldr	r3, [pc, #72]	; (2e08 <__ieee754_log+0x398>)
    2dbe:	f001 f88d 	bl	3edc <__aeabi_dmul>
    2dc2:	0002      	movs	r2, r0
    2dc4:	000b      	movs	r3, r1
    2dc6:	0020      	movs	r0, r4
    2dc8:	0029      	movs	r1, r5
    2dca:	f001 fb07 	bl	43dc <__aeabi_dsub>
    2dce:	0032      	movs	r2, r6
    2dd0:	003b      	movs	r3, r7
    2dd2:	f001 fb03 	bl	43dc <__aeabi_dsub>
    2dd6:	0002      	movs	r2, r0
    2dd8:	000b      	movs	r3, r1
    2dda:	9802      	ldr	r0, [sp, #8]
    2ddc:	9903      	ldr	r1, [sp, #12]
    2dde:	f001 fafd 	bl	43dc <__aeabi_dsub>
    2de2:	e6ad      	b.n	2b40 <__ieee754_log+0xd0>
    2de4:	000fffff 	.word	0x000fffff
    2de8:	43500000 	.word	0x43500000
    2dec:	7fefffff 	.word	0x7fefffff
    2df0:	fffffc01 	.word	0xfffffc01
    2df4:	00095f64 	.word	0x00095f64
    2df8:	3ff00000 	.word	0x3ff00000
    2dfc:	fee00000 	.word	0xfee00000
    2e00:	3fe62e42 	.word	0x3fe62e42
    2e04:	35793c76 	.word	0x35793c76
    2e08:	3dea39ef 	.word	0x3dea39ef
    2e0c:	fff9eb86 	.word	0xfff9eb86
    2e10:	df3e5244 	.word	0xdf3e5244
    2e14:	3fc2f112 	.word	0x3fc2f112
    2e18:	96cb03de 	.word	0x96cb03de
    2e1c:	3fc74664 	.word	0x3fc74664
    2e20:	94229359 	.word	0x94229359
    2e24:	3fd24924 	.word	0x3fd24924
    2e28:	55555593 	.word	0x55555593
    2e2c:	3fe55555 	.word	0x3fe55555
    2e30:	d078c69f 	.word	0xd078c69f
    2e34:	3fc39a09 	.word	0x3fc39a09
    2e38:	1d8e78af 	.word	0x1d8e78af
    2e3c:	3fcc71c5 	.word	0x3fcc71c5
    2e40:	9997fa04 	.word	0x9997fa04
    2e44:	3fd99999 	.word	0x3fd99999
    2e48:	0006b851 	.word	0x0006b851
    2e4c:	3fe00000 	.word	0x3fe00000
    2e50:	c3500000 	.word	0xc3500000
    2e54:	55555555 	.word	0x55555555
    2e58:	3fd55555 	.word	0x3fd55555
    2e5c:	0022      	movs	r2, r4
    2e5e:	002b      	movs	r3, r5
    2e60:	0030      	movs	r0, r6
    2e62:	0039      	movs	r1, r7
    2e64:	f001 faba 	bl	43dc <__aeabi_dsub>
    2e68:	9a04      	ldr	r2, [sp, #16]
    2e6a:	9b05      	ldr	r3, [sp, #20]
    2e6c:	f001 f836 	bl	3edc <__aeabi_dmul>
    2e70:	e6f6      	b.n	2c60 <__ieee754_log+0x1f0>
    2e72:	46c0      	nop			; (mov r8, r8)

00002e74 <matherr>:
    2e74:	2000      	movs	r0, #0
    2e76:	4770      	bx	lr

00002e78 <nan>:
    2e78:	2000      	movs	r0, #0
    2e7a:	4901      	ldr	r1, [pc, #4]	; (2e80 <nan+0x8>)
    2e7c:	4770      	bx	lr
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	7ff80000 	.word	0x7ff80000

00002e84 <__udivsi3>:
    2e84:	2200      	movs	r2, #0
    2e86:	0843      	lsrs	r3, r0, #1
    2e88:	428b      	cmp	r3, r1
    2e8a:	d374      	bcc.n	2f76 <__udivsi3+0xf2>
    2e8c:	0903      	lsrs	r3, r0, #4
    2e8e:	428b      	cmp	r3, r1
    2e90:	d35f      	bcc.n	2f52 <__udivsi3+0xce>
    2e92:	0a03      	lsrs	r3, r0, #8
    2e94:	428b      	cmp	r3, r1
    2e96:	d344      	bcc.n	2f22 <__udivsi3+0x9e>
    2e98:	0b03      	lsrs	r3, r0, #12
    2e9a:	428b      	cmp	r3, r1
    2e9c:	d328      	bcc.n	2ef0 <__udivsi3+0x6c>
    2e9e:	0c03      	lsrs	r3, r0, #16
    2ea0:	428b      	cmp	r3, r1
    2ea2:	d30d      	bcc.n	2ec0 <__udivsi3+0x3c>
    2ea4:	22ff      	movs	r2, #255	; 0xff
    2ea6:	0209      	lsls	r1, r1, #8
    2ea8:	ba12      	rev	r2, r2
    2eaa:	0c03      	lsrs	r3, r0, #16
    2eac:	428b      	cmp	r3, r1
    2eae:	d302      	bcc.n	2eb6 <__udivsi3+0x32>
    2eb0:	1212      	asrs	r2, r2, #8
    2eb2:	0209      	lsls	r1, r1, #8
    2eb4:	d065      	beq.n	2f82 <__udivsi3+0xfe>
    2eb6:	0b03      	lsrs	r3, r0, #12
    2eb8:	428b      	cmp	r3, r1
    2eba:	d319      	bcc.n	2ef0 <__udivsi3+0x6c>
    2ebc:	e000      	b.n	2ec0 <__udivsi3+0x3c>
    2ebe:	0a09      	lsrs	r1, r1, #8
    2ec0:	0bc3      	lsrs	r3, r0, #15
    2ec2:	428b      	cmp	r3, r1
    2ec4:	d301      	bcc.n	2eca <__udivsi3+0x46>
    2ec6:	03cb      	lsls	r3, r1, #15
    2ec8:	1ac0      	subs	r0, r0, r3
    2eca:	4152      	adcs	r2, r2
    2ecc:	0b83      	lsrs	r3, r0, #14
    2ece:	428b      	cmp	r3, r1
    2ed0:	d301      	bcc.n	2ed6 <__udivsi3+0x52>
    2ed2:	038b      	lsls	r3, r1, #14
    2ed4:	1ac0      	subs	r0, r0, r3
    2ed6:	4152      	adcs	r2, r2
    2ed8:	0b43      	lsrs	r3, r0, #13
    2eda:	428b      	cmp	r3, r1
    2edc:	d301      	bcc.n	2ee2 <__udivsi3+0x5e>
    2ede:	034b      	lsls	r3, r1, #13
    2ee0:	1ac0      	subs	r0, r0, r3
    2ee2:	4152      	adcs	r2, r2
    2ee4:	0b03      	lsrs	r3, r0, #12
    2ee6:	428b      	cmp	r3, r1
    2ee8:	d301      	bcc.n	2eee <__udivsi3+0x6a>
    2eea:	030b      	lsls	r3, r1, #12
    2eec:	1ac0      	subs	r0, r0, r3
    2eee:	4152      	adcs	r2, r2
    2ef0:	0ac3      	lsrs	r3, r0, #11
    2ef2:	428b      	cmp	r3, r1
    2ef4:	d301      	bcc.n	2efa <__udivsi3+0x76>
    2ef6:	02cb      	lsls	r3, r1, #11
    2ef8:	1ac0      	subs	r0, r0, r3
    2efa:	4152      	adcs	r2, r2
    2efc:	0a83      	lsrs	r3, r0, #10
    2efe:	428b      	cmp	r3, r1
    2f00:	d301      	bcc.n	2f06 <__udivsi3+0x82>
    2f02:	028b      	lsls	r3, r1, #10
    2f04:	1ac0      	subs	r0, r0, r3
    2f06:	4152      	adcs	r2, r2
    2f08:	0a43      	lsrs	r3, r0, #9
    2f0a:	428b      	cmp	r3, r1
    2f0c:	d301      	bcc.n	2f12 <__udivsi3+0x8e>
    2f0e:	024b      	lsls	r3, r1, #9
    2f10:	1ac0      	subs	r0, r0, r3
    2f12:	4152      	adcs	r2, r2
    2f14:	0a03      	lsrs	r3, r0, #8
    2f16:	428b      	cmp	r3, r1
    2f18:	d301      	bcc.n	2f1e <__udivsi3+0x9a>
    2f1a:	020b      	lsls	r3, r1, #8
    2f1c:	1ac0      	subs	r0, r0, r3
    2f1e:	4152      	adcs	r2, r2
    2f20:	d2cd      	bcs.n	2ebe <__udivsi3+0x3a>
    2f22:	09c3      	lsrs	r3, r0, #7
    2f24:	428b      	cmp	r3, r1
    2f26:	d301      	bcc.n	2f2c <__udivsi3+0xa8>
    2f28:	01cb      	lsls	r3, r1, #7
    2f2a:	1ac0      	subs	r0, r0, r3
    2f2c:	4152      	adcs	r2, r2
    2f2e:	0983      	lsrs	r3, r0, #6
    2f30:	428b      	cmp	r3, r1
    2f32:	d301      	bcc.n	2f38 <__udivsi3+0xb4>
    2f34:	018b      	lsls	r3, r1, #6
    2f36:	1ac0      	subs	r0, r0, r3
    2f38:	4152      	adcs	r2, r2
    2f3a:	0943      	lsrs	r3, r0, #5
    2f3c:	428b      	cmp	r3, r1
    2f3e:	d301      	bcc.n	2f44 <__udivsi3+0xc0>
    2f40:	014b      	lsls	r3, r1, #5
    2f42:	1ac0      	subs	r0, r0, r3
    2f44:	4152      	adcs	r2, r2
    2f46:	0903      	lsrs	r3, r0, #4
    2f48:	428b      	cmp	r3, r1
    2f4a:	d301      	bcc.n	2f50 <__udivsi3+0xcc>
    2f4c:	010b      	lsls	r3, r1, #4
    2f4e:	1ac0      	subs	r0, r0, r3
    2f50:	4152      	adcs	r2, r2
    2f52:	08c3      	lsrs	r3, r0, #3
    2f54:	428b      	cmp	r3, r1
    2f56:	d301      	bcc.n	2f5c <__udivsi3+0xd8>
    2f58:	00cb      	lsls	r3, r1, #3
    2f5a:	1ac0      	subs	r0, r0, r3
    2f5c:	4152      	adcs	r2, r2
    2f5e:	0883      	lsrs	r3, r0, #2
    2f60:	428b      	cmp	r3, r1
    2f62:	d301      	bcc.n	2f68 <__udivsi3+0xe4>
    2f64:	008b      	lsls	r3, r1, #2
    2f66:	1ac0      	subs	r0, r0, r3
    2f68:	4152      	adcs	r2, r2
    2f6a:	0843      	lsrs	r3, r0, #1
    2f6c:	428b      	cmp	r3, r1
    2f6e:	d301      	bcc.n	2f74 <__udivsi3+0xf0>
    2f70:	004b      	lsls	r3, r1, #1
    2f72:	1ac0      	subs	r0, r0, r3
    2f74:	4152      	adcs	r2, r2
    2f76:	1a41      	subs	r1, r0, r1
    2f78:	d200      	bcs.n	2f7c <__udivsi3+0xf8>
    2f7a:	4601      	mov	r1, r0
    2f7c:	4152      	adcs	r2, r2
    2f7e:	4610      	mov	r0, r2
    2f80:	4770      	bx	lr
    2f82:	e7ff      	b.n	2f84 <__udivsi3+0x100>
    2f84:	b501      	push	{r0, lr}
    2f86:	2000      	movs	r0, #0
    2f88:	f000 f806 	bl	2f98 <__aeabi_idiv0>
    2f8c:	bd02      	pop	{r1, pc}
    2f8e:	46c0      	nop			; (mov r8, r8)

00002f90 <__aeabi_uidivmod>:
    2f90:	2900      	cmp	r1, #0
    2f92:	d0f7      	beq.n	2f84 <__udivsi3+0x100>
    2f94:	e776      	b.n	2e84 <__udivsi3>
    2f96:	4770      	bx	lr

00002f98 <__aeabi_idiv0>:
    2f98:	4770      	bx	lr
    2f9a:	46c0      	nop			; (mov r8, r8)

00002f9c <__aeabi_cdrcmple>:
    2f9c:	4684      	mov	ip, r0
    2f9e:	1c10      	adds	r0, r2, #0
    2fa0:	4662      	mov	r2, ip
    2fa2:	468c      	mov	ip, r1
    2fa4:	1c19      	adds	r1, r3, #0
    2fa6:	4663      	mov	r3, ip
    2fa8:	e000      	b.n	2fac <__aeabi_cdcmpeq>
    2faa:	46c0      	nop			; (mov r8, r8)

00002fac <__aeabi_cdcmpeq>:
    2fac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2fae:	f000 ff33 	bl	3e18 <__ledf2>
    2fb2:	2800      	cmp	r0, #0
    2fb4:	d401      	bmi.n	2fba <__aeabi_cdcmpeq+0xe>
    2fb6:	2100      	movs	r1, #0
    2fb8:	42c8      	cmn	r0, r1
    2fba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002fbc <__aeabi_dcmpeq>:
    2fbc:	b510      	push	{r4, lr}
    2fbe:	f000 fe8d 	bl	3cdc <__eqdf2>
    2fc2:	4240      	negs	r0, r0
    2fc4:	3001      	adds	r0, #1
    2fc6:	bd10      	pop	{r4, pc}

00002fc8 <__aeabi_dcmplt>:
    2fc8:	b510      	push	{r4, lr}
    2fca:	f000 ff25 	bl	3e18 <__ledf2>
    2fce:	2800      	cmp	r0, #0
    2fd0:	db01      	blt.n	2fd6 <__aeabi_dcmplt+0xe>
    2fd2:	2000      	movs	r0, #0
    2fd4:	bd10      	pop	{r4, pc}
    2fd6:	2001      	movs	r0, #1
    2fd8:	bd10      	pop	{r4, pc}
    2fda:	46c0      	nop			; (mov r8, r8)

00002fdc <__aeabi_dcmple>:
    2fdc:	b510      	push	{r4, lr}
    2fde:	f000 ff1b 	bl	3e18 <__ledf2>
    2fe2:	2800      	cmp	r0, #0
    2fe4:	dd01      	ble.n	2fea <__aeabi_dcmple+0xe>
    2fe6:	2000      	movs	r0, #0
    2fe8:	bd10      	pop	{r4, pc}
    2fea:	2001      	movs	r0, #1
    2fec:	bd10      	pop	{r4, pc}
    2fee:	46c0      	nop			; (mov r8, r8)

00002ff0 <__aeabi_dcmpgt>:
    2ff0:	b510      	push	{r4, lr}
    2ff2:	f000 fead 	bl	3d50 <__gedf2>
    2ff6:	2800      	cmp	r0, #0
    2ff8:	dc01      	bgt.n	2ffe <__aeabi_dcmpgt+0xe>
    2ffa:	2000      	movs	r0, #0
    2ffc:	bd10      	pop	{r4, pc}
    2ffe:	2001      	movs	r0, #1
    3000:	bd10      	pop	{r4, pc}
    3002:	46c0      	nop			; (mov r8, r8)

00003004 <__aeabi_dcmpge>:
    3004:	b510      	push	{r4, lr}
    3006:	f000 fea3 	bl	3d50 <__gedf2>
    300a:	2800      	cmp	r0, #0
    300c:	da01      	bge.n	3012 <__aeabi_dcmpge+0xe>
    300e:	2000      	movs	r0, #0
    3010:	bd10      	pop	{r4, pc}
    3012:	2001      	movs	r0, #1
    3014:	bd10      	pop	{r4, pc}
    3016:	46c0      	nop			; (mov r8, r8)

00003018 <__aeabi_d2uiz>:
    3018:	b570      	push	{r4, r5, r6, lr}
    301a:	2200      	movs	r2, #0
    301c:	4b0c      	ldr	r3, [pc, #48]	; (3050 <__aeabi_d2uiz+0x38>)
    301e:	0004      	movs	r4, r0
    3020:	000d      	movs	r5, r1
    3022:	f7ff ffef 	bl	3004 <__aeabi_dcmpge>
    3026:	2800      	cmp	r0, #0
    3028:	d104      	bne.n	3034 <__aeabi_d2uiz+0x1c>
    302a:	0020      	movs	r0, r4
    302c:	0029      	movs	r1, r5
    302e:	f001 fd0b 	bl	4a48 <__aeabi_d2iz>
    3032:	bd70      	pop	{r4, r5, r6, pc}
    3034:	4b06      	ldr	r3, [pc, #24]	; (3050 <__aeabi_d2uiz+0x38>)
    3036:	2200      	movs	r2, #0
    3038:	0020      	movs	r0, r4
    303a:	0029      	movs	r1, r5
    303c:	f001 f9ce 	bl	43dc <__aeabi_dsub>
    3040:	f001 fd02 	bl	4a48 <__aeabi_d2iz>
    3044:	2380      	movs	r3, #128	; 0x80
    3046:	061b      	lsls	r3, r3, #24
    3048:	469c      	mov	ip, r3
    304a:	4460      	add	r0, ip
    304c:	e7f1      	b.n	3032 <__aeabi_d2uiz+0x1a>
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	41e00000 	.word	0x41e00000

00003054 <__aeabi_dadd>:
    3054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3056:	4645      	mov	r5, r8
    3058:	46de      	mov	lr, fp
    305a:	4657      	mov	r7, sl
    305c:	464e      	mov	r6, r9
    305e:	030c      	lsls	r4, r1, #12
    3060:	b5e0      	push	{r5, r6, r7, lr}
    3062:	004e      	lsls	r6, r1, #1
    3064:	0fc9      	lsrs	r1, r1, #31
    3066:	4688      	mov	r8, r1
    3068:	000d      	movs	r5, r1
    306a:	0a61      	lsrs	r1, r4, #9
    306c:	0f44      	lsrs	r4, r0, #29
    306e:	430c      	orrs	r4, r1
    3070:	00c7      	lsls	r7, r0, #3
    3072:	0319      	lsls	r1, r3, #12
    3074:	0058      	lsls	r0, r3, #1
    3076:	0fdb      	lsrs	r3, r3, #31
    3078:	469b      	mov	fp, r3
    307a:	0a4b      	lsrs	r3, r1, #9
    307c:	0f51      	lsrs	r1, r2, #29
    307e:	430b      	orrs	r3, r1
    3080:	0d76      	lsrs	r6, r6, #21
    3082:	0d40      	lsrs	r0, r0, #21
    3084:	0019      	movs	r1, r3
    3086:	00d2      	lsls	r2, r2, #3
    3088:	45d8      	cmp	r8, fp
    308a:	d100      	bne.n	308e <__aeabi_dadd+0x3a>
    308c:	e0ae      	b.n	31ec <__aeabi_dadd+0x198>
    308e:	1a35      	subs	r5, r6, r0
    3090:	2d00      	cmp	r5, #0
    3092:	dc00      	bgt.n	3096 <__aeabi_dadd+0x42>
    3094:	e0f6      	b.n	3284 <__aeabi_dadd+0x230>
    3096:	2800      	cmp	r0, #0
    3098:	d10f      	bne.n	30ba <__aeabi_dadd+0x66>
    309a:	4313      	orrs	r3, r2
    309c:	d100      	bne.n	30a0 <__aeabi_dadd+0x4c>
    309e:	e0db      	b.n	3258 <__aeabi_dadd+0x204>
    30a0:	1e6b      	subs	r3, r5, #1
    30a2:	2b00      	cmp	r3, #0
    30a4:	d000      	beq.n	30a8 <__aeabi_dadd+0x54>
    30a6:	e137      	b.n	3318 <__aeabi_dadd+0x2c4>
    30a8:	1aba      	subs	r2, r7, r2
    30aa:	4297      	cmp	r7, r2
    30ac:	41bf      	sbcs	r7, r7
    30ae:	1a64      	subs	r4, r4, r1
    30b0:	427f      	negs	r7, r7
    30b2:	1be4      	subs	r4, r4, r7
    30b4:	2601      	movs	r6, #1
    30b6:	0017      	movs	r7, r2
    30b8:	e024      	b.n	3104 <__aeabi_dadd+0xb0>
    30ba:	4bc6      	ldr	r3, [pc, #792]	; (33d4 <__aeabi_dadd+0x380>)
    30bc:	429e      	cmp	r6, r3
    30be:	d04d      	beq.n	315c <__aeabi_dadd+0x108>
    30c0:	2380      	movs	r3, #128	; 0x80
    30c2:	041b      	lsls	r3, r3, #16
    30c4:	4319      	orrs	r1, r3
    30c6:	2d38      	cmp	r5, #56	; 0x38
    30c8:	dd00      	ble.n	30cc <__aeabi_dadd+0x78>
    30ca:	e107      	b.n	32dc <__aeabi_dadd+0x288>
    30cc:	2d1f      	cmp	r5, #31
    30ce:	dd00      	ble.n	30d2 <__aeabi_dadd+0x7e>
    30d0:	e138      	b.n	3344 <__aeabi_dadd+0x2f0>
    30d2:	2020      	movs	r0, #32
    30d4:	1b43      	subs	r3, r0, r5
    30d6:	469a      	mov	sl, r3
    30d8:	000b      	movs	r3, r1
    30da:	4650      	mov	r0, sl
    30dc:	4083      	lsls	r3, r0
    30de:	4699      	mov	r9, r3
    30e0:	0013      	movs	r3, r2
    30e2:	4648      	mov	r0, r9
    30e4:	40eb      	lsrs	r3, r5
    30e6:	4318      	orrs	r0, r3
    30e8:	0003      	movs	r3, r0
    30ea:	4650      	mov	r0, sl
    30ec:	4082      	lsls	r2, r0
    30ee:	1e50      	subs	r0, r2, #1
    30f0:	4182      	sbcs	r2, r0
    30f2:	40e9      	lsrs	r1, r5
    30f4:	431a      	orrs	r2, r3
    30f6:	1aba      	subs	r2, r7, r2
    30f8:	1a61      	subs	r1, r4, r1
    30fa:	4297      	cmp	r7, r2
    30fc:	41a4      	sbcs	r4, r4
    30fe:	0017      	movs	r7, r2
    3100:	4264      	negs	r4, r4
    3102:	1b0c      	subs	r4, r1, r4
    3104:	0223      	lsls	r3, r4, #8
    3106:	d562      	bpl.n	31ce <__aeabi_dadd+0x17a>
    3108:	0264      	lsls	r4, r4, #9
    310a:	0a65      	lsrs	r5, r4, #9
    310c:	2d00      	cmp	r5, #0
    310e:	d100      	bne.n	3112 <__aeabi_dadd+0xbe>
    3110:	e0df      	b.n	32d2 <__aeabi_dadd+0x27e>
    3112:	0028      	movs	r0, r5
    3114:	f001 fd46 	bl	4ba4 <__clzsi2>
    3118:	0003      	movs	r3, r0
    311a:	3b08      	subs	r3, #8
    311c:	2b1f      	cmp	r3, #31
    311e:	dd00      	ble.n	3122 <__aeabi_dadd+0xce>
    3120:	e0d2      	b.n	32c8 <__aeabi_dadd+0x274>
    3122:	2220      	movs	r2, #32
    3124:	003c      	movs	r4, r7
    3126:	1ad2      	subs	r2, r2, r3
    3128:	409d      	lsls	r5, r3
    312a:	40d4      	lsrs	r4, r2
    312c:	409f      	lsls	r7, r3
    312e:	4325      	orrs	r5, r4
    3130:	429e      	cmp	r6, r3
    3132:	dd00      	ble.n	3136 <__aeabi_dadd+0xe2>
    3134:	e0c4      	b.n	32c0 <__aeabi_dadd+0x26c>
    3136:	1b9e      	subs	r6, r3, r6
    3138:	1c73      	adds	r3, r6, #1
    313a:	2b1f      	cmp	r3, #31
    313c:	dd00      	ble.n	3140 <__aeabi_dadd+0xec>
    313e:	e0f1      	b.n	3324 <__aeabi_dadd+0x2d0>
    3140:	2220      	movs	r2, #32
    3142:	0038      	movs	r0, r7
    3144:	0029      	movs	r1, r5
    3146:	1ad2      	subs	r2, r2, r3
    3148:	40d8      	lsrs	r0, r3
    314a:	4091      	lsls	r1, r2
    314c:	4097      	lsls	r7, r2
    314e:	002c      	movs	r4, r5
    3150:	4301      	orrs	r1, r0
    3152:	1e78      	subs	r0, r7, #1
    3154:	4187      	sbcs	r7, r0
    3156:	40dc      	lsrs	r4, r3
    3158:	2600      	movs	r6, #0
    315a:	430f      	orrs	r7, r1
    315c:	077b      	lsls	r3, r7, #29
    315e:	d009      	beq.n	3174 <__aeabi_dadd+0x120>
    3160:	230f      	movs	r3, #15
    3162:	403b      	ands	r3, r7
    3164:	2b04      	cmp	r3, #4
    3166:	d005      	beq.n	3174 <__aeabi_dadd+0x120>
    3168:	1d3b      	adds	r3, r7, #4
    316a:	42bb      	cmp	r3, r7
    316c:	41bf      	sbcs	r7, r7
    316e:	427f      	negs	r7, r7
    3170:	19e4      	adds	r4, r4, r7
    3172:	001f      	movs	r7, r3
    3174:	0223      	lsls	r3, r4, #8
    3176:	d52c      	bpl.n	31d2 <__aeabi_dadd+0x17e>
    3178:	4b96      	ldr	r3, [pc, #600]	; (33d4 <__aeabi_dadd+0x380>)
    317a:	3601      	adds	r6, #1
    317c:	429e      	cmp	r6, r3
    317e:	d100      	bne.n	3182 <__aeabi_dadd+0x12e>
    3180:	e09a      	b.n	32b8 <__aeabi_dadd+0x264>
    3182:	4645      	mov	r5, r8
    3184:	4b94      	ldr	r3, [pc, #592]	; (33d8 <__aeabi_dadd+0x384>)
    3186:	08ff      	lsrs	r7, r7, #3
    3188:	401c      	ands	r4, r3
    318a:	0760      	lsls	r0, r4, #29
    318c:	0576      	lsls	r6, r6, #21
    318e:	0264      	lsls	r4, r4, #9
    3190:	4307      	orrs	r7, r0
    3192:	0b24      	lsrs	r4, r4, #12
    3194:	0d76      	lsrs	r6, r6, #21
    3196:	2100      	movs	r1, #0
    3198:	0324      	lsls	r4, r4, #12
    319a:	0b23      	lsrs	r3, r4, #12
    319c:	0d0c      	lsrs	r4, r1, #20
    319e:	4a8f      	ldr	r2, [pc, #572]	; (33dc <__aeabi_dadd+0x388>)
    31a0:	0524      	lsls	r4, r4, #20
    31a2:	431c      	orrs	r4, r3
    31a4:	4014      	ands	r4, r2
    31a6:	0533      	lsls	r3, r6, #20
    31a8:	4323      	orrs	r3, r4
    31aa:	005b      	lsls	r3, r3, #1
    31ac:	07ed      	lsls	r5, r5, #31
    31ae:	085b      	lsrs	r3, r3, #1
    31b0:	432b      	orrs	r3, r5
    31b2:	0038      	movs	r0, r7
    31b4:	0019      	movs	r1, r3
    31b6:	bc3c      	pop	{r2, r3, r4, r5}
    31b8:	4690      	mov	r8, r2
    31ba:	4699      	mov	r9, r3
    31bc:	46a2      	mov	sl, r4
    31be:	46ab      	mov	fp, r5
    31c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31c2:	4664      	mov	r4, ip
    31c4:	4304      	orrs	r4, r0
    31c6:	d100      	bne.n	31ca <__aeabi_dadd+0x176>
    31c8:	e211      	b.n	35ee <__aeabi_dadd+0x59a>
    31ca:	0004      	movs	r4, r0
    31cc:	4667      	mov	r7, ip
    31ce:	077b      	lsls	r3, r7, #29
    31d0:	d1c6      	bne.n	3160 <__aeabi_dadd+0x10c>
    31d2:	4645      	mov	r5, r8
    31d4:	0760      	lsls	r0, r4, #29
    31d6:	08ff      	lsrs	r7, r7, #3
    31d8:	4307      	orrs	r7, r0
    31da:	08e4      	lsrs	r4, r4, #3
    31dc:	4b7d      	ldr	r3, [pc, #500]	; (33d4 <__aeabi_dadd+0x380>)
    31de:	429e      	cmp	r6, r3
    31e0:	d030      	beq.n	3244 <__aeabi_dadd+0x1f0>
    31e2:	0324      	lsls	r4, r4, #12
    31e4:	0576      	lsls	r6, r6, #21
    31e6:	0b24      	lsrs	r4, r4, #12
    31e8:	0d76      	lsrs	r6, r6, #21
    31ea:	e7d4      	b.n	3196 <__aeabi_dadd+0x142>
    31ec:	1a33      	subs	r3, r6, r0
    31ee:	469a      	mov	sl, r3
    31f0:	2b00      	cmp	r3, #0
    31f2:	dd78      	ble.n	32e6 <__aeabi_dadd+0x292>
    31f4:	2800      	cmp	r0, #0
    31f6:	d031      	beq.n	325c <__aeabi_dadd+0x208>
    31f8:	4876      	ldr	r0, [pc, #472]	; (33d4 <__aeabi_dadd+0x380>)
    31fa:	4286      	cmp	r6, r0
    31fc:	d0ae      	beq.n	315c <__aeabi_dadd+0x108>
    31fe:	2080      	movs	r0, #128	; 0x80
    3200:	0400      	lsls	r0, r0, #16
    3202:	4301      	orrs	r1, r0
    3204:	4653      	mov	r3, sl
    3206:	2b38      	cmp	r3, #56	; 0x38
    3208:	dc00      	bgt.n	320c <__aeabi_dadd+0x1b8>
    320a:	e0e9      	b.n	33e0 <__aeabi_dadd+0x38c>
    320c:	430a      	orrs	r2, r1
    320e:	1e51      	subs	r1, r2, #1
    3210:	418a      	sbcs	r2, r1
    3212:	2100      	movs	r1, #0
    3214:	19d2      	adds	r2, r2, r7
    3216:	42ba      	cmp	r2, r7
    3218:	41bf      	sbcs	r7, r7
    321a:	1909      	adds	r1, r1, r4
    321c:	427c      	negs	r4, r7
    321e:	0017      	movs	r7, r2
    3220:	190c      	adds	r4, r1, r4
    3222:	0223      	lsls	r3, r4, #8
    3224:	d5d3      	bpl.n	31ce <__aeabi_dadd+0x17a>
    3226:	4b6b      	ldr	r3, [pc, #428]	; (33d4 <__aeabi_dadd+0x380>)
    3228:	3601      	adds	r6, #1
    322a:	429e      	cmp	r6, r3
    322c:	d100      	bne.n	3230 <__aeabi_dadd+0x1dc>
    322e:	e13a      	b.n	34a6 <__aeabi_dadd+0x452>
    3230:	2001      	movs	r0, #1
    3232:	4b69      	ldr	r3, [pc, #420]	; (33d8 <__aeabi_dadd+0x384>)
    3234:	401c      	ands	r4, r3
    3236:	087b      	lsrs	r3, r7, #1
    3238:	4007      	ands	r7, r0
    323a:	431f      	orrs	r7, r3
    323c:	07e0      	lsls	r0, r4, #31
    323e:	4307      	orrs	r7, r0
    3240:	0864      	lsrs	r4, r4, #1
    3242:	e78b      	b.n	315c <__aeabi_dadd+0x108>
    3244:	0023      	movs	r3, r4
    3246:	433b      	orrs	r3, r7
    3248:	d100      	bne.n	324c <__aeabi_dadd+0x1f8>
    324a:	e1cb      	b.n	35e4 <__aeabi_dadd+0x590>
    324c:	2280      	movs	r2, #128	; 0x80
    324e:	0312      	lsls	r2, r2, #12
    3250:	4314      	orrs	r4, r2
    3252:	0324      	lsls	r4, r4, #12
    3254:	0b24      	lsrs	r4, r4, #12
    3256:	e79e      	b.n	3196 <__aeabi_dadd+0x142>
    3258:	002e      	movs	r6, r5
    325a:	e77f      	b.n	315c <__aeabi_dadd+0x108>
    325c:	0008      	movs	r0, r1
    325e:	4310      	orrs	r0, r2
    3260:	d100      	bne.n	3264 <__aeabi_dadd+0x210>
    3262:	e0b4      	b.n	33ce <__aeabi_dadd+0x37a>
    3264:	1e58      	subs	r0, r3, #1
    3266:	2800      	cmp	r0, #0
    3268:	d000      	beq.n	326c <__aeabi_dadd+0x218>
    326a:	e0de      	b.n	342a <__aeabi_dadd+0x3d6>
    326c:	18ba      	adds	r2, r7, r2
    326e:	42ba      	cmp	r2, r7
    3270:	419b      	sbcs	r3, r3
    3272:	1864      	adds	r4, r4, r1
    3274:	425b      	negs	r3, r3
    3276:	18e4      	adds	r4, r4, r3
    3278:	0017      	movs	r7, r2
    327a:	2601      	movs	r6, #1
    327c:	0223      	lsls	r3, r4, #8
    327e:	d5a6      	bpl.n	31ce <__aeabi_dadd+0x17a>
    3280:	2602      	movs	r6, #2
    3282:	e7d5      	b.n	3230 <__aeabi_dadd+0x1dc>
    3284:	2d00      	cmp	r5, #0
    3286:	d16e      	bne.n	3366 <__aeabi_dadd+0x312>
    3288:	1c70      	adds	r0, r6, #1
    328a:	0540      	lsls	r0, r0, #21
    328c:	0d40      	lsrs	r0, r0, #21
    328e:	2801      	cmp	r0, #1
    3290:	dc00      	bgt.n	3294 <__aeabi_dadd+0x240>
    3292:	e0f9      	b.n	3488 <__aeabi_dadd+0x434>
    3294:	1ab8      	subs	r0, r7, r2
    3296:	4684      	mov	ip, r0
    3298:	4287      	cmp	r7, r0
    329a:	4180      	sbcs	r0, r0
    329c:	1ae5      	subs	r5, r4, r3
    329e:	4240      	negs	r0, r0
    32a0:	1a2d      	subs	r5, r5, r0
    32a2:	0228      	lsls	r0, r5, #8
    32a4:	d400      	bmi.n	32a8 <__aeabi_dadd+0x254>
    32a6:	e089      	b.n	33bc <__aeabi_dadd+0x368>
    32a8:	1bd7      	subs	r7, r2, r7
    32aa:	42ba      	cmp	r2, r7
    32ac:	4192      	sbcs	r2, r2
    32ae:	1b1c      	subs	r4, r3, r4
    32b0:	4252      	negs	r2, r2
    32b2:	1aa5      	subs	r5, r4, r2
    32b4:	46d8      	mov	r8, fp
    32b6:	e729      	b.n	310c <__aeabi_dadd+0xb8>
    32b8:	4645      	mov	r5, r8
    32ba:	2400      	movs	r4, #0
    32bc:	2700      	movs	r7, #0
    32be:	e76a      	b.n	3196 <__aeabi_dadd+0x142>
    32c0:	4c45      	ldr	r4, [pc, #276]	; (33d8 <__aeabi_dadd+0x384>)
    32c2:	1af6      	subs	r6, r6, r3
    32c4:	402c      	ands	r4, r5
    32c6:	e749      	b.n	315c <__aeabi_dadd+0x108>
    32c8:	003d      	movs	r5, r7
    32ca:	3828      	subs	r0, #40	; 0x28
    32cc:	4085      	lsls	r5, r0
    32ce:	2700      	movs	r7, #0
    32d0:	e72e      	b.n	3130 <__aeabi_dadd+0xdc>
    32d2:	0038      	movs	r0, r7
    32d4:	f001 fc66 	bl	4ba4 <__clzsi2>
    32d8:	3020      	adds	r0, #32
    32da:	e71d      	b.n	3118 <__aeabi_dadd+0xc4>
    32dc:	430a      	orrs	r2, r1
    32de:	1e51      	subs	r1, r2, #1
    32e0:	418a      	sbcs	r2, r1
    32e2:	2100      	movs	r1, #0
    32e4:	e707      	b.n	30f6 <__aeabi_dadd+0xa2>
    32e6:	2b00      	cmp	r3, #0
    32e8:	d000      	beq.n	32ec <__aeabi_dadd+0x298>
    32ea:	e0f3      	b.n	34d4 <__aeabi_dadd+0x480>
    32ec:	1c70      	adds	r0, r6, #1
    32ee:	0543      	lsls	r3, r0, #21
    32f0:	0d5b      	lsrs	r3, r3, #21
    32f2:	2b01      	cmp	r3, #1
    32f4:	dc00      	bgt.n	32f8 <__aeabi_dadd+0x2a4>
    32f6:	e0ad      	b.n	3454 <__aeabi_dadd+0x400>
    32f8:	4b36      	ldr	r3, [pc, #216]	; (33d4 <__aeabi_dadd+0x380>)
    32fa:	4298      	cmp	r0, r3
    32fc:	d100      	bne.n	3300 <__aeabi_dadd+0x2ac>
    32fe:	e0d1      	b.n	34a4 <__aeabi_dadd+0x450>
    3300:	18ba      	adds	r2, r7, r2
    3302:	42ba      	cmp	r2, r7
    3304:	41bf      	sbcs	r7, r7
    3306:	1864      	adds	r4, r4, r1
    3308:	427f      	negs	r7, r7
    330a:	19e4      	adds	r4, r4, r7
    330c:	07e7      	lsls	r7, r4, #31
    330e:	0852      	lsrs	r2, r2, #1
    3310:	4317      	orrs	r7, r2
    3312:	0864      	lsrs	r4, r4, #1
    3314:	0006      	movs	r6, r0
    3316:	e721      	b.n	315c <__aeabi_dadd+0x108>
    3318:	482e      	ldr	r0, [pc, #184]	; (33d4 <__aeabi_dadd+0x380>)
    331a:	4285      	cmp	r5, r0
    331c:	d100      	bne.n	3320 <__aeabi_dadd+0x2cc>
    331e:	e093      	b.n	3448 <__aeabi_dadd+0x3f4>
    3320:	001d      	movs	r5, r3
    3322:	e6d0      	b.n	30c6 <__aeabi_dadd+0x72>
    3324:	0029      	movs	r1, r5
    3326:	3e1f      	subs	r6, #31
    3328:	40f1      	lsrs	r1, r6
    332a:	2b20      	cmp	r3, #32
    332c:	d100      	bne.n	3330 <__aeabi_dadd+0x2dc>
    332e:	e08d      	b.n	344c <__aeabi_dadd+0x3f8>
    3330:	2240      	movs	r2, #64	; 0x40
    3332:	1ad3      	subs	r3, r2, r3
    3334:	409d      	lsls	r5, r3
    3336:	432f      	orrs	r7, r5
    3338:	1e7d      	subs	r5, r7, #1
    333a:	41af      	sbcs	r7, r5
    333c:	2400      	movs	r4, #0
    333e:	430f      	orrs	r7, r1
    3340:	2600      	movs	r6, #0
    3342:	e744      	b.n	31ce <__aeabi_dadd+0x17a>
    3344:	002b      	movs	r3, r5
    3346:	0008      	movs	r0, r1
    3348:	3b20      	subs	r3, #32
    334a:	40d8      	lsrs	r0, r3
    334c:	0003      	movs	r3, r0
    334e:	2d20      	cmp	r5, #32
    3350:	d100      	bne.n	3354 <__aeabi_dadd+0x300>
    3352:	e07d      	b.n	3450 <__aeabi_dadd+0x3fc>
    3354:	2040      	movs	r0, #64	; 0x40
    3356:	1b45      	subs	r5, r0, r5
    3358:	40a9      	lsls	r1, r5
    335a:	430a      	orrs	r2, r1
    335c:	1e51      	subs	r1, r2, #1
    335e:	418a      	sbcs	r2, r1
    3360:	2100      	movs	r1, #0
    3362:	431a      	orrs	r2, r3
    3364:	e6c7      	b.n	30f6 <__aeabi_dadd+0xa2>
    3366:	2e00      	cmp	r6, #0
    3368:	d050      	beq.n	340c <__aeabi_dadd+0x3b8>
    336a:	4e1a      	ldr	r6, [pc, #104]	; (33d4 <__aeabi_dadd+0x380>)
    336c:	42b0      	cmp	r0, r6
    336e:	d057      	beq.n	3420 <__aeabi_dadd+0x3cc>
    3370:	2680      	movs	r6, #128	; 0x80
    3372:	426b      	negs	r3, r5
    3374:	4699      	mov	r9, r3
    3376:	0436      	lsls	r6, r6, #16
    3378:	4334      	orrs	r4, r6
    337a:	464b      	mov	r3, r9
    337c:	2b38      	cmp	r3, #56	; 0x38
    337e:	dd00      	ble.n	3382 <__aeabi_dadd+0x32e>
    3380:	e0d6      	b.n	3530 <__aeabi_dadd+0x4dc>
    3382:	2b1f      	cmp	r3, #31
    3384:	dd00      	ble.n	3388 <__aeabi_dadd+0x334>
    3386:	e135      	b.n	35f4 <__aeabi_dadd+0x5a0>
    3388:	2620      	movs	r6, #32
    338a:	1af5      	subs	r5, r6, r3
    338c:	0026      	movs	r6, r4
    338e:	40ae      	lsls	r6, r5
    3390:	46b2      	mov	sl, r6
    3392:	003e      	movs	r6, r7
    3394:	40de      	lsrs	r6, r3
    3396:	46ac      	mov	ip, r5
    3398:	0035      	movs	r5, r6
    339a:	4656      	mov	r6, sl
    339c:	432e      	orrs	r6, r5
    339e:	4665      	mov	r5, ip
    33a0:	40af      	lsls	r7, r5
    33a2:	1e7d      	subs	r5, r7, #1
    33a4:	41af      	sbcs	r7, r5
    33a6:	40dc      	lsrs	r4, r3
    33a8:	4337      	orrs	r7, r6
    33aa:	1bd7      	subs	r7, r2, r7
    33ac:	42ba      	cmp	r2, r7
    33ae:	4192      	sbcs	r2, r2
    33b0:	1b0c      	subs	r4, r1, r4
    33b2:	4252      	negs	r2, r2
    33b4:	1aa4      	subs	r4, r4, r2
    33b6:	0006      	movs	r6, r0
    33b8:	46d8      	mov	r8, fp
    33ba:	e6a3      	b.n	3104 <__aeabi_dadd+0xb0>
    33bc:	4664      	mov	r4, ip
    33be:	4667      	mov	r7, ip
    33c0:	432c      	orrs	r4, r5
    33c2:	d000      	beq.n	33c6 <__aeabi_dadd+0x372>
    33c4:	e6a2      	b.n	310c <__aeabi_dadd+0xb8>
    33c6:	2500      	movs	r5, #0
    33c8:	2600      	movs	r6, #0
    33ca:	2700      	movs	r7, #0
    33cc:	e706      	b.n	31dc <__aeabi_dadd+0x188>
    33ce:	001e      	movs	r6, r3
    33d0:	e6c4      	b.n	315c <__aeabi_dadd+0x108>
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	000007ff 	.word	0x000007ff
    33d8:	ff7fffff 	.word	0xff7fffff
    33dc:	800fffff 	.word	0x800fffff
    33e0:	2b1f      	cmp	r3, #31
    33e2:	dc63      	bgt.n	34ac <__aeabi_dadd+0x458>
    33e4:	2020      	movs	r0, #32
    33e6:	1ac3      	subs	r3, r0, r3
    33e8:	0008      	movs	r0, r1
    33ea:	4098      	lsls	r0, r3
    33ec:	469c      	mov	ip, r3
    33ee:	4683      	mov	fp, r0
    33f0:	4653      	mov	r3, sl
    33f2:	0010      	movs	r0, r2
    33f4:	40d8      	lsrs	r0, r3
    33f6:	0003      	movs	r3, r0
    33f8:	4658      	mov	r0, fp
    33fa:	4318      	orrs	r0, r3
    33fc:	4663      	mov	r3, ip
    33fe:	409a      	lsls	r2, r3
    3400:	1e53      	subs	r3, r2, #1
    3402:	419a      	sbcs	r2, r3
    3404:	4653      	mov	r3, sl
    3406:	4302      	orrs	r2, r0
    3408:	40d9      	lsrs	r1, r3
    340a:	e703      	b.n	3214 <__aeabi_dadd+0x1c0>
    340c:	0026      	movs	r6, r4
    340e:	433e      	orrs	r6, r7
    3410:	d006      	beq.n	3420 <__aeabi_dadd+0x3cc>
    3412:	43eb      	mvns	r3, r5
    3414:	4699      	mov	r9, r3
    3416:	2b00      	cmp	r3, #0
    3418:	d0c7      	beq.n	33aa <__aeabi_dadd+0x356>
    341a:	4e94      	ldr	r6, [pc, #592]	; (366c <__aeabi_dadd+0x618>)
    341c:	42b0      	cmp	r0, r6
    341e:	d1ac      	bne.n	337a <__aeabi_dadd+0x326>
    3420:	000c      	movs	r4, r1
    3422:	0017      	movs	r7, r2
    3424:	0006      	movs	r6, r0
    3426:	46d8      	mov	r8, fp
    3428:	e698      	b.n	315c <__aeabi_dadd+0x108>
    342a:	4b90      	ldr	r3, [pc, #576]	; (366c <__aeabi_dadd+0x618>)
    342c:	459a      	cmp	sl, r3
    342e:	d00b      	beq.n	3448 <__aeabi_dadd+0x3f4>
    3430:	4682      	mov	sl, r0
    3432:	e6e7      	b.n	3204 <__aeabi_dadd+0x1b0>
    3434:	2800      	cmp	r0, #0
    3436:	d000      	beq.n	343a <__aeabi_dadd+0x3e6>
    3438:	e09e      	b.n	3578 <__aeabi_dadd+0x524>
    343a:	0018      	movs	r0, r3
    343c:	4310      	orrs	r0, r2
    343e:	d100      	bne.n	3442 <__aeabi_dadd+0x3ee>
    3440:	e0e9      	b.n	3616 <__aeabi_dadd+0x5c2>
    3442:	001c      	movs	r4, r3
    3444:	0017      	movs	r7, r2
    3446:	46d8      	mov	r8, fp
    3448:	4e88      	ldr	r6, [pc, #544]	; (366c <__aeabi_dadd+0x618>)
    344a:	e687      	b.n	315c <__aeabi_dadd+0x108>
    344c:	2500      	movs	r5, #0
    344e:	e772      	b.n	3336 <__aeabi_dadd+0x2e2>
    3450:	2100      	movs	r1, #0
    3452:	e782      	b.n	335a <__aeabi_dadd+0x306>
    3454:	0023      	movs	r3, r4
    3456:	433b      	orrs	r3, r7
    3458:	2e00      	cmp	r6, #0
    345a:	d000      	beq.n	345e <__aeabi_dadd+0x40a>
    345c:	e0ab      	b.n	35b6 <__aeabi_dadd+0x562>
    345e:	2b00      	cmp	r3, #0
    3460:	d100      	bne.n	3464 <__aeabi_dadd+0x410>
    3462:	e0e7      	b.n	3634 <__aeabi_dadd+0x5e0>
    3464:	000b      	movs	r3, r1
    3466:	4313      	orrs	r3, r2
    3468:	d100      	bne.n	346c <__aeabi_dadd+0x418>
    346a:	e677      	b.n	315c <__aeabi_dadd+0x108>
    346c:	18ba      	adds	r2, r7, r2
    346e:	42ba      	cmp	r2, r7
    3470:	41bf      	sbcs	r7, r7
    3472:	1864      	adds	r4, r4, r1
    3474:	427f      	negs	r7, r7
    3476:	19e4      	adds	r4, r4, r7
    3478:	0223      	lsls	r3, r4, #8
    347a:	d400      	bmi.n	347e <__aeabi_dadd+0x42a>
    347c:	e0f2      	b.n	3664 <__aeabi_dadd+0x610>
    347e:	4b7c      	ldr	r3, [pc, #496]	; (3670 <__aeabi_dadd+0x61c>)
    3480:	0017      	movs	r7, r2
    3482:	401c      	ands	r4, r3
    3484:	0006      	movs	r6, r0
    3486:	e669      	b.n	315c <__aeabi_dadd+0x108>
    3488:	0020      	movs	r0, r4
    348a:	4338      	orrs	r0, r7
    348c:	2e00      	cmp	r6, #0
    348e:	d1d1      	bne.n	3434 <__aeabi_dadd+0x3e0>
    3490:	2800      	cmp	r0, #0
    3492:	d15b      	bne.n	354c <__aeabi_dadd+0x4f8>
    3494:	001c      	movs	r4, r3
    3496:	4314      	orrs	r4, r2
    3498:	d100      	bne.n	349c <__aeabi_dadd+0x448>
    349a:	e0a8      	b.n	35ee <__aeabi_dadd+0x59a>
    349c:	001c      	movs	r4, r3
    349e:	0017      	movs	r7, r2
    34a0:	46d8      	mov	r8, fp
    34a2:	e65b      	b.n	315c <__aeabi_dadd+0x108>
    34a4:	0006      	movs	r6, r0
    34a6:	2400      	movs	r4, #0
    34a8:	2700      	movs	r7, #0
    34aa:	e697      	b.n	31dc <__aeabi_dadd+0x188>
    34ac:	4650      	mov	r0, sl
    34ae:	000b      	movs	r3, r1
    34b0:	3820      	subs	r0, #32
    34b2:	40c3      	lsrs	r3, r0
    34b4:	4699      	mov	r9, r3
    34b6:	4653      	mov	r3, sl
    34b8:	2b20      	cmp	r3, #32
    34ba:	d100      	bne.n	34be <__aeabi_dadd+0x46a>
    34bc:	e095      	b.n	35ea <__aeabi_dadd+0x596>
    34be:	2340      	movs	r3, #64	; 0x40
    34c0:	4650      	mov	r0, sl
    34c2:	1a1b      	subs	r3, r3, r0
    34c4:	4099      	lsls	r1, r3
    34c6:	430a      	orrs	r2, r1
    34c8:	1e51      	subs	r1, r2, #1
    34ca:	418a      	sbcs	r2, r1
    34cc:	464b      	mov	r3, r9
    34ce:	2100      	movs	r1, #0
    34d0:	431a      	orrs	r2, r3
    34d2:	e69f      	b.n	3214 <__aeabi_dadd+0x1c0>
    34d4:	2e00      	cmp	r6, #0
    34d6:	d130      	bne.n	353a <__aeabi_dadd+0x4e6>
    34d8:	0026      	movs	r6, r4
    34da:	433e      	orrs	r6, r7
    34dc:	d067      	beq.n	35ae <__aeabi_dadd+0x55a>
    34de:	43db      	mvns	r3, r3
    34e0:	469a      	mov	sl, r3
    34e2:	2b00      	cmp	r3, #0
    34e4:	d01c      	beq.n	3520 <__aeabi_dadd+0x4cc>
    34e6:	4e61      	ldr	r6, [pc, #388]	; (366c <__aeabi_dadd+0x618>)
    34e8:	42b0      	cmp	r0, r6
    34ea:	d060      	beq.n	35ae <__aeabi_dadd+0x55a>
    34ec:	4653      	mov	r3, sl
    34ee:	2b38      	cmp	r3, #56	; 0x38
    34f0:	dd00      	ble.n	34f4 <__aeabi_dadd+0x4a0>
    34f2:	e096      	b.n	3622 <__aeabi_dadd+0x5ce>
    34f4:	2b1f      	cmp	r3, #31
    34f6:	dd00      	ble.n	34fa <__aeabi_dadd+0x4a6>
    34f8:	e09f      	b.n	363a <__aeabi_dadd+0x5e6>
    34fa:	2620      	movs	r6, #32
    34fc:	1af3      	subs	r3, r6, r3
    34fe:	0026      	movs	r6, r4
    3500:	409e      	lsls	r6, r3
    3502:	469c      	mov	ip, r3
    3504:	46b3      	mov	fp, r6
    3506:	4653      	mov	r3, sl
    3508:	003e      	movs	r6, r7
    350a:	40de      	lsrs	r6, r3
    350c:	0033      	movs	r3, r6
    350e:	465e      	mov	r6, fp
    3510:	431e      	orrs	r6, r3
    3512:	4663      	mov	r3, ip
    3514:	409f      	lsls	r7, r3
    3516:	1e7b      	subs	r3, r7, #1
    3518:	419f      	sbcs	r7, r3
    351a:	4653      	mov	r3, sl
    351c:	40dc      	lsrs	r4, r3
    351e:	4337      	orrs	r7, r6
    3520:	18bf      	adds	r7, r7, r2
    3522:	4297      	cmp	r7, r2
    3524:	4192      	sbcs	r2, r2
    3526:	1864      	adds	r4, r4, r1
    3528:	4252      	negs	r2, r2
    352a:	18a4      	adds	r4, r4, r2
    352c:	0006      	movs	r6, r0
    352e:	e678      	b.n	3222 <__aeabi_dadd+0x1ce>
    3530:	4327      	orrs	r7, r4
    3532:	1e7c      	subs	r4, r7, #1
    3534:	41a7      	sbcs	r7, r4
    3536:	2400      	movs	r4, #0
    3538:	e737      	b.n	33aa <__aeabi_dadd+0x356>
    353a:	4e4c      	ldr	r6, [pc, #304]	; (366c <__aeabi_dadd+0x618>)
    353c:	42b0      	cmp	r0, r6
    353e:	d036      	beq.n	35ae <__aeabi_dadd+0x55a>
    3540:	2680      	movs	r6, #128	; 0x80
    3542:	425b      	negs	r3, r3
    3544:	0436      	lsls	r6, r6, #16
    3546:	469a      	mov	sl, r3
    3548:	4334      	orrs	r4, r6
    354a:	e7cf      	b.n	34ec <__aeabi_dadd+0x498>
    354c:	0018      	movs	r0, r3
    354e:	4310      	orrs	r0, r2
    3550:	d100      	bne.n	3554 <__aeabi_dadd+0x500>
    3552:	e603      	b.n	315c <__aeabi_dadd+0x108>
    3554:	1ab8      	subs	r0, r7, r2
    3556:	4684      	mov	ip, r0
    3558:	4567      	cmp	r7, ip
    355a:	41ad      	sbcs	r5, r5
    355c:	1ae0      	subs	r0, r4, r3
    355e:	426d      	negs	r5, r5
    3560:	1b40      	subs	r0, r0, r5
    3562:	0205      	lsls	r5, r0, #8
    3564:	d400      	bmi.n	3568 <__aeabi_dadd+0x514>
    3566:	e62c      	b.n	31c2 <__aeabi_dadd+0x16e>
    3568:	1bd7      	subs	r7, r2, r7
    356a:	42ba      	cmp	r2, r7
    356c:	4192      	sbcs	r2, r2
    356e:	1b1c      	subs	r4, r3, r4
    3570:	4252      	negs	r2, r2
    3572:	1aa4      	subs	r4, r4, r2
    3574:	46d8      	mov	r8, fp
    3576:	e5f1      	b.n	315c <__aeabi_dadd+0x108>
    3578:	0018      	movs	r0, r3
    357a:	4310      	orrs	r0, r2
    357c:	d100      	bne.n	3580 <__aeabi_dadd+0x52c>
    357e:	e763      	b.n	3448 <__aeabi_dadd+0x3f4>
    3580:	08f8      	lsrs	r0, r7, #3
    3582:	0767      	lsls	r7, r4, #29
    3584:	4307      	orrs	r7, r0
    3586:	2080      	movs	r0, #128	; 0x80
    3588:	08e4      	lsrs	r4, r4, #3
    358a:	0300      	lsls	r0, r0, #12
    358c:	4204      	tst	r4, r0
    358e:	d008      	beq.n	35a2 <__aeabi_dadd+0x54e>
    3590:	08dd      	lsrs	r5, r3, #3
    3592:	4205      	tst	r5, r0
    3594:	d105      	bne.n	35a2 <__aeabi_dadd+0x54e>
    3596:	08d2      	lsrs	r2, r2, #3
    3598:	0759      	lsls	r1, r3, #29
    359a:	4311      	orrs	r1, r2
    359c:	000f      	movs	r7, r1
    359e:	002c      	movs	r4, r5
    35a0:	46d8      	mov	r8, fp
    35a2:	0f7b      	lsrs	r3, r7, #29
    35a4:	00e4      	lsls	r4, r4, #3
    35a6:	431c      	orrs	r4, r3
    35a8:	00ff      	lsls	r7, r7, #3
    35aa:	4e30      	ldr	r6, [pc, #192]	; (366c <__aeabi_dadd+0x618>)
    35ac:	e5d6      	b.n	315c <__aeabi_dadd+0x108>
    35ae:	000c      	movs	r4, r1
    35b0:	0017      	movs	r7, r2
    35b2:	0006      	movs	r6, r0
    35b4:	e5d2      	b.n	315c <__aeabi_dadd+0x108>
    35b6:	2b00      	cmp	r3, #0
    35b8:	d038      	beq.n	362c <__aeabi_dadd+0x5d8>
    35ba:	000b      	movs	r3, r1
    35bc:	4313      	orrs	r3, r2
    35be:	d100      	bne.n	35c2 <__aeabi_dadd+0x56e>
    35c0:	e742      	b.n	3448 <__aeabi_dadd+0x3f4>
    35c2:	08f8      	lsrs	r0, r7, #3
    35c4:	0767      	lsls	r7, r4, #29
    35c6:	4307      	orrs	r7, r0
    35c8:	2080      	movs	r0, #128	; 0x80
    35ca:	08e4      	lsrs	r4, r4, #3
    35cc:	0300      	lsls	r0, r0, #12
    35ce:	4204      	tst	r4, r0
    35d0:	d0e7      	beq.n	35a2 <__aeabi_dadd+0x54e>
    35d2:	08cb      	lsrs	r3, r1, #3
    35d4:	4203      	tst	r3, r0
    35d6:	d1e4      	bne.n	35a2 <__aeabi_dadd+0x54e>
    35d8:	08d2      	lsrs	r2, r2, #3
    35da:	0749      	lsls	r1, r1, #29
    35dc:	4311      	orrs	r1, r2
    35de:	000f      	movs	r7, r1
    35e0:	001c      	movs	r4, r3
    35e2:	e7de      	b.n	35a2 <__aeabi_dadd+0x54e>
    35e4:	2700      	movs	r7, #0
    35e6:	2400      	movs	r4, #0
    35e8:	e5d5      	b.n	3196 <__aeabi_dadd+0x142>
    35ea:	2100      	movs	r1, #0
    35ec:	e76b      	b.n	34c6 <__aeabi_dadd+0x472>
    35ee:	2500      	movs	r5, #0
    35f0:	2700      	movs	r7, #0
    35f2:	e5f3      	b.n	31dc <__aeabi_dadd+0x188>
    35f4:	464e      	mov	r6, r9
    35f6:	0025      	movs	r5, r4
    35f8:	3e20      	subs	r6, #32
    35fa:	40f5      	lsrs	r5, r6
    35fc:	464b      	mov	r3, r9
    35fe:	002e      	movs	r6, r5
    3600:	2b20      	cmp	r3, #32
    3602:	d02d      	beq.n	3660 <__aeabi_dadd+0x60c>
    3604:	2540      	movs	r5, #64	; 0x40
    3606:	1aed      	subs	r5, r5, r3
    3608:	40ac      	lsls	r4, r5
    360a:	4327      	orrs	r7, r4
    360c:	1e7c      	subs	r4, r7, #1
    360e:	41a7      	sbcs	r7, r4
    3610:	2400      	movs	r4, #0
    3612:	4337      	orrs	r7, r6
    3614:	e6c9      	b.n	33aa <__aeabi_dadd+0x356>
    3616:	2480      	movs	r4, #128	; 0x80
    3618:	2500      	movs	r5, #0
    361a:	0324      	lsls	r4, r4, #12
    361c:	4e13      	ldr	r6, [pc, #76]	; (366c <__aeabi_dadd+0x618>)
    361e:	2700      	movs	r7, #0
    3620:	e5dc      	b.n	31dc <__aeabi_dadd+0x188>
    3622:	4327      	orrs	r7, r4
    3624:	1e7c      	subs	r4, r7, #1
    3626:	41a7      	sbcs	r7, r4
    3628:	2400      	movs	r4, #0
    362a:	e779      	b.n	3520 <__aeabi_dadd+0x4cc>
    362c:	000c      	movs	r4, r1
    362e:	0017      	movs	r7, r2
    3630:	4e0e      	ldr	r6, [pc, #56]	; (366c <__aeabi_dadd+0x618>)
    3632:	e593      	b.n	315c <__aeabi_dadd+0x108>
    3634:	000c      	movs	r4, r1
    3636:	0017      	movs	r7, r2
    3638:	e590      	b.n	315c <__aeabi_dadd+0x108>
    363a:	4656      	mov	r6, sl
    363c:	0023      	movs	r3, r4
    363e:	3e20      	subs	r6, #32
    3640:	40f3      	lsrs	r3, r6
    3642:	4699      	mov	r9, r3
    3644:	4653      	mov	r3, sl
    3646:	2b20      	cmp	r3, #32
    3648:	d00e      	beq.n	3668 <__aeabi_dadd+0x614>
    364a:	2340      	movs	r3, #64	; 0x40
    364c:	4656      	mov	r6, sl
    364e:	1b9b      	subs	r3, r3, r6
    3650:	409c      	lsls	r4, r3
    3652:	4327      	orrs	r7, r4
    3654:	1e7c      	subs	r4, r7, #1
    3656:	41a7      	sbcs	r7, r4
    3658:	464b      	mov	r3, r9
    365a:	2400      	movs	r4, #0
    365c:	431f      	orrs	r7, r3
    365e:	e75f      	b.n	3520 <__aeabi_dadd+0x4cc>
    3660:	2400      	movs	r4, #0
    3662:	e7d2      	b.n	360a <__aeabi_dadd+0x5b6>
    3664:	0017      	movs	r7, r2
    3666:	e5b2      	b.n	31ce <__aeabi_dadd+0x17a>
    3668:	2400      	movs	r4, #0
    366a:	e7f2      	b.n	3652 <__aeabi_dadd+0x5fe>
    366c:	000007ff 	.word	0x000007ff
    3670:	ff7fffff 	.word	0xff7fffff

00003674 <__aeabi_ddiv>:
    3674:	b5f0      	push	{r4, r5, r6, r7, lr}
    3676:	4657      	mov	r7, sl
    3678:	4645      	mov	r5, r8
    367a:	46de      	mov	lr, fp
    367c:	464e      	mov	r6, r9
    367e:	b5e0      	push	{r5, r6, r7, lr}
    3680:	004c      	lsls	r4, r1, #1
    3682:	030e      	lsls	r6, r1, #12
    3684:	b087      	sub	sp, #28
    3686:	4683      	mov	fp, r0
    3688:	4692      	mov	sl, r2
    368a:	001d      	movs	r5, r3
    368c:	4680      	mov	r8, r0
    368e:	0b36      	lsrs	r6, r6, #12
    3690:	0d64      	lsrs	r4, r4, #21
    3692:	0fcf      	lsrs	r7, r1, #31
    3694:	2c00      	cmp	r4, #0
    3696:	d04f      	beq.n	3738 <__aeabi_ddiv+0xc4>
    3698:	4b6f      	ldr	r3, [pc, #444]	; (3858 <__aeabi_ddiv+0x1e4>)
    369a:	429c      	cmp	r4, r3
    369c:	d035      	beq.n	370a <__aeabi_ddiv+0x96>
    369e:	2380      	movs	r3, #128	; 0x80
    36a0:	0f42      	lsrs	r2, r0, #29
    36a2:	041b      	lsls	r3, r3, #16
    36a4:	00f6      	lsls	r6, r6, #3
    36a6:	4313      	orrs	r3, r2
    36a8:	4333      	orrs	r3, r6
    36aa:	4699      	mov	r9, r3
    36ac:	00c3      	lsls	r3, r0, #3
    36ae:	4698      	mov	r8, r3
    36b0:	4b6a      	ldr	r3, [pc, #424]	; (385c <__aeabi_ddiv+0x1e8>)
    36b2:	2600      	movs	r6, #0
    36b4:	469c      	mov	ip, r3
    36b6:	2300      	movs	r3, #0
    36b8:	4464      	add	r4, ip
    36ba:	9303      	str	r3, [sp, #12]
    36bc:	032b      	lsls	r3, r5, #12
    36be:	0b1b      	lsrs	r3, r3, #12
    36c0:	469b      	mov	fp, r3
    36c2:	006b      	lsls	r3, r5, #1
    36c4:	0fed      	lsrs	r5, r5, #31
    36c6:	4650      	mov	r0, sl
    36c8:	0d5b      	lsrs	r3, r3, #21
    36ca:	9501      	str	r5, [sp, #4]
    36cc:	d05e      	beq.n	378c <__aeabi_ddiv+0x118>
    36ce:	4a62      	ldr	r2, [pc, #392]	; (3858 <__aeabi_ddiv+0x1e4>)
    36d0:	4293      	cmp	r3, r2
    36d2:	d053      	beq.n	377c <__aeabi_ddiv+0x108>
    36d4:	465a      	mov	r2, fp
    36d6:	00d1      	lsls	r1, r2, #3
    36d8:	2280      	movs	r2, #128	; 0x80
    36da:	0f40      	lsrs	r0, r0, #29
    36dc:	0412      	lsls	r2, r2, #16
    36de:	4302      	orrs	r2, r0
    36e0:	430a      	orrs	r2, r1
    36e2:	4693      	mov	fp, r2
    36e4:	4652      	mov	r2, sl
    36e6:	00d1      	lsls	r1, r2, #3
    36e8:	4a5c      	ldr	r2, [pc, #368]	; (385c <__aeabi_ddiv+0x1e8>)
    36ea:	4694      	mov	ip, r2
    36ec:	2200      	movs	r2, #0
    36ee:	4463      	add	r3, ip
    36f0:	0038      	movs	r0, r7
    36f2:	4068      	eors	r0, r5
    36f4:	4684      	mov	ip, r0
    36f6:	9002      	str	r0, [sp, #8]
    36f8:	1ae4      	subs	r4, r4, r3
    36fa:	4316      	orrs	r6, r2
    36fc:	2e0f      	cmp	r6, #15
    36fe:	d900      	bls.n	3702 <__aeabi_ddiv+0x8e>
    3700:	e0b4      	b.n	386c <__aeabi_ddiv+0x1f8>
    3702:	4b57      	ldr	r3, [pc, #348]	; (3860 <__aeabi_ddiv+0x1ec>)
    3704:	00b6      	lsls	r6, r6, #2
    3706:	599b      	ldr	r3, [r3, r6]
    3708:	469f      	mov	pc, r3
    370a:	0003      	movs	r3, r0
    370c:	4333      	orrs	r3, r6
    370e:	4699      	mov	r9, r3
    3710:	d16c      	bne.n	37ec <__aeabi_ddiv+0x178>
    3712:	2300      	movs	r3, #0
    3714:	4698      	mov	r8, r3
    3716:	3302      	adds	r3, #2
    3718:	2608      	movs	r6, #8
    371a:	9303      	str	r3, [sp, #12]
    371c:	e7ce      	b.n	36bc <__aeabi_ddiv+0x48>
    371e:	46cb      	mov	fp, r9
    3720:	4641      	mov	r1, r8
    3722:	9a03      	ldr	r2, [sp, #12]
    3724:	9701      	str	r7, [sp, #4]
    3726:	2a02      	cmp	r2, #2
    3728:	d165      	bne.n	37f6 <__aeabi_ddiv+0x182>
    372a:	9b01      	ldr	r3, [sp, #4]
    372c:	4c4a      	ldr	r4, [pc, #296]	; (3858 <__aeabi_ddiv+0x1e4>)
    372e:	469c      	mov	ip, r3
    3730:	2300      	movs	r3, #0
    3732:	2200      	movs	r2, #0
    3734:	4698      	mov	r8, r3
    3736:	e06b      	b.n	3810 <__aeabi_ddiv+0x19c>
    3738:	0003      	movs	r3, r0
    373a:	4333      	orrs	r3, r6
    373c:	4699      	mov	r9, r3
    373e:	d04e      	beq.n	37de <__aeabi_ddiv+0x16a>
    3740:	2e00      	cmp	r6, #0
    3742:	d100      	bne.n	3746 <__aeabi_ddiv+0xd2>
    3744:	e1bc      	b.n	3ac0 <__aeabi_ddiv+0x44c>
    3746:	0030      	movs	r0, r6
    3748:	f001 fa2c 	bl	4ba4 <__clzsi2>
    374c:	0003      	movs	r3, r0
    374e:	3b0b      	subs	r3, #11
    3750:	2b1c      	cmp	r3, #28
    3752:	dd00      	ble.n	3756 <__aeabi_ddiv+0xe2>
    3754:	e1ac      	b.n	3ab0 <__aeabi_ddiv+0x43c>
    3756:	221d      	movs	r2, #29
    3758:	1ad3      	subs	r3, r2, r3
    375a:	465a      	mov	r2, fp
    375c:	0001      	movs	r1, r0
    375e:	40da      	lsrs	r2, r3
    3760:	3908      	subs	r1, #8
    3762:	408e      	lsls	r6, r1
    3764:	0013      	movs	r3, r2
    3766:	4333      	orrs	r3, r6
    3768:	4699      	mov	r9, r3
    376a:	465b      	mov	r3, fp
    376c:	408b      	lsls	r3, r1
    376e:	4698      	mov	r8, r3
    3770:	2300      	movs	r3, #0
    3772:	4c3c      	ldr	r4, [pc, #240]	; (3864 <__aeabi_ddiv+0x1f0>)
    3774:	2600      	movs	r6, #0
    3776:	1a24      	subs	r4, r4, r0
    3778:	9303      	str	r3, [sp, #12]
    377a:	e79f      	b.n	36bc <__aeabi_ddiv+0x48>
    377c:	4651      	mov	r1, sl
    377e:	465a      	mov	r2, fp
    3780:	4311      	orrs	r1, r2
    3782:	d129      	bne.n	37d8 <__aeabi_ddiv+0x164>
    3784:	2200      	movs	r2, #0
    3786:	4693      	mov	fp, r2
    3788:	3202      	adds	r2, #2
    378a:	e7b1      	b.n	36f0 <__aeabi_ddiv+0x7c>
    378c:	4659      	mov	r1, fp
    378e:	4301      	orrs	r1, r0
    3790:	d01e      	beq.n	37d0 <__aeabi_ddiv+0x15c>
    3792:	465b      	mov	r3, fp
    3794:	2b00      	cmp	r3, #0
    3796:	d100      	bne.n	379a <__aeabi_ddiv+0x126>
    3798:	e19e      	b.n	3ad8 <__aeabi_ddiv+0x464>
    379a:	4658      	mov	r0, fp
    379c:	f001 fa02 	bl	4ba4 <__clzsi2>
    37a0:	0003      	movs	r3, r0
    37a2:	3b0b      	subs	r3, #11
    37a4:	2b1c      	cmp	r3, #28
    37a6:	dd00      	ble.n	37aa <__aeabi_ddiv+0x136>
    37a8:	e18f      	b.n	3aca <__aeabi_ddiv+0x456>
    37aa:	0002      	movs	r2, r0
    37ac:	4659      	mov	r1, fp
    37ae:	3a08      	subs	r2, #8
    37b0:	4091      	lsls	r1, r2
    37b2:	468b      	mov	fp, r1
    37b4:	211d      	movs	r1, #29
    37b6:	1acb      	subs	r3, r1, r3
    37b8:	4651      	mov	r1, sl
    37ba:	40d9      	lsrs	r1, r3
    37bc:	000b      	movs	r3, r1
    37be:	4659      	mov	r1, fp
    37c0:	430b      	orrs	r3, r1
    37c2:	4651      	mov	r1, sl
    37c4:	469b      	mov	fp, r3
    37c6:	4091      	lsls	r1, r2
    37c8:	4b26      	ldr	r3, [pc, #152]	; (3864 <__aeabi_ddiv+0x1f0>)
    37ca:	2200      	movs	r2, #0
    37cc:	1a1b      	subs	r3, r3, r0
    37ce:	e78f      	b.n	36f0 <__aeabi_ddiv+0x7c>
    37d0:	2300      	movs	r3, #0
    37d2:	2201      	movs	r2, #1
    37d4:	469b      	mov	fp, r3
    37d6:	e78b      	b.n	36f0 <__aeabi_ddiv+0x7c>
    37d8:	4651      	mov	r1, sl
    37da:	2203      	movs	r2, #3
    37dc:	e788      	b.n	36f0 <__aeabi_ddiv+0x7c>
    37de:	2300      	movs	r3, #0
    37e0:	4698      	mov	r8, r3
    37e2:	3301      	adds	r3, #1
    37e4:	2604      	movs	r6, #4
    37e6:	2400      	movs	r4, #0
    37e8:	9303      	str	r3, [sp, #12]
    37ea:	e767      	b.n	36bc <__aeabi_ddiv+0x48>
    37ec:	2303      	movs	r3, #3
    37ee:	46b1      	mov	r9, r6
    37f0:	9303      	str	r3, [sp, #12]
    37f2:	260c      	movs	r6, #12
    37f4:	e762      	b.n	36bc <__aeabi_ddiv+0x48>
    37f6:	2a03      	cmp	r2, #3
    37f8:	d100      	bne.n	37fc <__aeabi_ddiv+0x188>
    37fa:	e25c      	b.n	3cb6 <__aeabi_ddiv+0x642>
    37fc:	9b01      	ldr	r3, [sp, #4]
    37fe:	2a01      	cmp	r2, #1
    3800:	d000      	beq.n	3804 <__aeabi_ddiv+0x190>
    3802:	e1e4      	b.n	3bce <__aeabi_ddiv+0x55a>
    3804:	4013      	ands	r3, r2
    3806:	469c      	mov	ip, r3
    3808:	2300      	movs	r3, #0
    380a:	2400      	movs	r4, #0
    380c:	2200      	movs	r2, #0
    380e:	4698      	mov	r8, r3
    3810:	2100      	movs	r1, #0
    3812:	0312      	lsls	r2, r2, #12
    3814:	0b13      	lsrs	r3, r2, #12
    3816:	0d0a      	lsrs	r2, r1, #20
    3818:	0512      	lsls	r2, r2, #20
    381a:	431a      	orrs	r2, r3
    381c:	0523      	lsls	r3, r4, #20
    381e:	4c12      	ldr	r4, [pc, #72]	; (3868 <__aeabi_ddiv+0x1f4>)
    3820:	4640      	mov	r0, r8
    3822:	4022      	ands	r2, r4
    3824:	4313      	orrs	r3, r2
    3826:	4662      	mov	r2, ip
    3828:	005b      	lsls	r3, r3, #1
    382a:	07d2      	lsls	r2, r2, #31
    382c:	085b      	lsrs	r3, r3, #1
    382e:	4313      	orrs	r3, r2
    3830:	0019      	movs	r1, r3
    3832:	b007      	add	sp, #28
    3834:	bc3c      	pop	{r2, r3, r4, r5}
    3836:	4690      	mov	r8, r2
    3838:	4699      	mov	r9, r3
    383a:	46a2      	mov	sl, r4
    383c:	46ab      	mov	fp, r5
    383e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3840:	2300      	movs	r3, #0
    3842:	2280      	movs	r2, #128	; 0x80
    3844:	469c      	mov	ip, r3
    3846:	0312      	lsls	r2, r2, #12
    3848:	4698      	mov	r8, r3
    384a:	4c03      	ldr	r4, [pc, #12]	; (3858 <__aeabi_ddiv+0x1e4>)
    384c:	e7e0      	b.n	3810 <__aeabi_ddiv+0x19c>
    384e:	2300      	movs	r3, #0
    3850:	4c01      	ldr	r4, [pc, #4]	; (3858 <__aeabi_ddiv+0x1e4>)
    3852:	2200      	movs	r2, #0
    3854:	4698      	mov	r8, r3
    3856:	e7db      	b.n	3810 <__aeabi_ddiv+0x19c>
    3858:	000007ff 	.word	0x000007ff
    385c:	fffffc01 	.word	0xfffffc01
    3860:	00004fa4 	.word	0x00004fa4
    3864:	fffffc0d 	.word	0xfffffc0d
    3868:	800fffff 	.word	0x800fffff
    386c:	45d9      	cmp	r9, fp
    386e:	d900      	bls.n	3872 <__aeabi_ddiv+0x1fe>
    3870:	e139      	b.n	3ae6 <__aeabi_ddiv+0x472>
    3872:	d100      	bne.n	3876 <__aeabi_ddiv+0x202>
    3874:	e134      	b.n	3ae0 <__aeabi_ddiv+0x46c>
    3876:	2300      	movs	r3, #0
    3878:	4646      	mov	r6, r8
    387a:	464d      	mov	r5, r9
    387c:	469a      	mov	sl, r3
    387e:	3c01      	subs	r4, #1
    3880:	465b      	mov	r3, fp
    3882:	0e0a      	lsrs	r2, r1, #24
    3884:	021b      	lsls	r3, r3, #8
    3886:	431a      	orrs	r2, r3
    3888:	020b      	lsls	r3, r1, #8
    388a:	0c17      	lsrs	r7, r2, #16
    388c:	9303      	str	r3, [sp, #12]
    388e:	0413      	lsls	r3, r2, #16
    3890:	0c1b      	lsrs	r3, r3, #16
    3892:	0039      	movs	r1, r7
    3894:	0028      	movs	r0, r5
    3896:	4690      	mov	r8, r2
    3898:	9301      	str	r3, [sp, #4]
    389a:	f7ff faf3 	bl	2e84 <__udivsi3>
    389e:	0002      	movs	r2, r0
    38a0:	9b01      	ldr	r3, [sp, #4]
    38a2:	4683      	mov	fp, r0
    38a4:	435a      	muls	r2, r3
    38a6:	0028      	movs	r0, r5
    38a8:	0039      	movs	r1, r7
    38aa:	4691      	mov	r9, r2
    38ac:	f7ff fb70 	bl	2f90 <__aeabi_uidivmod>
    38b0:	0c35      	lsrs	r5, r6, #16
    38b2:	0409      	lsls	r1, r1, #16
    38b4:	430d      	orrs	r5, r1
    38b6:	45a9      	cmp	r9, r5
    38b8:	d90d      	bls.n	38d6 <__aeabi_ddiv+0x262>
    38ba:	465b      	mov	r3, fp
    38bc:	4445      	add	r5, r8
    38be:	3b01      	subs	r3, #1
    38c0:	45a8      	cmp	r8, r5
    38c2:	d900      	bls.n	38c6 <__aeabi_ddiv+0x252>
    38c4:	e13a      	b.n	3b3c <__aeabi_ddiv+0x4c8>
    38c6:	45a9      	cmp	r9, r5
    38c8:	d800      	bhi.n	38cc <__aeabi_ddiv+0x258>
    38ca:	e137      	b.n	3b3c <__aeabi_ddiv+0x4c8>
    38cc:	2302      	movs	r3, #2
    38ce:	425b      	negs	r3, r3
    38d0:	469c      	mov	ip, r3
    38d2:	4445      	add	r5, r8
    38d4:	44e3      	add	fp, ip
    38d6:	464b      	mov	r3, r9
    38d8:	1aeb      	subs	r3, r5, r3
    38da:	0039      	movs	r1, r7
    38dc:	0018      	movs	r0, r3
    38de:	9304      	str	r3, [sp, #16]
    38e0:	f7ff fad0 	bl	2e84 <__udivsi3>
    38e4:	9b01      	ldr	r3, [sp, #4]
    38e6:	0005      	movs	r5, r0
    38e8:	4343      	muls	r3, r0
    38ea:	0039      	movs	r1, r7
    38ec:	9804      	ldr	r0, [sp, #16]
    38ee:	4699      	mov	r9, r3
    38f0:	f7ff fb4e 	bl	2f90 <__aeabi_uidivmod>
    38f4:	0433      	lsls	r3, r6, #16
    38f6:	0409      	lsls	r1, r1, #16
    38f8:	0c1b      	lsrs	r3, r3, #16
    38fa:	430b      	orrs	r3, r1
    38fc:	4599      	cmp	r9, r3
    38fe:	d909      	bls.n	3914 <__aeabi_ddiv+0x2a0>
    3900:	4443      	add	r3, r8
    3902:	1e6a      	subs	r2, r5, #1
    3904:	4598      	cmp	r8, r3
    3906:	d900      	bls.n	390a <__aeabi_ddiv+0x296>
    3908:	e11a      	b.n	3b40 <__aeabi_ddiv+0x4cc>
    390a:	4599      	cmp	r9, r3
    390c:	d800      	bhi.n	3910 <__aeabi_ddiv+0x29c>
    390e:	e117      	b.n	3b40 <__aeabi_ddiv+0x4cc>
    3910:	3d02      	subs	r5, #2
    3912:	4443      	add	r3, r8
    3914:	464a      	mov	r2, r9
    3916:	1a9b      	subs	r3, r3, r2
    3918:	465a      	mov	r2, fp
    391a:	0412      	lsls	r2, r2, #16
    391c:	432a      	orrs	r2, r5
    391e:	9903      	ldr	r1, [sp, #12]
    3920:	4693      	mov	fp, r2
    3922:	0c10      	lsrs	r0, r2, #16
    3924:	0c0a      	lsrs	r2, r1, #16
    3926:	4691      	mov	r9, r2
    3928:	0409      	lsls	r1, r1, #16
    392a:	465a      	mov	r2, fp
    392c:	0c09      	lsrs	r1, r1, #16
    392e:	464e      	mov	r6, r9
    3930:	000d      	movs	r5, r1
    3932:	0412      	lsls	r2, r2, #16
    3934:	0c12      	lsrs	r2, r2, #16
    3936:	4345      	muls	r5, r0
    3938:	9105      	str	r1, [sp, #20]
    393a:	4351      	muls	r1, r2
    393c:	4372      	muls	r2, r6
    393e:	4370      	muls	r0, r6
    3940:	1952      	adds	r2, r2, r5
    3942:	0c0e      	lsrs	r6, r1, #16
    3944:	18b2      	adds	r2, r6, r2
    3946:	4295      	cmp	r5, r2
    3948:	d903      	bls.n	3952 <__aeabi_ddiv+0x2de>
    394a:	2580      	movs	r5, #128	; 0x80
    394c:	026d      	lsls	r5, r5, #9
    394e:	46ac      	mov	ip, r5
    3950:	4460      	add	r0, ip
    3952:	0c15      	lsrs	r5, r2, #16
    3954:	0409      	lsls	r1, r1, #16
    3956:	0412      	lsls	r2, r2, #16
    3958:	0c09      	lsrs	r1, r1, #16
    395a:	1828      	adds	r0, r5, r0
    395c:	1852      	adds	r2, r2, r1
    395e:	4283      	cmp	r3, r0
    3960:	d200      	bcs.n	3964 <__aeabi_ddiv+0x2f0>
    3962:	e0ce      	b.n	3b02 <__aeabi_ddiv+0x48e>
    3964:	d100      	bne.n	3968 <__aeabi_ddiv+0x2f4>
    3966:	e0c8      	b.n	3afa <__aeabi_ddiv+0x486>
    3968:	1a1d      	subs	r5, r3, r0
    396a:	4653      	mov	r3, sl
    396c:	1a9e      	subs	r6, r3, r2
    396e:	45b2      	cmp	sl, r6
    3970:	4192      	sbcs	r2, r2
    3972:	4252      	negs	r2, r2
    3974:	1aab      	subs	r3, r5, r2
    3976:	469a      	mov	sl, r3
    3978:	4598      	cmp	r8, r3
    397a:	d100      	bne.n	397e <__aeabi_ddiv+0x30a>
    397c:	e117      	b.n	3bae <__aeabi_ddiv+0x53a>
    397e:	0039      	movs	r1, r7
    3980:	0018      	movs	r0, r3
    3982:	f7ff fa7f 	bl	2e84 <__udivsi3>
    3986:	9b01      	ldr	r3, [sp, #4]
    3988:	0005      	movs	r5, r0
    398a:	4343      	muls	r3, r0
    398c:	0039      	movs	r1, r7
    398e:	4650      	mov	r0, sl
    3990:	9304      	str	r3, [sp, #16]
    3992:	f7ff fafd 	bl	2f90 <__aeabi_uidivmod>
    3996:	9804      	ldr	r0, [sp, #16]
    3998:	040b      	lsls	r3, r1, #16
    399a:	0c31      	lsrs	r1, r6, #16
    399c:	4319      	orrs	r1, r3
    399e:	4288      	cmp	r0, r1
    39a0:	d909      	bls.n	39b6 <__aeabi_ddiv+0x342>
    39a2:	4441      	add	r1, r8
    39a4:	1e6b      	subs	r3, r5, #1
    39a6:	4588      	cmp	r8, r1
    39a8:	d900      	bls.n	39ac <__aeabi_ddiv+0x338>
    39aa:	e107      	b.n	3bbc <__aeabi_ddiv+0x548>
    39ac:	4288      	cmp	r0, r1
    39ae:	d800      	bhi.n	39b2 <__aeabi_ddiv+0x33e>
    39b0:	e104      	b.n	3bbc <__aeabi_ddiv+0x548>
    39b2:	3d02      	subs	r5, #2
    39b4:	4441      	add	r1, r8
    39b6:	9b04      	ldr	r3, [sp, #16]
    39b8:	1acb      	subs	r3, r1, r3
    39ba:	0018      	movs	r0, r3
    39bc:	0039      	movs	r1, r7
    39be:	9304      	str	r3, [sp, #16]
    39c0:	f7ff fa60 	bl	2e84 <__udivsi3>
    39c4:	9b01      	ldr	r3, [sp, #4]
    39c6:	4682      	mov	sl, r0
    39c8:	4343      	muls	r3, r0
    39ca:	0039      	movs	r1, r7
    39cc:	9804      	ldr	r0, [sp, #16]
    39ce:	9301      	str	r3, [sp, #4]
    39d0:	f7ff fade 	bl	2f90 <__aeabi_uidivmod>
    39d4:	9801      	ldr	r0, [sp, #4]
    39d6:	040b      	lsls	r3, r1, #16
    39d8:	0431      	lsls	r1, r6, #16
    39da:	0c09      	lsrs	r1, r1, #16
    39dc:	4319      	orrs	r1, r3
    39de:	4288      	cmp	r0, r1
    39e0:	d90d      	bls.n	39fe <__aeabi_ddiv+0x38a>
    39e2:	4653      	mov	r3, sl
    39e4:	4441      	add	r1, r8
    39e6:	3b01      	subs	r3, #1
    39e8:	4588      	cmp	r8, r1
    39ea:	d900      	bls.n	39ee <__aeabi_ddiv+0x37a>
    39ec:	e0e8      	b.n	3bc0 <__aeabi_ddiv+0x54c>
    39ee:	4288      	cmp	r0, r1
    39f0:	d800      	bhi.n	39f4 <__aeabi_ddiv+0x380>
    39f2:	e0e5      	b.n	3bc0 <__aeabi_ddiv+0x54c>
    39f4:	2302      	movs	r3, #2
    39f6:	425b      	negs	r3, r3
    39f8:	469c      	mov	ip, r3
    39fa:	4441      	add	r1, r8
    39fc:	44e2      	add	sl, ip
    39fe:	9b01      	ldr	r3, [sp, #4]
    3a00:	042d      	lsls	r5, r5, #16
    3a02:	1ace      	subs	r6, r1, r3
    3a04:	4651      	mov	r1, sl
    3a06:	4329      	orrs	r1, r5
    3a08:	9d05      	ldr	r5, [sp, #20]
    3a0a:	464f      	mov	r7, r9
    3a0c:	002a      	movs	r2, r5
    3a0e:	040b      	lsls	r3, r1, #16
    3a10:	0c08      	lsrs	r0, r1, #16
    3a12:	0c1b      	lsrs	r3, r3, #16
    3a14:	435a      	muls	r2, r3
    3a16:	4345      	muls	r5, r0
    3a18:	437b      	muls	r3, r7
    3a1a:	4378      	muls	r0, r7
    3a1c:	195b      	adds	r3, r3, r5
    3a1e:	0c17      	lsrs	r7, r2, #16
    3a20:	18fb      	adds	r3, r7, r3
    3a22:	429d      	cmp	r5, r3
    3a24:	d903      	bls.n	3a2e <__aeabi_ddiv+0x3ba>
    3a26:	2580      	movs	r5, #128	; 0x80
    3a28:	026d      	lsls	r5, r5, #9
    3a2a:	46ac      	mov	ip, r5
    3a2c:	4460      	add	r0, ip
    3a2e:	0c1d      	lsrs	r5, r3, #16
    3a30:	0412      	lsls	r2, r2, #16
    3a32:	041b      	lsls	r3, r3, #16
    3a34:	0c12      	lsrs	r2, r2, #16
    3a36:	1828      	adds	r0, r5, r0
    3a38:	189b      	adds	r3, r3, r2
    3a3a:	4286      	cmp	r6, r0
    3a3c:	d200      	bcs.n	3a40 <__aeabi_ddiv+0x3cc>
    3a3e:	e093      	b.n	3b68 <__aeabi_ddiv+0x4f4>
    3a40:	d100      	bne.n	3a44 <__aeabi_ddiv+0x3d0>
    3a42:	e08e      	b.n	3b62 <__aeabi_ddiv+0x4ee>
    3a44:	2301      	movs	r3, #1
    3a46:	4319      	orrs	r1, r3
    3a48:	4ba0      	ldr	r3, [pc, #640]	; (3ccc <__aeabi_ddiv+0x658>)
    3a4a:	18e3      	adds	r3, r4, r3
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	dc00      	bgt.n	3a52 <__aeabi_ddiv+0x3de>
    3a50:	e099      	b.n	3b86 <__aeabi_ddiv+0x512>
    3a52:	074a      	lsls	r2, r1, #29
    3a54:	d000      	beq.n	3a58 <__aeabi_ddiv+0x3e4>
    3a56:	e09e      	b.n	3b96 <__aeabi_ddiv+0x522>
    3a58:	465a      	mov	r2, fp
    3a5a:	01d2      	lsls	r2, r2, #7
    3a5c:	d506      	bpl.n	3a6c <__aeabi_ddiv+0x3f8>
    3a5e:	465a      	mov	r2, fp
    3a60:	4b9b      	ldr	r3, [pc, #620]	; (3cd0 <__aeabi_ddiv+0x65c>)
    3a62:	401a      	ands	r2, r3
    3a64:	2380      	movs	r3, #128	; 0x80
    3a66:	4693      	mov	fp, r2
    3a68:	00db      	lsls	r3, r3, #3
    3a6a:	18e3      	adds	r3, r4, r3
    3a6c:	4a99      	ldr	r2, [pc, #612]	; (3cd4 <__aeabi_ddiv+0x660>)
    3a6e:	4293      	cmp	r3, r2
    3a70:	dd68      	ble.n	3b44 <__aeabi_ddiv+0x4d0>
    3a72:	2301      	movs	r3, #1
    3a74:	9a02      	ldr	r2, [sp, #8]
    3a76:	4c98      	ldr	r4, [pc, #608]	; (3cd8 <__aeabi_ddiv+0x664>)
    3a78:	401a      	ands	r2, r3
    3a7a:	2300      	movs	r3, #0
    3a7c:	4694      	mov	ip, r2
    3a7e:	4698      	mov	r8, r3
    3a80:	2200      	movs	r2, #0
    3a82:	e6c5      	b.n	3810 <__aeabi_ddiv+0x19c>
    3a84:	2280      	movs	r2, #128	; 0x80
    3a86:	464b      	mov	r3, r9
    3a88:	0312      	lsls	r2, r2, #12
    3a8a:	4213      	tst	r3, r2
    3a8c:	d00a      	beq.n	3aa4 <__aeabi_ddiv+0x430>
    3a8e:	465b      	mov	r3, fp
    3a90:	4213      	tst	r3, r2
    3a92:	d106      	bne.n	3aa2 <__aeabi_ddiv+0x42e>
    3a94:	431a      	orrs	r2, r3
    3a96:	0312      	lsls	r2, r2, #12
    3a98:	0b12      	lsrs	r2, r2, #12
    3a9a:	46ac      	mov	ip, r5
    3a9c:	4688      	mov	r8, r1
    3a9e:	4c8e      	ldr	r4, [pc, #568]	; (3cd8 <__aeabi_ddiv+0x664>)
    3aa0:	e6b6      	b.n	3810 <__aeabi_ddiv+0x19c>
    3aa2:	464b      	mov	r3, r9
    3aa4:	431a      	orrs	r2, r3
    3aa6:	0312      	lsls	r2, r2, #12
    3aa8:	0b12      	lsrs	r2, r2, #12
    3aaa:	46bc      	mov	ip, r7
    3aac:	4c8a      	ldr	r4, [pc, #552]	; (3cd8 <__aeabi_ddiv+0x664>)
    3aae:	e6af      	b.n	3810 <__aeabi_ddiv+0x19c>
    3ab0:	0003      	movs	r3, r0
    3ab2:	465a      	mov	r2, fp
    3ab4:	3b28      	subs	r3, #40	; 0x28
    3ab6:	409a      	lsls	r2, r3
    3ab8:	2300      	movs	r3, #0
    3aba:	4691      	mov	r9, r2
    3abc:	4698      	mov	r8, r3
    3abe:	e657      	b.n	3770 <__aeabi_ddiv+0xfc>
    3ac0:	4658      	mov	r0, fp
    3ac2:	f001 f86f 	bl	4ba4 <__clzsi2>
    3ac6:	3020      	adds	r0, #32
    3ac8:	e640      	b.n	374c <__aeabi_ddiv+0xd8>
    3aca:	0003      	movs	r3, r0
    3acc:	4652      	mov	r2, sl
    3ace:	3b28      	subs	r3, #40	; 0x28
    3ad0:	409a      	lsls	r2, r3
    3ad2:	2100      	movs	r1, #0
    3ad4:	4693      	mov	fp, r2
    3ad6:	e677      	b.n	37c8 <__aeabi_ddiv+0x154>
    3ad8:	f001 f864 	bl	4ba4 <__clzsi2>
    3adc:	3020      	adds	r0, #32
    3ade:	e65f      	b.n	37a0 <__aeabi_ddiv+0x12c>
    3ae0:	4588      	cmp	r8, r1
    3ae2:	d200      	bcs.n	3ae6 <__aeabi_ddiv+0x472>
    3ae4:	e6c7      	b.n	3876 <__aeabi_ddiv+0x202>
    3ae6:	464b      	mov	r3, r9
    3ae8:	07de      	lsls	r6, r3, #31
    3aea:	085d      	lsrs	r5, r3, #1
    3aec:	4643      	mov	r3, r8
    3aee:	085b      	lsrs	r3, r3, #1
    3af0:	431e      	orrs	r6, r3
    3af2:	4643      	mov	r3, r8
    3af4:	07db      	lsls	r3, r3, #31
    3af6:	469a      	mov	sl, r3
    3af8:	e6c2      	b.n	3880 <__aeabi_ddiv+0x20c>
    3afa:	2500      	movs	r5, #0
    3afc:	4592      	cmp	sl, r2
    3afe:	d300      	bcc.n	3b02 <__aeabi_ddiv+0x48e>
    3b00:	e733      	b.n	396a <__aeabi_ddiv+0x2f6>
    3b02:	9e03      	ldr	r6, [sp, #12]
    3b04:	4659      	mov	r1, fp
    3b06:	46b4      	mov	ip, r6
    3b08:	44e2      	add	sl, ip
    3b0a:	45b2      	cmp	sl, r6
    3b0c:	41ad      	sbcs	r5, r5
    3b0e:	426d      	negs	r5, r5
    3b10:	4445      	add	r5, r8
    3b12:	18eb      	adds	r3, r5, r3
    3b14:	3901      	subs	r1, #1
    3b16:	4598      	cmp	r8, r3
    3b18:	d207      	bcs.n	3b2a <__aeabi_ddiv+0x4b6>
    3b1a:	4298      	cmp	r0, r3
    3b1c:	d900      	bls.n	3b20 <__aeabi_ddiv+0x4ac>
    3b1e:	e07f      	b.n	3c20 <__aeabi_ddiv+0x5ac>
    3b20:	d100      	bne.n	3b24 <__aeabi_ddiv+0x4b0>
    3b22:	e0bc      	b.n	3c9e <__aeabi_ddiv+0x62a>
    3b24:	1a1d      	subs	r5, r3, r0
    3b26:	468b      	mov	fp, r1
    3b28:	e71f      	b.n	396a <__aeabi_ddiv+0x2f6>
    3b2a:	4598      	cmp	r8, r3
    3b2c:	d1fa      	bne.n	3b24 <__aeabi_ddiv+0x4b0>
    3b2e:	9d03      	ldr	r5, [sp, #12]
    3b30:	4555      	cmp	r5, sl
    3b32:	d9f2      	bls.n	3b1a <__aeabi_ddiv+0x4a6>
    3b34:	4643      	mov	r3, r8
    3b36:	468b      	mov	fp, r1
    3b38:	1a1d      	subs	r5, r3, r0
    3b3a:	e716      	b.n	396a <__aeabi_ddiv+0x2f6>
    3b3c:	469b      	mov	fp, r3
    3b3e:	e6ca      	b.n	38d6 <__aeabi_ddiv+0x262>
    3b40:	0015      	movs	r5, r2
    3b42:	e6e7      	b.n	3914 <__aeabi_ddiv+0x2a0>
    3b44:	465a      	mov	r2, fp
    3b46:	08c9      	lsrs	r1, r1, #3
    3b48:	0752      	lsls	r2, r2, #29
    3b4a:	430a      	orrs	r2, r1
    3b4c:	055b      	lsls	r3, r3, #21
    3b4e:	4690      	mov	r8, r2
    3b50:	0d5c      	lsrs	r4, r3, #21
    3b52:	465a      	mov	r2, fp
    3b54:	2301      	movs	r3, #1
    3b56:	9902      	ldr	r1, [sp, #8]
    3b58:	0252      	lsls	r2, r2, #9
    3b5a:	4019      	ands	r1, r3
    3b5c:	0b12      	lsrs	r2, r2, #12
    3b5e:	468c      	mov	ip, r1
    3b60:	e656      	b.n	3810 <__aeabi_ddiv+0x19c>
    3b62:	2b00      	cmp	r3, #0
    3b64:	d100      	bne.n	3b68 <__aeabi_ddiv+0x4f4>
    3b66:	e76f      	b.n	3a48 <__aeabi_ddiv+0x3d4>
    3b68:	4446      	add	r6, r8
    3b6a:	1e4a      	subs	r2, r1, #1
    3b6c:	45b0      	cmp	r8, r6
    3b6e:	d929      	bls.n	3bc4 <__aeabi_ddiv+0x550>
    3b70:	0011      	movs	r1, r2
    3b72:	4286      	cmp	r6, r0
    3b74:	d000      	beq.n	3b78 <__aeabi_ddiv+0x504>
    3b76:	e765      	b.n	3a44 <__aeabi_ddiv+0x3d0>
    3b78:	9a03      	ldr	r2, [sp, #12]
    3b7a:	4293      	cmp	r3, r2
    3b7c:	d000      	beq.n	3b80 <__aeabi_ddiv+0x50c>
    3b7e:	e761      	b.n	3a44 <__aeabi_ddiv+0x3d0>
    3b80:	e762      	b.n	3a48 <__aeabi_ddiv+0x3d4>
    3b82:	2101      	movs	r1, #1
    3b84:	4249      	negs	r1, r1
    3b86:	2001      	movs	r0, #1
    3b88:	1ac2      	subs	r2, r0, r3
    3b8a:	2a38      	cmp	r2, #56	; 0x38
    3b8c:	dd21      	ble.n	3bd2 <__aeabi_ddiv+0x55e>
    3b8e:	9b02      	ldr	r3, [sp, #8]
    3b90:	4003      	ands	r3, r0
    3b92:	469c      	mov	ip, r3
    3b94:	e638      	b.n	3808 <__aeabi_ddiv+0x194>
    3b96:	220f      	movs	r2, #15
    3b98:	400a      	ands	r2, r1
    3b9a:	2a04      	cmp	r2, #4
    3b9c:	d100      	bne.n	3ba0 <__aeabi_ddiv+0x52c>
    3b9e:	e75b      	b.n	3a58 <__aeabi_ddiv+0x3e4>
    3ba0:	000a      	movs	r2, r1
    3ba2:	1d11      	adds	r1, r2, #4
    3ba4:	4291      	cmp	r1, r2
    3ba6:	4192      	sbcs	r2, r2
    3ba8:	4252      	negs	r2, r2
    3baa:	4493      	add	fp, r2
    3bac:	e754      	b.n	3a58 <__aeabi_ddiv+0x3e4>
    3bae:	4b47      	ldr	r3, [pc, #284]	; (3ccc <__aeabi_ddiv+0x658>)
    3bb0:	18e3      	adds	r3, r4, r3
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	dde5      	ble.n	3b82 <__aeabi_ddiv+0x50e>
    3bb6:	2201      	movs	r2, #1
    3bb8:	4252      	negs	r2, r2
    3bba:	e7f2      	b.n	3ba2 <__aeabi_ddiv+0x52e>
    3bbc:	001d      	movs	r5, r3
    3bbe:	e6fa      	b.n	39b6 <__aeabi_ddiv+0x342>
    3bc0:	469a      	mov	sl, r3
    3bc2:	e71c      	b.n	39fe <__aeabi_ddiv+0x38a>
    3bc4:	42b0      	cmp	r0, r6
    3bc6:	d839      	bhi.n	3c3c <__aeabi_ddiv+0x5c8>
    3bc8:	d06e      	beq.n	3ca8 <__aeabi_ddiv+0x634>
    3bca:	0011      	movs	r1, r2
    3bcc:	e73a      	b.n	3a44 <__aeabi_ddiv+0x3d0>
    3bce:	9302      	str	r3, [sp, #8]
    3bd0:	e73a      	b.n	3a48 <__aeabi_ddiv+0x3d4>
    3bd2:	2a1f      	cmp	r2, #31
    3bd4:	dc3c      	bgt.n	3c50 <__aeabi_ddiv+0x5dc>
    3bd6:	2320      	movs	r3, #32
    3bd8:	1a9b      	subs	r3, r3, r2
    3bda:	000c      	movs	r4, r1
    3bdc:	4658      	mov	r0, fp
    3bde:	4099      	lsls	r1, r3
    3be0:	4098      	lsls	r0, r3
    3be2:	1e4b      	subs	r3, r1, #1
    3be4:	4199      	sbcs	r1, r3
    3be6:	465b      	mov	r3, fp
    3be8:	40d4      	lsrs	r4, r2
    3bea:	40d3      	lsrs	r3, r2
    3bec:	4320      	orrs	r0, r4
    3bee:	4308      	orrs	r0, r1
    3bf0:	001a      	movs	r2, r3
    3bf2:	0743      	lsls	r3, r0, #29
    3bf4:	d009      	beq.n	3c0a <__aeabi_ddiv+0x596>
    3bf6:	230f      	movs	r3, #15
    3bf8:	4003      	ands	r3, r0
    3bfa:	2b04      	cmp	r3, #4
    3bfc:	d005      	beq.n	3c0a <__aeabi_ddiv+0x596>
    3bfe:	0001      	movs	r1, r0
    3c00:	1d08      	adds	r0, r1, #4
    3c02:	4288      	cmp	r0, r1
    3c04:	419b      	sbcs	r3, r3
    3c06:	425b      	negs	r3, r3
    3c08:	18d2      	adds	r2, r2, r3
    3c0a:	0213      	lsls	r3, r2, #8
    3c0c:	d53a      	bpl.n	3c84 <__aeabi_ddiv+0x610>
    3c0e:	2301      	movs	r3, #1
    3c10:	9a02      	ldr	r2, [sp, #8]
    3c12:	2401      	movs	r4, #1
    3c14:	401a      	ands	r2, r3
    3c16:	2300      	movs	r3, #0
    3c18:	4694      	mov	ip, r2
    3c1a:	4698      	mov	r8, r3
    3c1c:	2200      	movs	r2, #0
    3c1e:	e5f7      	b.n	3810 <__aeabi_ddiv+0x19c>
    3c20:	2102      	movs	r1, #2
    3c22:	4249      	negs	r1, r1
    3c24:	468c      	mov	ip, r1
    3c26:	9d03      	ldr	r5, [sp, #12]
    3c28:	44e3      	add	fp, ip
    3c2a:	46ac      	mov	ip, r5
    3c2c:	44e2      	add	sl, ip
    3c2e:	45aa      	cmp	sl, r5
    3c30:	41ad      	sbcs	r5, r5
    3c32:	426d      	negs	r5, r5
    3c34:	4445      	add	r5, r8
    3c36:	18ed      	adds	r5, r5, r3
    3c38:	1a2d      	subs	r5, r5, r0
    3c3a:	e696      	b.n	396a <__aeabi_ddiv+0x2f6>
    3c3c:	1e8a      	subs	r2, r1, #2
    3c3e:	9903      	ldr	r1, [sp, #12]
    3c40:	004d      	lsls	r5, r1, #1
    3c42:	428d      	cmp	r5, r1
    3c44:	4189      	sbcs	r1, r1
    3c46:	4249      	negs	r1, r1
    3c48:	4441      	add	r1, r8
    3c4a:	1876      	adds	r6, r6, r1
    3c4c:	9503      	str	r5, [sp, #12]
    3c4e:	e78f      	b.n	3b70 <__aeabi_ddiv+0x4fc>
    3c50:	201f      	movs	r0, #31
    3c52:	4240      	negs	r0, r0
    3c54:	1ac3      	subs	r3, r0, r3
    3c56:	4658      	mov	r0, fp
    3c58:	40d8      	lsrs	r0, r3
    3c5a:	0003      	movs	r3, r0
    3c5c:	2a20      	cmp	r2, #32
    3c5e:	d028      	beq.n	3cb2 <__aeabi_ddiv+0x63e>
    3c60:	2040      	movs	r0, #64	; 0x40
    3c62:	465d      	mov	r5, fp
    3c64:	1a82      	subs	r2, r0, r2
    3c66:	4095      	lsls	r5, r2
    3c68:	4329      	orrs	r1, r5
    3c6a:	1e4a      	subs	r2, r1, #1
    3c6c:	4191      	sbcs	r1, r2
    3c6e:	4319      	orrs	r1, r3
    3c70:	2307      	movs	r3, #7
    3c72:	2200      	movs	r2, #0
    3c74:	400b      	ands	r3, r1
    3c76:	d009      	beq.n	3c8c <__aeabi_ddiv+0x618>
    3c78:	230f      	movs	r3, #15
    3c7a:	2200      	movs	r2, #0
    3c7c:	400b      	ands	r3, r1
    3c7e:	0008      	movs	r0, r1
    3c80:	2b04      	cmp	r3, #4
    3c82:	d1bd      	bne.n	3c00 <__aeabi_ddiv+0x58c>
    3c84:	0001      	movs	r1, r0
    3c86:	0753      	lsls	r3, r2, #29
    3c88:	0252      	lsls	r2, r2, #9
    3c8a:	0b12      	lsrs	r2, r2, #12
    3c8c:	08c9      	lsrs	r1, r1, #3
    3c8e:	4319      	orrs	r1, r3
    3c90:	2301      	movs	r3, #1
    3c92:	4688      	mov	r8, r1
    3c94:	9902      	ldr	r1, [sp, #8]
    3c96:	2400      	movs	r4, #0
    3c98:	4019      	ands	r1, r3
    3c9a:	468c      	mov	ip, r1
    3c9c:	e5b8      	b.n	3810 <__aeabi_ddiv+0x19c>
    3c9e:	4552      	cmp	r2, sl
    3ca0:	d8be      	bhi.n	3c20 <__aeabi_ddiv+0x5ac>
    3ca2:	468b      	mov	fp, r1
    3ca4:	2500      	movs	r5, #0
    3ca6:	e660      	b.n	396a <__aeabi_ddiv+0x2f6>
    3ca8:	9d03      	ldr	r5, [sp, #12]
    3caa:	429d      	cmp	r5, r3
    3cac:	d3c6      	bcc.n	3c3c <__aeabi_ddiv+0x5c8>
    3cae:	0011      	movs	r1, r2
    3cb0:	e762      	b.n	3b78 <__aeabi_ddiv+0x504>
    3cb2:	2500      	movs	r5, #0
    3cb4:	e7d8      	b.n	3c68 <__aeabi_ddiv+0x5f4>
    3cb6:	2280      	movs	r2, #128	; 0x80
    3cb8:	465b      	mov	r3, fp
    3cba:	0312      	lsls	r2, r2, #12
    3cbc:	431a      	orrs	r2, r3
    3cbe:	9b01      	ldr	r3, [sp, #4]
    3cc0:	0312      	lsls	r2, r2, #12
    3cc2:	0b12      	lsrs	r2, r2, #12
    3cc4:	469c      	mov	ip, r3
    3cc6:	4688      	mov	r8, r1
    3cc8:	4c03      	ldr	r4, [pc, #12]	; (3cd8 <__aeabi_ddiv+0x664>)
    3cca:	e5a1      	b.n	3810 <__aeabi_ddiv+0x19c>
    3ccc:	000003ff 	.word	0x000003ff
    3cd0:	feffffff 	.word	0xfeffffff
    3cd4:	000007fe 	.word	0x000007fe
    3cd8:	000007ff 	.word	0x000007ff

00003cdc <__eqdf2>:
    3cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cde:	464f      	mov	r7, r9
    3ce0:	4646      	mov	r6, r8
    3ce2:	46d6      	mov	lr, sl
    3ce4:	005c      	lsls	r4, r3, #1
    3ce6:	b5c0      	push	{r6, r7, lr}
    3ce8:	031f      	lsls	r7, r3, #12
    3cea:	0fdb      	lsrs	r3, r3, #31
    3cec:	469a      	mov	sl, r3
    3cee:	4b17      	ldr	r3, [pc, #92]	; (3d4c <__eqdf2+0x70>)
    3cf0:	030e      	lsls	r6, r1, #12
    3cf2:	004d      	lsls	r5, r1, #1
    3cf4:	4684      	mov	ip, r0
    3cf6:	4680      	mov	r8, r0
    3cf8:	0b36      	lsrs	r6, r6, #12
    3cfa:	0d6d      	lsrs	r5, r5, #21
    3cfc:	0fc9      	lsrs	r1, r1, #31
    3cfe:	4691      	mov	r9, r2
    3d00:	0b3f      	lsrs	r7, r7, #12
    3d02:	0d64      	lsrs	r4, r4, #21
    3d04:	2001      	movs	r0, #1
    3d06:	429d      	cmp	r5, r3
    3d08:	d008      	beq.n	3d1c <__eqdf2+0x40>
    3d0a:	429c      	cmp	r4, r3
    3d0c:	d001      	beq.n	3d12 <__eqdf2+0x36>
    3d0e:	42a5      	cmp	r5, r4
    3d10:	d00b      	beq.n	3d2a <__eqdf2+0x4e>
    3d12:	bc1c      	pop	{r2, r3, r4}
    3d14:	4690      	mov	r8, r2
    3d16:	4699      	mov	r9, r3
    3d18:	46a2      	mov	sl, r4
    3d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d1c:	4663      	mov	r3, ip
    3d1e:	4333      	orrs	r3, r6
    3d20:	d1f7      	bne.n	3d12 <__eqdf2+0x36>
    3d22:	42ac      	cmp	r4, r5
    3d24:	d1f5      	bne.n	3d12 <__eqdf2+0x36>
    3d26:	433a      	orrs	r2, r7
    3d28:	d1f3      	bne.n	3d12 <__eqdf2+0x36>
    3d2a:	2001      	movs	r0, #1
    3d2c:	42be      	cmp	r6, r7
    3d2e:	d1f0      	bne.n	3d12 <__eqdf2+0x36>
    3d30:	45c8      	cmp	r8, r9
    3d32:	d1ee      	bne.n	3d12 <__eqdf2+0x36>
    3d34:	4551      	cmp	r1, sl
    3d36:	d007      	beq.n	3d48 <__eqdf2+0x6c>
    3d38:	2d00      	cmp	r5, #0
    3d3a:	d1ea      	bne.n	3d12 <__eqdf2+0x36>
    3d3c:	4663      	mov	r3, ip
    3d3e:	431e      	orrs	r6, r3
    3d40:	0030      	movs	r0, r6
    3d42:	1e46      	subs	r6, r0, #1
    3d44:	41b0      	sbcs	r0, r6
    3d46:	e7e4      	b.n	3d12 <__eqdf2+0x36>
    3d48:	2000      	movs	r0, #0
    3d4a:	e7e2      	b.n	3d12 <__eqdf2+0x36>
    3d4c:	000007ff 	.word	0x000007ff

00003d50 <__gedf2>:
    3d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d52:	4645      	mov	r5, r8
    3d54:	46de      	mov	lr, fp
    3d56:	4657      	mov	r7, sl
    3d58:	464e      	mov	r6, r9
    3d5a:	b5e0      	push	{r5, r6, r7, lr}
    3d5c:	031f      	lsls	r7, r3, #12
    3d5e:	0b3d      	lsrs	r5, r7, #12
    3d60:	4f2c      	ldr	r7, [pc, #176]	; (3e14 <__gedf2+0xc4>)
    3d62:	030e      	lsls	r6, r1, #12
    3d64:	004c      	lsls	r4, r1, #1
    3d66:	46ab      	mov	fp, r5
    3d68:	005d      	lsls	r5, r3, #1
    3d6a:	4684      	mov	ip, r0
    3d6c:	0b36      	lsrs	r6, r6, #12
    3d6e:	0d64      	lsrs	r4, r4, #21
    3d70:	0fc9      	lsrs	r1, r1, #31
    3d72:	4690      	mov	r8, r2
    3d74:	0d6d      	lsrs	r5, r5, #21
    3d76:	0fdb      	lsrs	r3, r3, #31
    3d78:	42bc      	cmp	r4, r7
    3d7a:	d02a      	beq.n	3dd2 <__gedf2+0x82>
    3d7c:	4f25      	ldr	r7, [pc, #148]	; (3e14 <__gedf2+0xc4>)
    3d7e:	42bd      	cmp	r5, r7
    3d80:	d02d      	beq.n	3dde <__gedf2+0x8e>
    3d82:	2c00      	cmp	r4, #0
    3d84:	d10f      	bne.n	3da6 <__gedf2+0x56>
    3d86:	4330      	orrs	r0, r6
    3d88:	0007      	movs	r7, r0
    3d8a:	4681      	mov	r9, r0
    3d8c:	4278      	negs	r0, r7
    3d8e:	4178      	adcs	r0, r7
    3d90:	b2c0      	uxtb	r0, r0
    3d92:	2d00      	cmp	r5, #0
    3d94:	d117      	bne.n	3dc6 <__gedf2+0x76>
    3d96:	465f      	mov	r7, fp
    3d98:	433a      	orrs	r2, r7
    3d9a:	d114      	bne.n	3dc6 <__gedf2+0x76>
    3d9c:	464b      	mov	r3, r9
    3d9e:	2000      	movs	r0, #0
    3da0:	2b00      	cmp	r3, #0
    3da2:	d00a      	beq.n	3dba <__gedf2+0x6a>
    3da4:	e006      	b.n	3db4 <__gedf2+0x64>
    3da6:	2d00      	cmp	r5, #0
    3da8:	d102      	bne.n	3db0 <__gedf2+0x60>
    3daa:	4658      	mov	r0, fp
    3dac:	4302      	orrs	r2, r0
    3dae:	d001      	beq.n	3db4 <__gedf2+0x64>
    3db0:	4299      	cmp	r1, r3
    3db2:	d018      	beq.n	3de6 <__gedf2+0x96>
    3db4:	4248      	negs	r0, r1
    3db6:	2101      	movs	r1, #1
    3db8:	4308      	orrs	r0, r1
    3dba:	bc3c      	pop	{r2, r3, r4, r5}
    3dbc:	4690      	mov	r8, r2
    3dbe:	4699      	mov	r9, r3
    3dc0:	46a2      	mov	sl, r4
    3dc2:	46ab      	mov	fp, r5
    3dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dc6:	2800      	cmp	r0, #0
    3dc8:	d0f2      	beq.n	3db0 <__gedf2+0x60>
    3dca:	2001      	movs	r0, #1
    3dcc:	3b01      	subs	r3, #1
    3dce:	4318      	orrs	r0, r3
    3dd0:	e7f3      	b.n	3dba <__gedf2+0x6a>
    3dd2:	0037      	movs	r7, r6
    3dd4:	4307      	orrs	r7, r0
    3dd6:	d0d1      	beq.n	3d7c <__gedf2+0x2c>
    3dd8:	2002      	movs	r0, #2
    3dda:	4240      	negs	r0, r0
    3ddc:	e7ed      	b.n	3dba <__gedf2+0x6a>
    3dde:	465f      	mov	r7, fp
    3de0:	4317      	orrs	r7, r2
    3de2:	d0ce      	beq.n	3d82 <__gedf2+0x32>
    3de4:	e7f8      	b.n	3dd8 <__gedf2+0x88>
    3de6:	42ac      	cmp	r4, r5
    3de8:	dce4      	bgt.n	3db4 <__gedf2+0x64>
    3dea:	da03      	bge.n	3df4 <__gedf2+0xa4>
    3dec:	1e48      	subs	r0, r1, #1
    3dee:	2101      	movs	r1, #1
    3df0:	4308      	orrs	r0, r1
    3df2:	e7e2      	b.n	3dba <__gedf2+0x6a>
    3df4:	455e      	cmp	r6, fp
    3df6:	d8dd      	bhi.n	3db4 <__gedf2+0x64>
    3df8:	d006      	beq.n	3e08 <__gedf2+0xb8>
    3dfa:	2000      	movs	r0, #0
    3dfc:	455e      	cmp	r6, fp
    3dfe:	d2dc      	bcs.n	3dba <__gedf2+0x6a>
    3e00:	2301      	movs	r3, #1
    3e02:	1e48      	subs	r0, r1, #1
    3e04:	4318      	orrs	r0, r3
    3e06:	e7d8      	b.n	3dba <__gedf2+0x6a>
    3e08:	45c4      	cmp	ip, r8
    3e0a:	d8d3      	bhi.n	3db4 <__gedf2+0x64>
    3e0c:	2000      	movs	r0, #0
    3e0e:	45c4      	cmp	ip, r8
    3e10:	d3f6      	bcc.n	3e00 <__gedf2+0xb0>
    3e12:	e7d2      	b.n	3dba <__gedf2+0x6a>
    3e14:	000007ff 	.word	0x000007ff

00003e18 <__ledf2>:
    3e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e1a:	464e      	mov	r6, r9
    3e1c:	4645      	mov	r5, r8
    3e1e:	46de      	mov	lr, fp
    3e20:	4657      	mov	r7, sl
    3e22:	005c      	lsls	r4, r3, #1
    3e24:	b5e0      	push	{r5, r6, r7, lr}
    3e26:	031f      	lsls	r7, r3, #12
    3e28:	0fdb      	lsrs	r3, r3, #31
    3e2a:	4699      	mov	r9, r3
    3e2c:	4b2a      	ldr	r3, [pc, #168]	; (3ed8 <__ledf2+0xc0>)
    3e2e:	030e      	lsls	r6, r1, #12
    3e30:	004d      	lsls	r5, r1, #1
    3e32:	0fc9      	lsrs	r1, r1, #31
    3e34:	4684      	mov	ip, r0
    3e36:	0b36      	lsrs	r6, r6, #12
    3e38:	0d6d      	lsrs	r5, r5, #21
    3e3a:	468b      	mov	fp, r1
    3e3c:	4690      	mov	r8, r2
    3e3e:	0b3f      	lsrs	r7, r7, #12
    3e40:	0d64      	lsrs	r4, r4, #21
    3e42:	429d      	cmp	r5, r3
    3e44:	d020      	beq.n	3e88 <__ledf2+0x70>
    3e46:	4b24      	ldr	r3, [pc, #144]	; (3ed8 <__ledf2+0xc0>)
    3e48:	429c      	cmp	r4, r3
    3e4a:	d022      	beq.n	3e92 <__ledf2+0x7a>
    3e4c:	2d00      	cmp	r5, #0
    3e4e:	d112      	bne.n	3e76 <__ledf2+0x5e>
    3e50:	4330      	orrs	r0, r6
    3e52:	4243      	negs	r3, r0
    3e54:	4143      	adcs	r3, r0
    3e56:	b2db      	uxtb	r3, r3
    3e58:	2c00      	cmp	r4, #0
    3e5a:	d01f      	beq.n	3e9c <__ledf2+0x84>
    3e5c:	2b00      	cmp	r3, #0
    3e5e:	d00c      	beq.n	3e7a <__ledf2+0x62>
    3e60:	464b      	mov	r3, r9
    3e62:	2001      	movs	r0, #1
    3e64:	3b01      	subs	r3, #1
    3e66:	4303      	orrs	r3, r0
    3e68:	0018      	movs	r0, r3
    3e6a:	bc3c      	pop	{r2, r3, r4, r5}
    3e6c:	4690      	mov	r8, r2
    3e6e:	4699      	mov	r9, r3
    3e70:	46a2      	mov	sl, r4
    3e72:	46ab      	mov	fp, r5
    3e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e76:	2c00      	cmp	r4, #0
    3e78:	d016      	beq.n	3ea8 <__ledf2+0x90>
    3e7a:	45cb      	cmp	fp, r9
    3e7c:	d017      	beq.n	3eae <__ledf2+0x96>
    3e7e:	465b      	mov	r3, fp
    3e80:	4259      	negs	r1, r3
    3e82:	2301      	movs	r3, #1
    3e84:	430b      	orrs	r3, r1
    3e86:	e7ef      	b.n	3e68 <__ledf2+0x50>
    3e88:	0031      	movs	r1, r6
    3e8a:	2302      	movs	r3, #2
    3e8c:	4301      	orrs	r1, r0
    3e8e:	d1eb      	bne.n	3e68 <__ledf2+0x50>
    3e90:	e7d9      	b.n	3e46 <__ledf2+0x2e>
    3e92:	0039      	movs	r1, r7
    3e94:	2302      	movs	r3, #2
    3e96:	4311      	orrs	r1, r2
    3e98:	d1e6      	bne.n	3e68 <__ledf2+0x50>
    3e9a:	e7d7      	b.n	3e4c <__ledf2+0x34>
    3e9c:	433a      	orrs	r2, r7
    3e9e:	d1dd      	bne.n	3e5c <__ledf2+0x44>
    3ea0:	2300      	movs	r3, #0
    3ea2:	2800      	cmp	r0, #0
    3ea4:	d0e0      	beq.n	3e68 <__ledf2+0x50>
    3ea6:	e7ea      	b.n	3e7e <__ledf2+0x66>
    3ea8:	433a      	orrs	r2, r7
    3eaa:	d1e6      	bne.n	3e7a <__ledf2+0x62>
    3eac:	e7e7      	b.n	3e7e <__ledf2+0x66>
    3eae:	42a5      	cmp	r5, r4
    3eb0:	dce5      	bgt.n	3e7e <__ledf2+0x66>
    3eb2:	db05      	blt.n	3ec0 <__ledf2+0xa8>
    3eb4:	42be      	cmp	r6, r7
    3eb6:	d8e2      	bhi.n	3e7e <__ledf2+0x66>
    3eb8:	d007      	beq.n	3eca <__ledf2+0xb2>
    3eba:	2300      	movs	r3, #0
    3ebc:	42be      	cmp	r6, r7
    3ebe:	d2d3      	bcs.n	3e68 <__ledf2+0x50>
    3ec0:	4659      	mov	r1, fp
    3ec2:	2301      	movs	r3, #1
    3ec4:	3901      	subs	r1, #1
    3ec6:	430b      	orrs	r3, r1
    3ec8:	e7ce      	b.n	3e68 <__ledf2+0x50>
    3eca:	45c4      	cmp	ip, r8
    3ecc:	d8d7      	bhi.n	3e7e <__ledf2+0x66>
    3ece:	2300      	movs	r3, #0
    3ed0:	45c4      	cmp	ip, r8
    3ed2:	d3f5      	bcc.n	3ec0 <__ledf2+0xa8>
    3ed4:	e7c8      	b.n	3e68 <__ledf2+0x50>
    3ed6:	46c0      	nop			; (mov r8, r8)
    3ed8:	000007ff 	.word	0x000007ff

00003edc <__aeabi_dmul>:
    3edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ede:	4657      	mov	r7, sl
    3ee0:	4645      	mov	r5, r8
    3ee2:	46de      	mov	lr, fp
    3ee4:	464e      	mov	r6, r9
    3ee6:	b5e0      	push	{r5, r6, r7, lr}
    3ee8:	030c      	lsls	r4, r1, #12
    3eea:	4698      	mov	r8, r3
    3eec:	004e      	lsls	r6, r1, #1
    3eee:	0b23      	lsrs	r3, r4, #12
    3ef0:	b087      	sub	sp, #28
    3ef2:	0007      	movs	r7, r0
    3ef4:	4692      	mov	sl, r2
    3ef6:	469b      	mov	fp, r3
    3ef8:	0d76      	lsrs	r6, r6, #21
    3efa:	0fcd      	lsrs	r5, r1, #31
    3efc:	2e00      	cmp	r6, #0
    3efe:	d06b      	beq.n	3fd8 <__aeabi_dmul+0xfc>
    3f00:	4b6d      	ldr	r3, [pc, #436]	; (40b8 <__aeabi_dmul+0x1dc>)
    3f02:	429e      	cmp	r6, r3
    3f04:	d035      	beq.n	3f72 <__aeabi_dmul+0x96>
    3f06:	2480      	movs	r4, #128	; 0x80
    3f08:	465b      	mov	r3, fp
    3f0a:	0f42      	lsrs	r2, r0, #29
    3f0c:	0424      	lsls	r4, r4, #16
    3f0e:	00db      	lsls	r3, r3, #3
    3f10:	4314      	orrs	r4, r2
    3f12:	431c      	orrs	r4, r3
    3f14:	00c3      	lsls	r3, r0, #3
    3f16:	4699      	mov	r9, r3
    3f18:	4b68      	ldr	r3, [pc, #416]	; (40bc <__aeabi_dmul+0x1e0>)
    3f1a:	46a3      	mov	fp, r4
    3f1c:	469c      	mov	ip, r3
    3f1e:	2300      	movs	r3, #0
    3f20:	2700      	movs	r7, #0
    3f22:	4466      	add	r6, ip
    3f24:	9302      	str	r3, [sp, #8]
    3f26:	4643      	mov	r3, r8
    3f28:	031c      	lsls	r4, r3, #12
    3f2a:	005a      	lsls	r2, r3, #1
    3f2c:	0fdb      	lsrs	r3, r3, #31
    3f2e:	4650      	mov	r0, sl
    3f30:	0b24      	lsrs	r4, r4, #12
    3f32:	0d52      	lsrs	r2, r2, #21
    3f34:	4698      	mov	r8, r3
    3f36:	d100      	bne.n	3f3a <__aeabi_dmul+0x5e>
    3f38:	e076      	b.n	4028 <__aeabi_dmul+0x14c>
    3f3a:	4b5f      	ldr	r3, [pc, #380]	; (40b8 <__aeabi_dmul+0x1dc>)
    3f3c:	429a      	cmp	r2, r3
    3f3e:	d06d      	beq.n	401c <__aeabi_dmul+0x140>
    3f40:	2380      	movs	r3, #128	; 0x80
    3f42:	0f41      	lsrs	r1, r0, #29
    3f44:	041b      	lsls	r3, r3, #16
    3f46:	430b      	orrs	r3, r1
    3f48:	495c      	ldr	r1, [pc, #368]	; (40bc <__aeabi_dmul+0x1e0>)
    3f4a:	00e4      	lsls	r4, r4, #3
    3f4c:	468c      	mov	ip, r1
    3f4e:	431c      	orrs	r4, r3
    3f50:	00c3      	lsls	r3, r0, #3
    3f52:	2000      	movs	r0, #0
    3f54:	4462      	add	r2, ip
    3f56:	4641      	mov	r1, r8
    3f58:	18b6      	adds	r6, r6, r2
    3f5a:	4069      	eors	r1, r5
    3f5c:	1c72      	adds	r2, r6, #1
    3f5e:	9101      	str	r1, [sp, #4]
    3f60:	4694      	mov	ip, r2
    3f62:	4307      	orrs	r7, r0
    3f64:	2f0f      	cmp	r7, #15
    3f66:	d900      	bls.n	3f6a <__aeabi_dmul+0x8e>
    3f68:	e0b0      	b.n	40cc <__aeabi_dmul+0x1f0>
    3f6a:	4a55      	ldr	r2, [pc, #340]	; (40c0 <__aeabi_dmul+0x1e4>)
    3f6c:	00bf      	lsls	r7, r7, #2
    3f6e:	59d2      	ldr	r2, [r2, r7]
    3f70:	4697      	mov	pc, r2
    3f72:	465b      	mov	r3, fp
    3f74:	4303      	orrs	r3, r0
    3f76:	4699      	mov	r9, r3
    3f78:	d000      	beq.n	3f7c <__aeabi_dmul+0xa0>
    3f7a:	e087      	b.n	408c <__aeabi_dmul+0x1b0>
    3f7c:	2300      	movs	r3, #0
    3f7e:	469b      	mov	fp, r3
    3f80:	3302      	adds	r3, #2
    3f82:	2708      	movs	r7, #8
    3f84:	9302      	str	r3, [sp, #8]
    3f86:	e7ce      	b.n	3f26 <__aeabi_dmul+0x4a>
    3f88:	4642      	mov	r2, r8
    3f8a:	9201      	str	r2, [sp, #4]
    3f8c:	2802      	cmp	r0, #2
    3f8e:	d067      	beq.n	4060 <__aeabi_dmul+0x184>
    3f90:	2803      	cmp	r0, #3
    3f92:	d100      	bne.n	3f96 <__aeabi_dmul+0xba>
    3f94:	e20e      	b.n	43b4 <__aeabi_dmul+0x4d8>
    3f96:	2801      	cmp	r0, #1
    3f98:	d000      	beq.n	3f9c <__aeabi_dmul+0xc0>
    3f9a:	e162      	b.n	4262 <__aeabi_dmul+0x386>
    3f9c:	2300      	movs	r3, #0
    3f9e:	2400      	movs	r4, #0
    3fa0:	2200      	movs	r2, #0
    3fa2:	4699      	mov	r9, r3
    3fa4:	9901      	ldr	r1, [sp, #4]
    3fa6:	4001      	ands	r1, r0
    3fa8:	b2cd      	uxtb	r5, r1
    3faa:	2100      	movs	r1, #0
    3fac:	0312      	lsls	r2, r2, #12
    3fae:	0d0b      	lsrs	r3, r1, #20
    3fb0:	0b12      	lsrs	r2, r2, #12
    3fb2:	051b      	lsls	r3, r3, #20
    3fb4:	4313      	orrs	r3, r2
    3fb6:	4a43      	ldr	r2, [pc, #268]	; (40c4 <__aeabi_dmul+0x1e8>)
    3fb8:	0524      	lsls	r4, r4, #20
    3fba:	4013      	ands	r3, r2
    3fbc:	431c      	orrs	r4, r3
    3fbe:	0064      	lsls	r4, r4, #1
    3fc0:	07ed      	lsls	r5, r5, #31
    3fc2:	0864      	lsrs	r4, r4, #1
    3fc4:	432c      	orrs	r4, r5
    3fc6:	4648      	mov	r0, r9
    3fc8:	0021      	movs	r1, r4
    3fca:	b007      	add	sp, #28
    3fcc:	bc3c      	pop	{r2, r3, r4, r5}
    3fce:	4690      	mov	r8, r2
    3fd0:	4699      	mov	r9, r3
    3fd2:	46a2      	mov	sl, r4
    3fd4:	46ab      	mov	fp, r5
    3fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fd8:	4303      	orrs	r3, r0
    3fda:	4699      	mov	r9, r3
    3fdc:	d04f      	beq.n	407e <__aeabi_dmul+0x1a2>
    3fde:	465b      	mov	r3, fp
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	d100      	bne.n	3fe6 <__aeabi_dmul+0x10a>
    3fe4:	e189      	b.n	42fa <__aeabi_dmul+0x41e>
    3fe6:	4658      	mov	r0, fp
    3fe8:	f000 fddc 	bl	4ba4 <__clzsi2>
    3fec:	0003      	movs	r3, r0
    3fee:	3b0b      	subs	r3, #11
    3ff0:	2b1c      	cmp	r3, #28
    3ff2:	dd00      	ble.n	3ff6 <__aeabi_dmul+0x11a>
    3ff4:	e17a      	b.n	42ec <__aeabi_dmul+0x410>
    3ff6:	221d      	movs	r2, #29
    3ff8:	1ad3      	subs	r3, r2, r3
    3ffa:	003a      	movs	r2, r7
    3ffc:	0001      	movs	r1, r0
    3ffe:	465c      	mov	r4, fp
    4000:	40da      	lsrs	r2, r3
    4002:	3908      	subs	r1, #8
    4004:	408c      	lsls	r4, r1
    4006:	0013      	movs	r3, r2
    4008:	408f      	lsls	r7, r1
    400a:	4323      	orrs	r3, r4
    400c:	469b      	mov	fp, r3
    400e:	46b9      	mov	r9, r7
    4010:	2300      	movs	r3, #0
    4012:	4e2d      	ldr	r6, [pc, #180]	; (40c8 <__aeabi_dmul+0x1ec>)
    4014:	2700      	movs	r7, #0
    4016:	1a36      	subs	r6, r6, r0
    4018:	9302      	str	r3, [sp, #8]
    401a:	e784      	b.n	3f26 <__aeabi_dmul+0x4a>
    401c:	4653      	mov	r3, sl
    401e:	4323      	orrs	r3, r4
    4020:	d12a      	bne.n	4078 <__aeabi_dmul+0x19c>
    4022:	2400      	movs	r4, #0
    4024:	2002      	movs	r0, #2
    4026:	e796      	b.n	3f56 <__aeabi_dmul+0x7a>
    4028:	4653      	mov	r3, sl
    402a:	4323      	orrs	r3, r4
    402c:	d020      	beq.n	4070 <__aeabi_dmul+0x194>
    402e:	2c00      	cmp	r4, #0
    4030:	d100      	bne.n	4034 <__aeabi_dmul+0x158>
    4032:	e157      	b.n	42e4 <__aeabi_dmul+0x408>
    4034:	0020      	movs	r0, r4
    4036:	f000 fdb5 	bl	4ba4 <__clzsi2>
    403a:	0003      	movs	r3, r0
    403c:	3b0b      	subs	r3, #11
    403e:	2b1c      	cmp	r3, #28
    4040:	dd00      	ble.n	4044 <__aeabi_dmul+0x168>
    4042:	e149      	b.n	42d8 <__aeabi_dmul+0x3fc>
    4044:	211d      	movs	r1, #29
    4046:	1acb      	subs	r3, r1, r3
    4048:	4651      	mov	r1, sl
    404a:	0002      	movs	r2, r0
    404c:	40d9      	lsrs	r1, r3
    404e:	4653      	mov	r3, sl
    4050:	3a08      	subs	r2, #8
    4052:	4094      	lsls	r4, r2
    4054:	4093      	lsls	r3, r2
    4056:	430c      	orrs	r4, r1
    4058:	4a1b      	ldr	r2, [pc, #108]	; (40c8 <__aeabi_dmul+0x1ec>)
    405a:	1a12      	subs	r2, r2, r0
    405c:	2000      	movs	r0, #0
    405e:	e77a      	b.n	3f56 <__aeabi_dmul+0x7a>
    4060:	2501      	movs	r5, #1
    4062:	9b01      	ldr	r3, [sp, #4]
    4064:	4c14      	ldr	r4, [pc, #80]	; (40b8 <__aeabi_dmul+0x1dc>)
    4066:	401d      	ands	r5, r3
    4068:	2300      	movs	r3, #0
    406a:	2200      	movs	r2, #0
    406c:	4699      	mov	r9, r3
    406e:	e79c      	b.n	3faa <__aeabi_dmul+0xce>
    4070:	2400      	movs	r4, #0
    4072:	2200      	movs	r2, #0
    4074:	2001      	movs	r0, #1
    4076:	e76e      	b.n	3f56 <__aeabi_dmul+0x7a>
    4078:	4653      	mov	r3, sl
    407a:	2003      	movs	r0, #3
    407c:	e76b      	b.n	3f56 <__aeabi_dmul+0x7a>
    407e:	2300      	movs	r3, #0
    4080:	469b      	mov	fp, r3
    4082:	3301      	adds	r3, #1
    4084:	2704      	movs	r7, #4
    4086:	2600      	movs	r6, #0
    4088:	9302      	str	r3, [sp, #8]
    408a:	e74c      	b.n	3f26 <__aeabi_dmul+0x4a>
    408c:	2303      	movs	r3, #3
    408e:	4681      	mov	r9, r0
    4090:	270c      	movs	r7, #12
    4092:	9302      	str	r3, [sp, #8]
    4094:	e747      	b.n	3f26 <__aeabi_dmul+0x4a>
    4096:	2280      	movs	r2, #128	; 0x80
    4098:	2300      	movs	r3, #0
    409a:	2500      	movs	r5, #0
    409c:	0312      	lsls	r2, r2, #12
    409e:	4699      	mov	r9, r3
    40a0:	4c05      	ldr	r4, [pc, #20]	; (40b8 <__aeabi_dmul+0x1dc>)
    40a2:	e782      	b.n	3faa <__aeabi_dmul+0xce>
    40a4:	465c      	mov	r4, fp
    40a6:	464b      	mov	r3, r9
    40a8:	9802      	ldr	r0, [sp, #8]
    40aa:	e76f      	b.n	3f8c <__aeabi_dmul+0xb0>
    40ac:	465c      	mov	r4, fp
    40ae:	464b      	mov	r3, r9
    40b0:	9501      	str	r5, [sp, #4]
    40b2:	9802      	ldr	r0, [sp, #8]
    40b4:	e76a      	b.n	3f8c <__aeabi_dmul+0xb0>
    40b6:	46c0      	nop			; (mov r8, r8)
    40b8:	000007ff 	.word	0x000007ff
    40bc:	fffffc01 	.word	0xfffffc01
    40c0:	00004fe4 	.word	0x00004fe4
    40c4:	800fffff 	.word	0x800fffff
    40c8:	fffffc0d 	.word	0xfffffc0d
    40cc:	464a      	mov	r2, r9
    40ce:	4649      	mov	r1, r9
    40d0:	0c17      	lsrs	r7, r2, #16
    40d2:	0c1a      	lsrs	r2, r3, #16
    40d4:	041b      	lsls	r3, r3, #16
    40d6:	0c1b      	lsrs	r3, r3, #16
    40d8:	0408      	lsls	r0, r1, #16
    40da:	0019      	movs	r1, r3
    40dc:	0c00      	lsrs	r0, r0, #16
    40de:	4341      	muls	r1, r0
    40e0:	0015      	movs	r5, r2
    40e2:	4688      	mov	r8, r1
    40e4:	0019      	movs	r1, r3
    40e6:	437d      	muls	r5, r7
    40e8:	4379      	muls	r1, r7
    40ea:	9503      	str	r5, [sp, #12]
    40ec:	4689      	mov	r9, r1
    40ee:	0029      	movs	r1, r5
    40f0:	0015      	movs	r5, r2
    40f2:	4345      	muls	r5, r0
    40f4:	444d      	add	r5, r9
    40f6:	9502      	str	r5, [sp, #8]
    40f8:	4645      	mov	r5, r8
    40fa:	0c2d      	lsrs	r5, r5, #16
    40fc:	46aa      	mov	sl, r5
    40fe:	9d02      	ldr	r5, [sp, #8]
    4100:	4455      	add	r5, sl
    4102:	45a9      	cmp	r9, r5
    4104:	d906      	bls.n	4114 <__aeabi_dmul+0x238>
    4106:	468a      	mov	sl, r1
    4108:	2180      	movs	r1, #128	; 0x80
    410a:	0249      	lsls	r1, r1, #9
    410c:	4689      	mov	r9, r1
    410e:	44ca      	add	sl, r9
    4110:	4651      	mov	r1, sl
    4112:	9103      	str	r1, [sp, #12]
    4114:	0c29      	lsrs	r1, r5, #16
    4116:	9104      	str	r1, [sp, #16]
    4118:	4641      	mov	r1, r8
    411a:	0409      	lsls	r1, r1, #16
    411c:	042d      	lsls	r5, r5, #16
    411e:	0c09      	lsrs	r1, r1, #16
    4120:	4688      	mov	r8, r1
    4122:	0029      	movs	r1, r5
    4124:	0c25      	lsrs	r5, r4, #16
    4126:	0424      	lsls	r4, r4, #16
    4128:	4441      	add	r1, r8
    412a:	0c24      	lsrs	r4, r4, #16
    412c:	9105      	str	r1, [sp, #20]
    412e:	0021      	movs	r1, r4
    4130:	4341      	muls	r1, r0
    4132:	4688      	mov	r8, r1
    4134:	0021      	movs	r1, r4
    4136:	4379      	muls	r1, r7
    4138:	468a      	mov	sl, r1
    413a:	4368      	muls	r0, r5
    413c:	4641      	mov	r1, r8
    413e:	4450      	add	r0, sl
    4140:	4681      	mov	r9, r0
    4142:	0c08      	lsrs	r0, r1, #16
    4144:	4448      	add	r0, r9
    4146:	436f      	muls	r7, r5
    4148:	4582      	cmp	sl, r0
    414a:	d903      	bls.n	4154 <__aeabi_dmul+0x278>
    414c:	2180      	movs	r1, #128	; 0x80
    414e:	0249      	lsls	r1, r1, #9
    4150:	4689      	mov	r9, r1
    4152:	444f      	add	r7, r9
    4154:	0c01      	lsrs	r1, r0, #16
    4156:	4689      	mov	r9, r1
    4158:	0039      	movs	r1, r7
    415a:	4449      	add	r1, r9
    415c:	9102      	str	r1, [sp, #8]
    415e:	4641      	mov	r1, r8
    4160:	040f      	lsls	r7, r1, #16
    4162:	9904      	ldr	r1, [sp, #16]
    4164:	0c3f      	lsrs	r7, r7, #16
    4166:	4688      	mov	r8, r1
    4168:	0400      	lsls	r0, r0, #16
    416a:	19c0      	adds	r0, r0, r7
    416c:	4480      	add	r8, r0
    416e:	4641      	mov	r1, r8
    4170:	9104      	str	r1, [sp, #16]
    4172:	4659      	mov	r1, fp
    4174:	0c0f      	lsrs	r7, r1, #16
    4176:	0409      	lsls	r1, r1, #16
    4178:	0c09      	lsrs	r1, r1, #16
    417a:	4688      	mov	r8, r1
    417c:	4359      	muls	r1, r3
    417e:	468a      	mov	sl, r1
    4180:	0039      	movs	r1, r7
    4182:	4351      	muls	r1, r2
    4184:	4689      	mov	r9, r1
    4186:	4641      	mov	r1, r8
    4188:	434a      	muls	r2, r1
    418a:	4651      	mov	r1, sl
    418c:	0c09      	lsrs	r1, r1, #16
    418e:	468b      	mov	fp, r1
    4190:	437b      	muls	r3, r7
    4192:	18d2      	adds	r2, r2, r3
    4194:	445a      	add	r2, fp
    4196:	4293      	cmp	r3, r2
    4198:	d903      	bls.n	41a2 <__aeabi_dmul+0x2c6>
    419a:	2380      	movs	r3, #128	; 0x80
    419c:	025b      	lsls	r3, r3, #9
    419e:	469b      	mov	fp, r3
    41a0:	44d9      	add	r9, fp
    41a2:	4651      	mov	r1, sl
    41a4:	0409      	lsls	r1, r1, #16
    41a6:	0c09      	lsrs	r1, r1, #16
    41a8:	468a      	mov	sl, r1
    41aa:	4641      	mov	r1, r8
    41ac:	4361      	muls	r1, r4
    41ae:	437c      	muls	r4, r7
    41b0:	0c13      	lsrs	r3, r2, #16
    41b2:	0412      	lsls	r2, r2, #16
    41b4:	444b      	add	r3, r9
    41b6:	4452      	add	r2, sl
    41b8:	46a1      	mov	r9, r4
    41ba:	468a      	mov	sl, r1
    41bc:	003c      	movs	r4, r7
    41be:	4641      	mov	r1, r8
    41c0:	436c      	muls	r4, r5
    41c2:	434d      	muls	r5, r1
    41c4:	4651      	mov	r1, sl
    41c6:	444d      	add	r5, r9
    41c8:	0c0f      	lsrs	r7, r1, #16
    41ca:	197d      	adds	r5, r7, r5
    41cc:	45a9      	cmp	r9, r5
    41ce:	d903      	bls.n	41d8 <__aeabi_dmul+0x2fc>
    41d0:	2180      	movs	r1, #128	; 0x80
    41d2:	0249      	lsls	r1, r1, #9
    41d4:	4688      	mov	r8, r1
    41d6:	4444      	add	r4, r8
    41d8:	9f04      	ldr	r7, [sp, #16]
    41da:	9903      	ldr	r1, [sp, #12]
    41dc:	46b8      	mov	r8, r7
    41de:	4441      	add	r1, r8
    41e0:	468b      	mov	fp, r1
    41e2:	4583      	cmp	fp, r0
    41e4:	4180      	sbcs	r0, r0
    41e6:	4241      	negs	r1, r0
    41e8:	4688      	mov	r8, r1
    41ea:	4651      	mov	r1, sl
    41ec:	0408      	lsls	r0, r1, #16
    41ee:	042f      	lsls	r7, r5, #16
    41f0:	0c00      	lsrs	r0, r0, #16
    41f2:	183f      	adds	r7, r7, r0
    41f4:	4658      	mov	r0, fp
    41f6:	9902      	ldr	r1, [sp, #8]
    41f8:	1810      	adds	r0, r2, r0
    41fa:	4689      	mov	r9, r1
    41fc:	4290      	cmp	r0, r2
    41fe:	4192      	sbcs	r2, r2
    4200:	444f      	add	r7, r9
    4202:	46ba      	mov	sl, r7
    4204:	4252      	negs	r2, r2
    4206:	4699      	mov	r9, r3
    4208:	4693      	mov	fp, r2
    420a:	44c2      	add	sl, r8
    420c:	44d1      	add	r9, sl
    420e:	44cb      	add	fp, r9
    4210:	428f      	cmp	r7, r1
    4212:	41bf      	sbcs	r7, r7
    4214:	45c2      	cmp	sl, r8
    4216:	4189      	sbcs	r1, r1
    4218:	4599      	cmp	r9, r3
    421a:	419b      	sbcs	r3, r3
    421c:	4593      	cmp	fp, r2
    421e:	4192      	sbcs	r2, r2
    4220:	427f      	negs	r7, r7
    4222:	4249      	negs	r1, r1
    4224:	0c2d      	lsrs	r5, r5, #16
    4226:	4252      	negs	r2, r2
    4228:	430f      	orrs	r7, r1
    422a:	425b      	negs	r3, r3
    422c:	4313      	orrs	r3, r2
    422e:	197f      	adds	r7, r7, r5
    4230:	18ff      	adds	r7, r7, r3
    4232:	465b      	mov	r3, fp
    4234:	193c      	adds	r4, r7, r4
    4236:	0ddb      	lsrs	r3, r3, #23
    4238:	9a05      	ldr	r2, [sp, #20]
    423a:	0264      	lsls	r4, r4, #9
    423c:	431c      	orrs	r4, r3
    423e:	0243      	lsls	r3, r0, #9
    4240:	4313      	orrs	r3, r2
    4242:	1e5d      	subs	r5, r3, #1
    4244:	41ab      	sbcs	r3, r5
    4246:	465a      	mov	r2, fp
    4248:	0dc0      	lsrs	r0, r0, #23
    424a:	4303      	orrs	r3, r0
    424c:	0252      	lsls	r2, r2, #9
    424e:	4313      	orrs	r3, r2
    4250:	01e2      	lsls	r2, r4, #7
    4252:	d556      	bpl.n	4302 <__aeabi_dmul+0x426>
    4254:	2001      	movs	r0, #1
    4256:	085a      	lsrs	r2, r3, #1
    4258:	4003      	ands	r3, r0
    425a:	4313      	orrs	r3, r2
    425c:	07e2      	lsls	r2, r4, #31
    425e:	4313      	orrs	r3, r2
    4260:	0864      	lsrs	r4, r4, #1
    4262:	485a      	ldr	r0, [pc, #360]	; (43cc <__aeabi_dmul+0x4f0>)
    4264:	4460      	add	r0, ip
    4266:	2800      	cmp	r0, #0
    4268:	dd4d      	ble.n	4306 <__aeabi_dmul+0x42a>
    426a:	075a      	lsls	r2, r3, #29
    426c:	d009      	beq.n	4282 <__aeabi_dmul+0x3a6>
    426e:	220f      	movs	r2, #15
    4270:	401a      	ands	r2, r3
    4272:	2a04      	cmp	r2, #4
    4274:	d005      	beq.n	4282 <__aeabi_dmul+0x3a6>
    4276:	1d1a      	adds	r2, r3, #4
    4278:	429a      	cmp	r2, r3
    427a:	419b      	sbcs	r3, r3
    427c:	425b      	negs	r3, r3
    427e:	18e4      	adds	r4, r4, r3
    4280:	0013      	movs	r3, r2
    4282:	01e2      	lsls	r2, r4, #7
    4284:	d504      	bpl.n	4290 <__aeabi_dmul+0x3b4>
    4286:	2080      	movs	r0, #128	; 0x80
    4288:	4a51      	ldr	r2, [pc, #324]	; (43d0 <__aeabi_dmul+0x4f4>)
    428a:	00c0      	lsls	r0, r0, #3
    428c:	4014      	ands	r4, r2
    428e:	4460      	add	r0, ip
    4290:	4a50      	ldr	r2, [pc, #320]	; (43d4 <__aeabi_dmul+0x4f8>)
    4292:	4290      	cmp	r0, r2
    4294:	dd00      	ble.n	4298 <__aeabi_dmul+0x3bc>
    4296:	e6e3      	b.n	4060 <__aeabi_dmul+0x184>
    4298:	2501      	movs	r5, #1
    429a:	08db      	lsrs	r3, r3, #3
    429c:	0762      	lsls	r2, r4, #29
    429e:	431a      	orrs	r2, r3
    42a0:	0264      	lsls	r4, r4, #9
    42a2:	9b01      	ldr	r3, [sp, #4]
    42a4:	4691      	mov	r9, r2
    42a6:	0b22      	lsrs	r2, r4, #12
    42a8:	0544      	lsls	r4, r0, #21
    42aa:	0d64      	lsrs	r4, r4, #21
    42ac:	401d      	ands	r5, r3
    42ae:	e67c      	b.n	3faa <__aeabi_dmul+0xce>
    42b0:	2280      	movs	r2, #128	; 0x80
    42b2:	4659      	mov	r1, fp
    42b4:	0312      	lsls	r2, r2, #12
    42b6:	4211      	tst	r1, r2
    42b8:	d008      	beq.n	42cc <__aeabi_dmul+0x3f0>
    42ba:	4214      	tst	r4, r2
    42bc:	d106      	bne.n	42cc <__aeabi_dmul+0x3f0>
    42be:	4322      	orrs	r2, r4
    42c0:	0312      	lsls	r2, r2, #12
    42c2:	0b12      	lsrs	r2, r2, #12
    42c4:	4645      	mov	r5, r8
    42c6:	4699      	mov	r9, r3
    42c8:	4c43      	ldr	r4, [pc, #268]	; (43d8 <__aeabi_dmul+0x4fc>)
    42ca:	e66e      	b.n	3faa <__aeabi_dmul+0xce>
    42cc:	465b      	mov	r3, fp
    42ce:	431a      	orrs	r2, r3
    42d0:	0312      	lsls	r2, r2, #12
    42d2:	0b12      	lsrs	r2, r2, #12
    42d4:	4c40      	ldr	r4, [pc, #256]	; (43d8 <__aeabi_dmul+0x4fc>)
    42d6:	e668      	b.n	3faa <__aeabi_dmul+0xce>
    42d8:	0003      	movs	r3, r0
    42da:	4654      	mov	r4, sl
    42dc:	3b28      	subs	r3, #40	; 0x28
    42de:	409c      	lsls	r4, r3
    42e0:	2300      	movs	r3, #0
    42e2:	e6b9      	b.n	4058 <__aeabi_dmul+0x17c>
    42e4:	f000 fc5e 	bl	4ba4 <__clzsi2>
    42e8:	3020      	adds	r0, #32
    42ea:	e6a6      	b.n	403a <__aeabi_dmul+0x15e>
    42ec:	0003      	movs	r3, r0
    42ee:	3b28      	subs	r3, #40	; 0x28
    42f0:	409f      	lsls	r7, r3
    42f2:	2300      	movs	r3, #0
    42f4:	46bb      	mov	fp, r7
    42f6:	4699      	mov	r9, r3
    42f8:	e68a      	b.n	4010 <__aeabi_dmul+0x134>
    42fa:	f000 fc53 	bl	4ba4 <__clzsi2>
    42fe:	3020      	adds	r0, #32
    4300:	e674      	b.n	3fec <__aeabi_dmul+0x110>
    4302:	46b4      	mov	ip, r6
    4304:	e7ad      	b.n	4262 <__aeabi_dmul+0x386>
    4306:	2501      	movs	r5, #1
    4308:	1a2a      	subs	r2, r5, r0
    430a:	2a38      	cmp	r2, #56	; 0x38
    430c:	dd06      	ble.n	431c <__aeabi_dmul+0x440>
    430e:	9b01      	ldr	r3, [sp, #4]
    4310:	2400      	movs	r4, #0
    4312:	401d      	ands	r5, r3
    4314:	2300      	movs	r3, #0
    4316:	2200      	movs	r2, #0
    4318:	4699      	mov	r9, r3
    431a:	e646      	b.n	3faa <__aeabi_dmul+0xce>
    431c:	2a1f      	cmp	r2, #31
    431e:	dc21      	bgt.n	4364 <__aeabi_dmul+0x488>
    4320:	2520      	movs	r5, #32
    4322:	0020      	movs	r0, r4
    4324:	1aad      	subs	r5, r5, r2
    4326:	001e      	movs	r6, r3
    4328:	40ab      	lsls	r3, r5
    432a:	40a8      	lsls	r0, r5
    432c:	40d6      	lsrs	r6, r2
    432e:	1e5d      	subs	r5, r3, #1
    4330:	41ab      	sbcs	r3, r5
    4332:	4330      	orrs	r0, r6
    4334:	4318      	orrs	r0, r3
    4336:	40d4      	lsrs	r4, r2
    4338:	0743      	lsls	r3, r0, #29
    433a:	d009      	beq.n	4350 <__aeabi_dmul+0x474>
    433c:	230f      	movs	r3, #15
    433e:	4003      	ands	r3, r0
    4340:	2b04      	cmp	r3, #4
    4342:	d005      	beq.n	4350 <__aeabi_dmul+0x474>
    4344:	0003      	movs	r3, r0
    4346:	1d18      	adds	r0, r3, #4
    4348:	4298      	cmp	r0, r3
    434a:	419b      	sbcs	r3, r3
    434c:	425b      	negs	r3, r3
    434e:	18e4      	adds	r4, r4, r3
    4350:	0223      	lsls	r3, r4, #8
    4352:	d521      	bpl.n	4398 <__aeabi_dmul+0x4bc>
    4354:	2501      	movs	r5, #1
    4356:	9b01      	ldr	r3, [sp, #4]
    4358:	2401      	movs	r4, #1
    435a:	401d      	ands	r5, r3
    435c:	2300      	movs	r3, #0
    435e:	2200      	movs	r2, #0
    4360:	4699      	mov	r9, r3
    4362:	e622      	b.n	3faa <__aeabi_dmul+0xce>
    4364:	251f      	movs	r5, #31
    4366:	0021      	movs	r1, r4
    4368:	426d      	negs	r5, r5
    436a:	1a28      	subs	r0, r5, r0
    436c:	40c1      	lsrs	r1, r0
    436e:	0008      	movs	r0, r1
    4370:	2a20      	cmp	r2, #32
    4372:	d01d      	beq.n	43b0 <__aeabi_dmul+0x4d4>
    4374:	355f      	adds	r5, #95	; 0x5f
    4376:	1aaa      	subs	r2, r5, r2
    4378:	4094      	lsls	r4, r2
    437a:	4323      	orrs	r3, r4
    437c:	1e5c      	subs	r4, r3, #1
    437e:	41a3      	sbcs	r3, r4
    4380:	2507      	movs	r5, #7
    4382:	4303      	orrs	r3, r0
    4384:	401d      	ands	r5, r3
    4386:	2200      	movs	r2, #0
    4388:	2d00      	cmp	r5, #0
    438a:	d009      	beq.n	43a0 <__aeabi_dmul+0x4c4>
    438c:	220f      	movs	r2, #15
    438e:	2400      	movs	r4, #0
    4390:	401a      	ands	r2, r3
    4392:	0018      	movs	r0, r3
    4394:	2a04      	cmp	r2, #4
    4396:	d1d6      	bne.n	4346 <__aeabi_dmul+0x46a>
    4398:	0003      	movs	r3, r0
    439a:	0765      	lsls	r5, r4, #29
    439c:	0264      	lsls	r4, r4, #9
    439e:	0b22      	lsrs	r2, r4, #12
    43a0:	08db      	lsrs	r3, r3, #3
    43a2:	432b      	orrs	r3, r5
    43a4:	2501      	movs	r5, #1
    43a6:	4699      	mov	r9, r3
    43a8:	9b01      	ldr	r3, [sp, #4]
    43aa:	2400      	movs	r4, #0
    43ac:	401d      	ands	r5, r3
    43ae:	e5fc      	b.n	3faa <__aeabi_dmul+0xce>
    43b0:	2400      	movs	r4, #0
    43b2:	e7e2      	b.n	437a <__aeabi_dmul+0x49e>
    43b4:	2280      	movs	r2, #128	; 0x80
    43b6:	2501      	movs	r5, #1
    43b8:	0312      	lsls	r2, r2, #12
    43ba:	4322      	orrs	r2, r4
    43bc:	9901      	ldr	r1, [sp, #4]
    43be:	0312      	lsls	r2, r2, #12
    43c0:	0b12      	lsrs	r2, r2, #12
    43c2:	400d      	ands	r5, r1
    43c4:	4699      	mov	r9, r3
    43c6:	4c04      	ldr	r4, [pc, #16]	; (43d8 <__aeabi_dmul+0x4fc>)
    43c8:	e5ef      	b.n	3faa <__aeabi_dmul+0xce>
    43ca:	46c0      	nop			; (mov r8, r8)
    43cc:	000003ff 	.word	0x000003ff
    43d0:	feffffff 	.word	0xfeffffff
    43d4:	000007fe 	.word	0x000007fe
    43d8:	000007ff 	.word	0x000007ff

000043dc <__aeabi_dsub>:
    43dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    43de:	4646      	mov	r6, r8
    43e0:	46d6      	mov	lr, sl
    43e2:	464f      	mov	r7, r9
    43e4:	030c      	lsls	r4, r1, #12
    43e6:	b5c0      	push	{r6, r7, lr}
    43e8:	0fcd      	lsrs	r5, r1, #31
    43ea:	004e      	lsls	r6, r1, #1
    43ec:	0a61      	lsrs	r1, r4, #9
    43ee:	0f44      	lsrs	r4, r0, #29
    43f0:	430c      	orrs	r4, r1
    43f2:	00c1      	lsls	r1, r0, #3
    43f4:	0058      	lsls	r0, r3, #1
    43f6:	0d40      	lsrs	r0, r0, #21
    43f8:	4684      	mov	ip, r0
    43fa:	468a      	mov	sl, r1
    43fc:	000f      	movs	r7, r1
    43fe:	0319      	lsls	r1, r3, #12
    4400:	0f50      	lsrs	r0, r2, #29
    4402:	0a49      	lsrs	r1, r1, #9
    4404:	4301      	orrs	r1, r0
    4406:	48c6      	ldr	r0, [pc, #792]	; (4720 <__aeabi_dsub+0x344>)
    4408:	0d76      	lsrs	r6, r6, #21
    440a:	46a8      	mov	r8, r5
    440c:	0fdb      	lsrs	r3, r3, #31
    440e:	00d2      	lsls	r2, r2, #3
    4410:	4584      	cmp	ip, r0
    4412:	d100      	bne.n	4416 <__aeabi_dsub+0x3a>
    4414:	e0d8      	b.n	45c8 <__aeabi_dsub+0x1ec>
    4416:	2001      	movs	r0, #1
    4418:	4043      	eors	r3, r0
    441a:	42ab      	cmp	r3, r5
    441c:	d100      	bne.n	4420 <__aeabi_dsub+0x44>
    441e:	e0a6      	b.n	456e <__aeabi_dsub+0x192>
    4420:	4660      	mov	r0, ip
    4422:	1a35      	subs	r5, r6, r0
    4424:	2d00      	cmp	r5, #0
    4426:	dc00      	bgt.n	442a <__aeabi_dsub+0x4e>
    4428:	e105      	b.n	4636 <__aeabi_dsub+0x25a>
    442a:	2800      	cmp	r0, #0
    442c:	d110      	bne.n	4450 <__aeabi_dsub+0x74>
    442e:	000b      	movs	r3, r1
    4430:	4313      	orrs	r3, r2
    4432:	d100      	bne.n	4436 <__aeabi_dsub+0x5a>
    4434:	e0d7      	b.n	45e6 <__aeabi_dsub+0x20a>
    4436:	1e6b      	subs	r3, r5, #1
    4438:	2b00      	cmp	r3, #0
    443a:	d000      	beq.n	443e <__aeabi_dsub+0x62>
    443c:	e14b      	b.n	46d6 <__aeabi_dsub+0x2fa>
    443e:	4653      	mov	r3, sl
    4440:	1a9f      	subs	r7, r3, r2
    4442:	45ba      	cmp	sl, r7
    4444:	4180      	sbcs	r0, r0
    4446:	1a64      	subs	r4, r4, r1
    4448:	4240      	negs	r0, r0
    444a:	1a24      	subs	r4, r4, r0
    444c:	2601      	movs	r6, #1
    444e:	e01e      	b.n	448e <__aeabi_dsub+0xb2>
    4450:	4bb3      	ldr	r3, [pc, #716]	; (4720 <__aeabi_dsub+0x344>)
    4452:	429e      	cmp	r6, r3
    4454:	d048      	beq.n	44e8 <__aeabi_dsub+0x10c>
    4456:	2380      	movs	r3, #128	; 0x80
    4458:	041b      	lsls	r3, r3, #16
    445a:	4319      	orrs	r1, r3
    445c:	2d38      	cmp	r5, #56	; 0x38
    445e:	dd00      	ble.n	4462 <__aeabi_dsub+0x86>
    4460:	e119      	b.n	4696 <__aeabi_dsub+0x2ba>
    4462:	2d1f      	cmp	r5, #31
    4464:	dd00      	ble.n	4468 <__aeabi_dsub+0x8c>
    4466:	e14c      	b.n	4702 <__aeabi_dsub+0x326>
    4468:	2320      	movs	r3, #32
    446a:	000f      	movs	r7, r1
    446c:	1b5b      	subs	r3, r3, r5
    446e:	0010      	movs	r0, r2
    4470:	409a      	lsls	r2, r3
    4472:	409f      	lsls	r7, r3
    4474:	40e8      	lsrs	r0, r5
    4476:	1e53      	subs	r3, r2, #1
    4478:	419a      	sbcs	r2, r3
    447a:	40e9      	lsrs	r1, r5
    447c:	4307      	orrs	r7, r0
    447e:	4317      	orrs	r7, r2
    4480:	4653      	mov	r3, sl
    4482:	1bdf      	subs	r7, r3, r7
    4484:	1a61      	subs	r1, r4, r1
    4486:	45ba      	cmp	sl, r7
    4488:	41a4      	sbcs	r4, r4
    448a:	4264      	negs	r4, r4
    448c:	1b0c      	subs	r4, r1, r4
    448e:	0223      	lsls	r3, r4, #8
    4490:	d400      	bmi.n	4494 <__aeabi_dsub+0xb8>
    4492:	e0c5      	b.n	4620 <__aeabi_dsub+0x244>
    4494:	0264      	lsls	r4, r4, #9
    4496:	0a65      	lsrs	r5, r4, #9
    4498:	2d00      	cmp	r5, #0
    449a:	d100      	bne.n	449e <__aeabi_dsub+0xc2>
    449c:	e0f6      	b.n	468c <__aeabi_dsub+0x2b0>
    449e:	0028      	movs	r0, r5
    44a0:	f000 fb80 	bl	4ba4 <__clzsi2>
    44a4:	0003      	movs	r3, r0
    44a6:	3b08      	subs	r3, #8
    44a8:	2b1f      	cmp	r3, #31
    44aa:	dd00      	ble.n	44ae <__aeabi_dsub+0xd2>
    44ac:	e0e9      	b.n	4682 <__aeabi_dsub+0x2a6>
    44ae:	2220      	movs	r2, #32
    44b0:	003c      	movs	r4, r7
    44b2:	1ad2      	subs	r2, r2, r3
    44b4:	409d      	lsls	r5, r3
    44b6:	40d4      	lsrs	r4, r2
    44b8:	409f      	lsls	r7, r3
    44ba:	4325      	orrs	r5, r4
    44bc:	429e      	cmp	r6, r3
    44be:	dd00      	ble.n	44c2 <__aeabi_dsub+0xe6>
    44c0:	e0db      	b.n	467a <__aeabi_dsub+0x29e>
    44c2:	1b9e      	subs	r6, r3, r6
    44c4:	1c73      	adds	r3, r6, #1
    44c6:	2b1f      	cmp	r3, #31
    44c8:	dd00      	ble.n	44cc <__aeabi_dsub+0xf0>
    44ca:	e10a      	b.n	46e2 <__aeabi_dsub+0x306>
    44cc:	2220      	movs	r2, #32
    44ce:	0038      	movs	r0, r7
    44d0:	1ad2      	subs	r2, r2, r3
    44d2:	0029      	movs	r1, r5
    44d4:	4097      	lsls	r7, r2
    44d6:	002c      	movs	r4, r5
    44d8:	4091      	lsls	r1, r2
    44da:	40d8      	lsrs	r0, r3
    44dc:	1e7a      	subs	r2, r7, #1
    44de:	4197      	sbcs	r7, r2
    44e0:	40dc      	lsrs	r4, r3
    44e2:	2600      	movs	r6, #0
    44e4:	4301      	orrs	r1, r0
    44e6:	430f      	orrs	r7, r1
    44e8:	077b      	lsls	r3, r7, #29
    44ea:	d009      	beq.n	4500 <__aeabi_dsub+0x124>
    44ec:	230f      	movs	r3, #15
    44ee:	403b      	ands	r3, r7
    44f0:	2b04      	cmp	r3, #4
    44f2:	d005      	beq.n	4500 <__aeabi_dsub+0x124>
    44f4:	1d3b      	adds	r3, r7, #4
    44f6:	42bb      	cmp	r3, r7
    44f8:	41bf      	sbcs	r7, r7
    44fa:	427f      	negs	r7, r7
    44fc:	19e4      	adds	r4, r4, r7
    44fe:	001f      	movs	r7, r3
    4500:	0223      	lsls	r3, r4, #8
    4502:	d525      	bpl.n	4550 <__aeabi_dsub+0x174>
    4504:	4b86      	ldr	r3, [pc, #536]	; (4720 <__aeabi_dsub+0x344>)
    4506:	3601      	adds	r6, #1
    4508:	429e      	cmp	r6, r3
    450a:	d100      	bne.n	450e <__aeabi_dsub+0x132>
    450c:	e0af      	b.n	466e <__aeabi_dsub+0x292>
    450e:	4b85      	ldr	r3, [pc, #532]	; (4724 <__aeabi_dsub+0x348>)
    4510:	2501      	movs	r5, #1
    4512:	401c      	ands	r4, r3
    4514:	4643      	mov	r3, r8
    4516:	0762      	lsls	r2, r4, #29
    4518:	08ff      	lsrs	r7, r7, #3
    451a:	0264      	lsls	r4, r4, #9
    451c:	0576      	lsls	r6, r6, #21
    451e:	4317      	orrs	r7, r2
    4520:	0b24      	lsrs	r4, r4, #12
    4522:	0d76      	lsrs	r6, r6, #21
    4524:	401d      	ands	r5, r3
    4526:	2100      	movs	r1, #0
    4528:	0324      	lsls	r4, r4, #12
    452a:	0b23      	lsrs	r3, r4, #12
    452c:	0d0c      	lsrs	r4, r1, #20
    452e:	4a7e      	ldr	r2, [pc, #504]	; (4728 <__aeabi_dsub+0x34c>)
    4530:	0524      	lsls	r4, r4, #20
    4532:	431c      	orrs	r4, r3
    4534:	4014      	ands	r4, r2
    4536:	0533      	lsls	r3, r6, #20
    4538:	4323      	orrs	r3, r4
    453a:	005b      	lsls	r3, r3, #1
    453c:	07ed      	lsls	r5, r5, #31
    453e:	085b      	lsrs	r3, r3, #1
    4540:	432b      	orrs	r3, r5
    4542:	0038      	movs	r0, r7
    4544:	0019      	movs	r1, r3
    4546:	bc1c      	pop	{r2, r3, r4}
    4548:	4690      	mov	r8, r2
    454a:	4699      	mov	r9, r3
    454c:	46a2      	mov	sl, r4
    454e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4550:	2501      	movs	r5, #1
    4552:	4643      	mov	r3, r8
    4554:	0762      	lsls	r2, r4, #29
    4556:	08ff      	lsrs	r7, r7, #3
    4558:	4317      	orrs	r7, r2
    455a:	08e4      	lsrs	r4, r4, #3
    455c:	401d      	ands	r5, r3
    455e:	4b70      	ldr	r3, [pc, #448]	; (4720 <__aeabi_dsub+0x344>)
    4560:	429e      	cmp	r6, r3
    4562:	d036      	beq.n	45d2 <__aeabi_dsub+0x1f6>
    4564:	0324      	lsls	r4, r4, #12
    4566:	0576      	lsls	r6, r6, #21
    4568:	0b24      	lsrs	r4, r4, #12
    456a:	0d76      	lsrs	r6, r6, #21
    456c:	e7db      	b.n	4526 <__aeabi_dsub+0x14a>
    456e:	4663      	mov	r3, ip
    4570:	1af3      	subs	r3, r6, r3
    4572:	2b00      	cmp	r3, #0
    4574:	dc00      	bgt.n	4578 <__aeabi_dsub+0x19c>
    4576:	e094      	b.n	46a2 <__aeabi_dsub+0x2c6>
    4578:	4660      	mov	r0, ip
    457a:	2800      	cmp	r0, #0
    457c:	d035      	beq.n	45ea <__aeabi_dsub+0x20e>
    457e:	4868      	ldr	r0, [pc, #416]	; (4720 <__aeabi_dsub+0x344>)
    4580:	4286      	cmp	r6, r0
    4582:	d0b1      	beq.n	44e8 <__aeabi_dsub+0x10c>
    4584:	2780      	movs	r7, #128	; 0x80
    4586:	043f      	lsls	r7, r7, #16
    4588:	4339      	orrs	r1, r7
    458a:	2b38      	cmp	r3, #56	; 0x38
    458c:	dc00      	bgt.n	4590 <__aeabi_dsub+0x1b4>
    458e:	e0fd      	b.n	478c <__aeabi_dsub+0x3b0>
    4590:	430a      	orrs	r2, r1
    4592:	0017      	movs	r7, r2
    4594:	2100      	movs	r1, #0
    4596:	1e7a      	subs	r2, r7, #1
    4598:	4197      	sbcs	r7, r2
    459a:	4457      	add	r7, sl
    459c:	4557      	cmp	r7, sl
    459e:	4180      	sbcs	r0, r0
    45a0:	1909      	adds	r1, r1, r4
    45a2:	4244      	negs	r4, r0
    45a4:	190c      	adds	r4, r1, r4
    45a6:	0223      	lsls	r3, r4, #8
    45a8:	d53a      	bpl.n	4620 <__aeabi_dsub+0x244>
    45aa:	4b5d      	ldr	r3, [pc, #372]	; (4720 <__aeabi_dsub+0x344>)
    45ac:	3601      	adds	r6, #1
    45ae:	429e      	cmp	r6, r3
    45b0:	d100      	bne.n	45b4 <__aeabi_dsub+0x1d8>
    45b2:	e14b      	b.n	484c <__aeabi_dsub+0x470>
    45b4:	2201      	movs	r2, #1
    45b6:	4b5b      	ldr	r3, [pc, #364]	; (4724 <__aeabi_dsub+0x348>)
    45b8:	401c      	ands	r4, r3
    45ba:	087b      	lsrs	r3, r7, #1
    45bc:	4017      	ands	r7, r2
    45be:	431f      	orrs	r7, r3
    45c0:	07e2      	lsls	r2, r4, #31
    45c2:	4317      	orrs	r7, r2
    45c4:	0864      	lsrs	r4, r4, #1
    45c6:	e78f      	b.n	44e8 <__aeabi_dsub+0x10c>
    45c8:	0008      	movs	r0, r1
    45ca:	4310      	orrs	r0, r2
    45cc:	d000      	beq.n	45d0 <__aeabi_dsub+0x1f4>
    45ce:	e724      	b.n	441a <__aeabi_dsub+0x3e>
    45d0:	e721      	b.n	4416 <__aeabi_dsub+0x3a>
    45d2:	0023      	movs	r3, r4
    45d4:	433b      	orrs	r3, r7
    45d6:	d100      	bne.n	45da <__aeabi_dsub+0x1fe>
    45d8:	e1b9      	b.n	494e <__aeabi_dsub+0x572>
    45da:	2280      	movs	r2, #128	; 0x80
    45dc:	0312      	lsls	r2, r2, #12
    45de:	4314      	orrs	r4, r2
    45e0:	0324      	lsls	r4, r4, #12
    45e2:	0b24      	lsrs	r4, r4, #12
    45e4:	e79f      	b.n	4526 <__aeabi_dsub+0x14a>
    45e6:	002e      	movs	r6, r5
    45e8:	e77e      	b.n	44e8 <__aeabi_dsub+0x10c>
    45ea:	0008      	movs	r0, r1
    45ec:	4310      	orrs	r0, r2
    45ee:	d100      	bne.n	45f2 <__aeabi_dsub+0x216>
    45f0:	e0ca      	b.n	4788 <__aeabi_dsub+0x3ac>
    45f2:	1e58      	subs	r0, r3, #1
    45f4:	4684      	mov	ip, r0
    45f6:	2800      	cmp	r0, #0
    45f8:	d000      	beq.n	45fc <__aeabi_dsub+0x220>
    45fa:	e0e7      	b.n	47cc <__aeabi_dsub+0x3f0>
    45fc:	4452      	add	r2, sl
    45fe:	4552      	cmp	r2, sl
    4600:	4180      	sbcs	r0, r0
    4602:	1864      	adds	r4, r4, r1
    4604:	4240      	negs	r0, r0
    4606:	1824      	adds	r4, r4, r0
    4608:	0017      	movs	r7, r2
    460a:	2601      	movs	r6, #1
    460c:	0223      	lsls	r3, r4, #8
    460e:	d507      	bpl.n	4620 <__aeabi_dsub+0x244>
    4610:	2602      	movs	r6, #2
    4612:	e7cf      	b.n	45b4 <__aeabi_dsub+0x1d8>
    4614:	4664      	mov	r4, ip
    4616:	432c      	orrs	r4, r5
    4618:	d100      	bne.n	461c <__aeabi_dsub+0x240>
    461a:	e1b3      	b.n	4984 <__aeabi_dsub+0x5a8>
    461c:	002c      	movs	r4, r5
    461e:	4667      	mov	r7, ip
    4620:	077b      	lsls	r3, r7, #29
    4622:	d000      	beq.n	4626 <__aeabi_dsub+0x24a>
    4624:	e762      	b.n	44ec <__aeabi_dsub+0x110>
    4626:	0763      	lsls	r3, r4, #29
    4628:	08ff      	lsrs	r7, r7, #3
    462a:	431f      	orrs	r7, r3
    462c:	2501      	movs	r5, #1
    462e:	4643      	mov	r3, r8
    4630:	08e4      	lsrs	r4, r4, #3
    4632:	401d      	ands	r5, r3
    4634:	e793      	b.n	455e <__aeabi_dsub+0x182>
    4636:	2d00      	cmp	r5, #0
    4638:	d178      	bne.n	472c <__aeabi_dsub+0x350>
    463a:	1c75      	adds	r5, r6, #1
    463c:	056d      	lsls	r5, r5, #21
    463e:	0d6d      	lsrs	r5, r5, #21
    4640:	2d01      	cmp	r5, #1
    4642:	dc00      	bgt.n	4646 <__aeabi_dsub+0x26a>
    4644:	e0f2      	b.n	482c <__aeabi_dsub+0x450>
    4646:	4650      	mov	r0, sl
    4648:	1a80      	subs	r0, r0, r2
    464a:	4582      	cmp	sl, r0
    464c:	41bf      	sbcs	r7, r7
    464e:	1a65      	subs	r5, r4, r1
    4650:	427f      	negs	r7, r7
    4652:	1bed      	subs	r5, r5, r7
    4654:	4684      	mov	ip, r0
    4656:	0228      	lsls	r0, r5, #8
    4658:	d400      	bmi.n	465c <__aeabi_dsub+0x280>
    465a:	e08c      	b.n	4776 <__aeabi_dsub+0x39a>
    465c:	4650      	mov	r0, sl
    465e:	1a17      	subs	r7, r2, r0
    4660:	42ba      	cmp	r2, r7
    4662:	4192      	sbcs	r2, r2
    4664:	1b0c      	subs	r4, r1, r4
    4666:	4255      	negs	r5, r2
    4668:	1b65      	subs	r5, r4, r5
    466a:	4698      	mov	r8, r3
    466c:	e714      	b.n	4498 <__aeabi_dsub+0xbc>
    466e:	2501      	movs	r5, #1
    4670:	4643      	mov	r3, r8
    4672:	2400      	movs	r4, #0
    4674:	401d      	ands	r5, r3
    4676:	2700      	movs	r7, #0
    4678:	e755      	b.n	4526 <__aeabi_dsub+0x14a>
    467a:	4c2a      	ldr	r4, [pc, #168]	; (4724 <__aeabi_dsub+0x348>)
    467c:	1af6      	subs	r6, r6, r3
    467e:	402c      	ands	r4, r5
    4680:	e732      	b.n	44e8 <__aeabi_dsub+0x10c>
    4682:	003d      	movs	r5, r7
    4684:	3828      	subs	r0, #40	; 0x28
    4686:	4085      	lsls	r5, r0
    4688:	2700      	movs	r7, #0
    468a:	e717      	b.n	44bc <__aeabi_dsub+0xe0>
    468c:	0038      	movs	r0, r7
    468e:	f000 fa89 	bl	4ba4 <__clzsi2>
    4692:	3020      	adds	r0, #32
    4694:	e706      	b.n	44a4 <__aeabi_dsub+0xc8>
    4696:	430a      	orrs	r2, r1
    4698:	0017      	movs	r7, r2
    469a:	2100      	movs	r1, #0
    469c:	1e7a      	subs	r2, r7, #1
    469e:	4197      	sbcs	r7, r2
    46a0:	e6ee      	b.n	4480 <__aeabi_dsub+0xa4>
    46a2:	2b00      	cmp	r3, #0
    46a4:	d000      	beq.n	46a8 <__aeabi_dsub+0x2cc>
    46a6:	e0e5      	b.n	4874 <__aeabi_dsub+0x498>
    46a8:	1c73      	adds	r3, r6, #1
    46aa:	469c      	mov	ip, r3
    46ac:	055b      	lsls	r3, r3, #21
    46ae:	0d5b      	lsrs	r3, r3, #21
    46b0:	2b01      	cmp	r3, #1
    46b2:	dc00      	bgt.n	46b6 <__aeabi_dsub+0x2da>
    46b4:	e09f      	b.n	47f6 <__aeabi_dsub+0x41a>
    46b6:	4b1a      	ldr	r3, [pc, #104]	; (4720 <__aeabi_dsub+0x344>)
    46b8:	459c      	cmp	ip, r3
    46ba:	d100      	bne.n	46be <__aeabi_dsub+0x2e2>
    46bc:	e0c5      	b.n	484a <__aeabi_dsub+0x46e>
    46be:	4452      	add	r2, sl
    46c0:	4552      	cmp	r2, sl
    46c2:	4180      	sbcs	r0, r0
    46c4:	1864      	adds	r4, r4, r1
    46c6:	4240      	negs	r0, r0
    46c8:	1824      	adds	r4, r4, r0
    46ca:	07e7      	lsls	r7, r4, #31
    46cc:	0852      	lsrs	r2, r2, #1
    46ce:	4317      	orrs	r7, r2
    46d0:	0864      	lsrs	r4, r4, #1
    46d2:	4666      	mov	r6, ip
    46d4:	e708      	b.n	44e8 <__aeabi_dsub+0x10c>
    46d6:	4812      	ldr	r0, [pc, #72]	; (4720 <__aeabi_dsub+0x344>)
    46d8:	4285      	cmp	r5, r0
    46da:	d100      	bne.n	46de <__aeabi_dsub+0x302>
    46dc:	e085      	b.n	47ea <__aeabi_dsub+0x40e>
    46de:	001d      	movs	r5, r3
    46e0:	e6bc      	b.n	445c <__aeabi_dsub+0x80>
    46e2:	0029      	movs	r1, r5
    46e4:	3e1f      	subs	r6, #31
    46e6:	40f1      	lsrs	r1, r6
    46e8:	2b20      	cmp	r3, #32
    46ea:	d100      	bne.n	46ee <__aeabi_dsub+0x312>
    46ec:	e07f      	b.n	47ee <__aeabi_dsub+0x412>
    46ee:	2240      	movs	r2, #64	; 0x40
    46f0:	1ad3      	subs	r3, r2, r3
    46f2:	409d      	lsls	r5, r3
    46f4:	432f      	orrs	r7, r5
    46f6:	1e7d      	subs	r5, r7, #1
    46f8:	41af      	sbcs	r7, r5
    46fa:	2400      	movs	r4, #0
    46fc:	430f      	orrs	r7, r1
    46fe:	2600      	movs	r6, #0
    4700:	e78e      	b.n	4620 <__aeabi_dsub+0x244>
    4702:	002b      	movs	r3, r5
    4704:	000f      	movs	r7, r1
    4706:	3b20      	subs	r3, #32
    4708:	40df      	lsrs	r7, r3
    470a:	2d20      	cmp	r5, #32
    470c:	d071      	beq.n	47f2 <__aeabi_dsub+0x416>
    470e:	2340      	movs	r3, #64	; 0x40
    4710:	1b5d      	subs	r5, r3, r5
    4712:	40a9      	lsls	r1, r5
    4714:	430a      	orrs	r2, r1
    4716:	1e51      	subs	r1, r2, #1
    4718:	418a      	sbcs	r2, r1
    471a:	2100      	movs	r1, #0
    471c:	4317      	orrs	r7, r2
    471e:	e6af      	b.n	4480 <__aeabi_dsub+0xa4>
    4720:	000007ff 	.word	0x000007ff
    4724:	ff7fffff 	.word	0xff7fffff
    4728:	800fffff 	.word	0x800fffff
    472c:	2e00      	cmp	r6, #0
    472e:	d03e      	beq.n	47ae <__aeabi_dsub+0x3d2>
    4730:	4eb3      	ldr	r6, [pc, #716]	; (4a00 <__aeabi_dsub+0x624>)
    4732:	45b4      	cmp	ip, r6
    4734:	d045      	beq.n	47c2 <__aeabi_dsub+0x3e6>
    4736:	2680      	movs	r6, #128	; 0x80
    4738:	0436      	lsls	r6, r6, #16
    473a:	426d      	negs	r5, r5
    473c:	4334      	orrs	r4, r6
    473e:	2d38      	cmp	r5, #56	; 0x38
    4740:	dd00      	ble.n	4744 <__aeabi_dsub+0x368>
    4742:	e0a8      	b.n	4896 <__aeabi_dsub+0x4ba>
    4744:	2d1f      	cmp	r5, #31
    4746:	dd00      	ble.n	474a <__aeabi_dsub+0x36e>
    4748:	e11f      	b.n	498a <__aeabi_dsub+0x5ae>
    474a:	2620      	movs	r6, #32
    474c:	0027      	movs	r7, r4
    474e:	4650      	mov	r0, sl
    4750:	1b76      	subs	r6, r6, r5
    4752:	40b7      	lsls	r7, r6
    4754:	40e8      	lsrs	r0, r5
    4756:	4307      	orrs	r7, r0
    4758:	4650      	mov	r0, sl
    475a:	40b0      	lsls	r0, r6
    475c:	1e46      	subs	r6, r0, #1
    475e:	41b0      	sbcs	r0, r6
    4760:	40ec      	lsrs	r4, r5
    4762:	4338      	orrs	r0, r7
    4764:	1a17      	subs	r7, r2, r0
    4766:	42ba      	cmp	r2, r7
    4768:	4192      	sbcs	r2, r2
    476a:	1b0c      	subs	r4, r1, r4
    476c:	4252      	negs	r2, r2
    476e:	1aa4      	subs	r4, r4, r2
    4770:	4666      	mov	r6, ip
    4772:	4698      	mov	r8, r3
    4774:	e68b      	b.n	448e <__aeabi_dsub+0xb2>
    4776:	4664      	mov	r4, ip
    4778:	4667      	mov	r7, ip
    477a:	432c      	orrs	r4, r5
    477c:	d000      	beq.n	4780 <__aeabi_dsub+0x3a4>
    477e:	e68b      	b.n	4498 <__aeabi_dsub+0xbc>
    4780:	2500      	movs	r5, #0
    4782:	2600      	movs	r6, #0
    4784:	2700      	movs	r7, #0
    4786:	e6ea      	b.n	455e <__aeabi_dsub+0x182>
    4788:	001e      	movs	r6, r3
    478a:	e6ad      	b.n	44e8 <__aeabi_dsub+0x10c>
    478c:	2b1f      	cmp	r3, #31
    478e:	dc60      	bgt.n	4852 <__aeabi_dsub+0x476>
    4790:	2720      	movs	r7, #32
    4792:	1af8      	subs	r0, r7, r3
    4794:	000f      	movs	r7, r1
    4796:	4684      	mov	ip, r0
    4798:	4087      	lsls	r7, r0
    479a:	0010      	movs	r0, r2
    479c:	40d8      	lsrs	r0, r3
    479e:	4307      	orrs	r7, r0
    47a0:	4660      	mov	r0, ip
    47a2:	4082      	lsls	r2, r0
    47a4:	1e50      	subs	r0, r2, #1
    47a6:	4182      	sbcs	r2, r0
    47a8:	40d9      	lsrs	r1, r3
    47aa:	4317      	orrs	r7, r2
    47ac:	e6f5      	b.n	459a <__aeabi_dsub+0x1be>
    47ae:	0026      	movs	r6, r4
    47b0:	4650      	mov	r0, sl
    47b2:	4306      	orrs	r6, r0
    47b4:	d005      	beq.n	47c2 <__aeabi_dsub+0x3e6>
    47b6:	43ed      	mvns	r5, r5
    47b8:	2d00      	cmp	r5, #0
    47ba:	d0d3      	beq.n	4764 <__aeabi_dsub+0x388>
    47bc:	4e90      	ldr	r6, [pc, #576]	; (4a00 <__aeabi_dsub+0x624>)
    47be:	45b4      	cmp	ip, r6
    47c0:	d1bd      	bne.n	473e <__aeabi_dsub+0x362>
    47c2:	000c      	movs	r4, r1
    47c4:	0017      	movs	r7, r2
    47c6:	4666      	mov	r6, ip
    47c8:	4698      	mov	r8, r3
    47ca:	e68d      	b.n	44e8 <__aeabi_dsub+0x10c>
    47cc:	488c      	ldr	r0, [pc, #560]	; (4a00 <__aeabi_dsub+0x624>)
    47ce:	4283      	cmp	r3, r0
    47d0:	d00b      	beq.n	47ea <__aeabi_dsub+0x40e>
    47d2:	4663      	mov	r3, ip
    47d4:	e6d9      	b.n	458a <__aeabi_dsub+0x1ae>
    47d6:	2d00      	cmp	r5, #0
    47d8:	d000      	beq.n	47dc <__aeabi_dsub+0x400>
    47da:	e096      	b.n	490a <__aeabi_dsub+0x52e>
    47dc:	0008      	movs	r0, r1
    47de:	4310      	orrs	r0, r2
    47e0:	d100      	bne.n	47e4 <__aeabi_dsub+0x408>
    47e2:	e0e2      	b.n	49aa <__aeabi_dsub+0x5ce>
    47e4:	000c      	movs	r4, r1
    47e6:	0017      	movs	r7, r2
    47e8:	4698      	mov	r8, r3
    47ea:	4e85      	ldr	r6, [pc, #532]	; (4a00 <__aeabi_dsub+0x624>)
    47ec:	e67c      	b.n	44e8 <__aeabi_dsub+0x10c>
    47ee:	2500      	movs	r5, #0
    47f0:	e780      	b.n	46f4 <__aeabi_dsub+0x318>
    47f2:	2100      	movs	r1, #0
    47f4:	e78e      	b.n	4714 <__aeabi_dsub+0x338>
    47f6:	0023      	movs	r3, r4
    47f8:	4650      	mov	r0, sl
    47fa:	4303      	orrs	r3, r0
    47fc:	2e00      	cmp	r6, #0
    47fe:	d000      	beq.n	4802 <__aeabi_dsub+0x426>
    4800:	e0a8      	b.n	4954 <__aeabi_dsub+0x578>
    4802:	2b00      	cmp	r3, #0
    4804:	d100      	bne.n	4808 <__aeabi_dsub+0x42c>
    4806:	e0de      	b.n	49c6 <__aeabi_dsub+0x5ea>
    4808:	000b      	movs	r3, r1
    480a:	4313      	orrs	r3, r2
    480c:	d100      	bne.n	4810 <__aeabi_dsub+0x434>
    480e:	e66b      	b.n	44e8 <__aeabi_dsub+0x10c>
    4810:	4452      	add	r2, sl
    4812:	4552      	cmp	r2, sl
    4814:	4180      	sbcs	r0, r0
    4816:	1864      	adds	r4, r4, r1
    4818:	4240      	negs	r0, r0
    481a:	1824      	adds	r4, r4, r0
    481c:	0017      	movs	r7, r2
    481e:	0223      	lsls	r3, r4, #8
    4820:	d400      	bmi.n	4824 <__aeabi_dsub+0x448>
    4822:	e6fd      	b.n	4620 <__aeabi_dsub+0x244>
    4824:	4b77      	ldr	r3, [pc, #476]	; (4a04 <__aeabi_dsub+0x628>)
    4826:	4666      	mov	r6, ip
    4828:	401c      	ands	r4, r3
    482a:	e65d      	b.n	44e8 <__aeabi_dsub+0x10c>
    482c:	0025      	movs	r5, r4
    482e:	4650      	mov	r0, sl
    4830:	4305      	orrs	r5, r0
    4832:	2e00      	cmp	r6, #0
    4834:	d1cf      	bne.n	47d6 <__aeabi_dsub+0x3fa>
    4836:	2d00      	cmp	r5, #0
    4838:	d14f      	bne.n	48da <__aeabi_dsub+0x4fe>
    483a:	000c      	movs	r4, r1
    483c:	4314      	orrs	r4, r2
    483e:	d100      	bne.n	4842 <__aeabi_dsub+0x466>
    4840:	e0a0      	b.n	4984 <__aeabi_dsub+0x5a8>
    4842:	000c      	movs	r4, r1
    4844:	0017      	movs	r7, r2
    4846:	4698      	mov	r8, r3
    4848:	e64e      	b.n	44e8 <__aeabi_dsub+0x10c>
    484a:	4666      	mov	r6, ip
    484c:	2400      	movs	r4, #0
    484e:	2700      	movs	r7, #0
    4850:	e685      	b.n	455e <__aeabi_dsub+0x182>
    4852:	001f      	movs	r7, r3
    4854:	0008      	movs	r0, r1
    4856:	3f20      	subs	r7, #32
    4858:	40f8      	lsrs	r0, r7
    485a:	0007      	movs	r7, r0
    485c:	2b20      	cmp	r3, #32
    485e:	d100      	bne.n	4862 <__aeabi_dsub+0x486>
    4860:	e08e      	b.n	4980 <__aeabi_dsub+0x5a4>
    4862:	2040      	movs	r0, #64	; 0x40
    4864:	1ac3      	subs	r3, r0, r3
    4866:	4099      	lsls	r1, r3
    4868:	430a      	orrs	r2, r1
    486a:	1e51      	subs	r1, r2, #1
    486c:	418a      	sbcs	r2, r1
    486e:	2100      	movs	r1, #0
    4870:	4317      	orrs	r7, r2
    4872:	e692      	b.n	459a <__aeabi_dsub+0x1be>
    4874:	2e00      	cmp	r6, #0
    4876:	d114      	bne.n	48a2 <__aeabi_dsub+0x4c6>
    4878:	0026      	movs	r6, r4
    487a:	4650      	mov	r0, sl
    487c:	4306      	orrs	r6, r0
    487e:	d062      	beq.n	4946 <__aeabi_dsub+0x56a>
    4880:	43db      	mvns	r3, r3
    4882:	2b00      	cmp	r3, #0
    4884:	d15c      	bne.n	4940 <__aeabi_dsub+0x564>
    4886:	1887      	adds	r7, r0, r2
    4888:	4297      	cmp	r7, r2
    488a:	4192      	sbcs	r2, r2
    488c:	1864      	adds	r4, r4, r1
    488e:	4252      	negs	r2, r2
    4890:	18a4      	adds	r4, r4, r2
    4892:	4666      	mov	r6, ip
    4894:	e687      	b.n	45a6 <__aeabi_dsub+0x1ca>
    4896:	4650      	mov	r0, sl
    4898:	4320      	orrs	r0, r4
    489a:	1e44      	subs	r4, r0, #1
    489c:	41a0      	sbcs	r0, r4
    489e:	2400      	movs	r4, #0
    48a0:	e760      	b.n	4764 <__aeabi_dsub+0x388>
    48a2:	4e57      	ldr	r6, [pc, #348]	; (4a00 <__aeabi_dsub+0x624>)
    48a4:	45b4      	cmp	ip, r6
    48a6:	d04e      	beq.n	4946 <__aeabi_dsub+0x56a>
    48a8:	2680      	movs	r6, #128	; 0x80
    48aa:	0436      	lsls	r6, r6, #16
    48ac:	425b      	negs	r3, r3
    48ae:	4334      	orrs	r4, r6
    48b0:	2b38      	cmp	r3, #56	; 0x38
    48b2:	dd00      	ble.n	48b6 <__aeabi_dsub+0x4da>
    48b4:	e07f      	b.n	49b6 <__aeabi_dsub+0x5da>
    48b6:	2b1f      	cmp	r3, #31
    48b8:	dd00      	ble.n	48bc <__aeabi_dsub+0x4e0>
    48ba:	e08b      	b.n	49d4 <__aeabi_dsub+0x5f8>
    48bc:	2620      	movs	r6, #32
    48be:	0027      	movs	r7, r4
    48c0:	4650      	mov	r0, sl
    48c2:	1af6      	subs	r6, r6, r3
    48c4:	40b7      	lsls	r7, r6
    48c6:	40d8      	lsrs	r0, r3
    48c8:	4307      	orrs	r7, r0
    48ca:	4650      	mov	r0, sl
    48cc:	40b0      	lsls	r0, r6
    48ce:	1e46      	subs	r6, r0, #1
    48d0:	41b0      	sbcs	r0, r6
    48d2:	4307      	orrs	r7, r0
    48d4:	40dc      	lsrs	r4, r3
    48d6:	18bf      	adds	r7, r7, r2
    48d8:	e7d6      	b.n	4888 <__aeabi_dsub+0x4ac>
    48da:	000d      	movs	r5, r1
    48dc:	4315      	orrs	r5, r2
    48de:	d100      	bne.n	48e2 <__aeabi_dsub+0x506>
    48e0:	e602      	b.n	44e8 <__aeabi_dsub+0x10c>
    48e2:	4650      	mov	r0, sl
    48e4:	1a80      	subs	r0, r0, r2
    48e6:	4582      	cmp	sl, r0
    48e8:	41bf      	sbcs	r7, r7
    48ea:	1a65      	subs	r5, r4, r1
    48ec:	427f      	negs	r7, r7
    48ee:	1bed      	subs	r5, r5, r7
    48f0:	4684      	mov	ip, r0
    48f2:	0228      	lsls	r0, r5, #8
    48f4:	d400      	bmi.n	48f8 <__aeabi_dsub+0x51c>
    48f6:	e68d      	b.n	4614 <__aeabi_dsub+0x238>
    48f8:	4650      	mov	r0, sl
    48fa:	1a17      	subs	r7, r2, r0
    48fc:	42ba      	cmp	r2, r7
    48fe:	4192      	sbcs	r2, r2
    4900:	1b0c      	subs	r4, r1, r4
    4902:	4252      	negs	r2, r2
    4904:	1aa4      	subs	r4, r4, r2
    4906:	4698      	mov	r8, r3
    4908:	e5ee      	b.n	44e8 <__aeabi_dsub+0x10c>
    490a:	000d      	movs	r5, r1
    490c:	4315      	orrs	r5, r2
    490e:	d100      	bne.n	4912 <__aeabi_dsub+0x536>
    4910:	e76b      	b.n	47ea <__aeabi_dsub+0x40e>
    4912:	4650      	mov	r0, sl
    4914:	0767      	lsls	r7, r4, #29
    4916:	08c0      	lsrs	r0, r0, #3
    4918:	4307      	orrs	r7, r0
    491a:	2080      	movs	r0, #128	; 0x80
    491c:	08e4      	lsrs	r4, r4, #3
    491e:	0300      	lsls	r0, r0, #12
    4920:	4204      	tst	r4, r0
    4922:	d007      	beq.n	4934 <__aeabi_dsub+0x558>
    4924:	08cd      	lsrs	r5, r1, #3
    4926:	4205      	tst	r5, r0
    4928:	d104      	bne.n	4934 <__aeabi_dsub+0x558>
    492a:	002c      	movs	r4, r5
    492c:	4698      	mov	r8, r3
    492e:	08d7      	lsrs	r7, r2, #3
    4930:	0749      	lsls	r1, r1, #29
    4932:	430f      	orrs	r7, r1
    4934:	0f7b      	lsrs	r3, r7, #29
    4936:	00e4      	lsls	r4, r4, #3
    4938:	431c      	orrs	r4, r3
    493a:	00ff      	lsls	r7, r7, #3
    493c:	4e30      	ldr	r6, [pc, #192]	; (4a00 <__aeabi_dsub+0x624>)
    493e:	e5d3      	b.n	44e8 <__aeabi_dsub+0x10c>
    4940:	4e2f      	ldr	r6, [pc, #188]	; (4a00 <__aeabi_dsub+0x624>)
    4942:	45b4      	cmp	ip, r6
    4944:	d1b4      	bne.n	48b0 <__aeabi_dsub+0x4d4>
    4946:	000c      	movs	r4, r1
    4948:	0017      	movs	r7, r2
    494a:	4666      	mov	r6, ip
    494c:	e5cc      	b.n	44e8 <__aeabi_dsub+0x10c>
    494e:	2700      	movs	r7, #0
    4950:	2400      	movs	r4, #0
    4952:	e5e8      	b.n	4526 <__aeabi_dsub+0x14a>
    4954:	2b00      	cmp	r3, #0
    4956:	d039      	beq.n	49cc <__aeabi_dsub+0x5f0>
    4958:	000b      	movs	r3, r1
    495a:	4313      	orrs	r3, r2
    495c:	d100      	bne.n	4960 <__aeabi_dsub+0x584>
    495e:	e744      	b.n	47ea <__aeabi_dsub+0x40e>
    4960:	08c0      	lsrs	r0, r0, #3
    4962:	0767      	lsls	r7, r4, #29
    4964:	4307      	orrs	r7, r0
    4966:	2080      	movs	r0, #128	; 0x80
    4968:	08e4      	lsrs	r4, r4, #3
    496a:	0300      	lsls	r0, r0, #12
    496c:	4204      	tst	r4, r0
    496e:	d0e1      	beq.n	4934 <__aeabi_dsub+0x558>
    4970:	08cb      	lsrs	r3, r1, #3
    4972:	4203      	tst	r3, r0
    4974:	d1de      	bne.n	4934 <__aeabi_dsub+0x558>
    4976:	08d7      	lsrs	r7, r2, #3
    4978:	0749      	lsls	r1, r1, #29
    497a:	430f      	orrs	r7, r1
    497c:	001c      	movs	r4, r3
    497e:	e7d9      	b.n	4934 <__aeabi_dsub+0x558>
    4980:	2100      	movs	r1, #0
    4982:	e771      	b.n	4868 <__aeabi_dsub+0x48c>
    4984:	2500      	movs	r5, #0
    4986:	2700      	movs	r7, #0
    4988:	e5e9      	b.n	455e <__aeabi_dsub+0x182>
    498a:	002e      	movs	r6, r5
    498c:	0027      	movs	r7, r4
    498e:	3e20      	subs	r6, #32
    4990:	40f7      	lsrs	r7, r6
    4992:	2d20      	cmp	r5, #32
    4994:	d02f      	beq.n	49f6 <__aeabi_dsub+0x61a>
    4996:	2640      	movs	r6, #64	; 0x40
    4998:	1b75      	subs	r5, r6, r5
    499a:	40ac      	lsls	r4, r5
    499c:	4650      	mov	r0, sl
    499e:	4320      	orrs	r0, r4
    49a0:	1e44      	subs	r4, r0, #1
    49a2:	41a0      	sbcs	r0, r4
    49a4:	2400      	movs	r4, #0
    49a6:	4338      	orrs	r0, r7
    49a8:	e6dc      	b.n	4764 <__aeabi_dsub+0x388>
    49aa:	2480      	movs	r4, #128	; 0x80
    49ac:	2500      	movs	r5, #0
    49ae:	0324      	lsls	r4, r4, #12
    49b0:	4e13      	ldr	r6, [pc, #76]	; (4a00 <__aeabi_dsub+0x624>)
    49b2:	2700      	movs	r7, #0
    49b4:	e5d3      	b.n	455e <__aeabi_dsub+0x182>
    49b6:	4650      	mov	r0, sl
    49b8:	4320      	orrs	r0, r4
    49ba:	0007      	movs	r7, r0
    49bc:	1e78      	subs	r0, r7, #1
    49be:	4187      	sbcs	r7, r0
    49c0:	2400      	movs	r4, #0
    49c2:	18bf      	adds	r7, r7, r2
    49c4:	e760      	b.n	4888 <__aeabi_dsub+0x4ac>
    49c6:	000c      	movs	r4, r1
    49c8:	0017      	movs	r7, r2
    49ca:	e58d      	b.n	44e8 <__aeabi_dsub+0x10c>
    49cc:	000c      	movs	r4, r1
    49ce:	0017      	movs	r7, r2
    49d0:	4e0b      	ldr	r6, [pc, #44]	; (4a00 <__aeabi_dsub+0x624>)
    49d2:	e589      	b.n	44e8 <__aeabi_dsub+0x10c>
    49d4:	001e      	movs	r6, r3
    49d6:	0027      	movs	r7, r4
    49d8:	3e20      	subs	r6, #32
    49da:	40f7      	lsrs	r7, r6
    49dc:	2b20      	cmp	r3, #32
    49de:	d00c      	beq.n	49fa <__aeabi_dsub+0x61e>
    49e0:	2640      	movs	r6, #64	; 0x40
    49e2:	1af3      	subs	r3, r6, r3
    49e4:	409c      	lsls	r4, r3
    49e6:	4650      	mov	r0, sl
    49e8:	4320      	orrs	r0, r4
    49ea:	1e44      	subs	r4, r0, #1
    49ec:	41a0      	sbcs	r0, r4
    49ee:	4307      	orrs	r7, r0
    49f0:	2400      	movs	r4, #0
    49f2:	18bf      	adds	r7, r7, r2
    49f4:	e748      	b.n	4888 <__aeabi_dsub+0x4ac>
    49f6:	2400      	movs	r4, #0
    49f8:	e7d0      	b.n	499c <__aeabi_dsub+0x5c0>
    49fa:	2400      	movs	r4, #0
    49fc:	e7f3      	b.n	49e6 <__aeabi_dsub+0x60a>
    49fe:	46c0      	nop			; (mov r8, r8)
    4a00:	000007ff 	.word	0x000007ff
    4a04:	ff7fffff 	.word	0xff7fffff

00004a08 <__aeabi_dcmpun>:
    4a08:	b570      	push	{r4, r5, r6, lr}
    4a0a:	4e0e      	ldr	r6, [pc, #56]	; (4a44 <__aeabi_dcmpun+0x3c>)
    4a0c:	030d      	lsls	r5, r1, #12
    4a0e:	031c      	lsls	r4, r3, #12
    4a10:	0049      	lsls	r1, r1, #1
    4a12:	005b      	lsls	r3, r3, #1
    4a14:	0b2d      	lsrs	r5, r5, #12
    4a16:	0d49      	lsrs	r1, r1, #21
    4a18:	0b24      	lsrs	r4, r4, #12
    4a1a:	0d5b      	lsrs	r3, r3, #21
    4a1c:	42b1      	cmp	r1, r6
    4a1e:	d004      	beq.n	4a2a <__aeabi_dcmpun+0x22>
    4a20:	4908      	ldr	r1, [pc, #32]	; (4a44 <__aeabi_dcmpun+0x3c>)
    4a22:	2000      	movs	r0, #0
    4a24:	428b      	cmp	r3, r1
    4a26:	d008      	beq.n	4a3a <__aeabi_dcmpun+0x32>
    4a28:	bd70      	pop	{r4, r5, r6, pc}
    4a2a:	4305      	orrs	r5, r0
    4a2c:	2001      	movs	r0, #1
    4a2e:	2d00      	cmp	r5, #0
    4a30:	d1fa      	bne.n	4a28 <__aeabi_dcmpun+0x20>
    4a32:	4904      	ldr	r1, [pc, #16]	; (4a44 <__aeabi_dcmpun+0x3c>)
    4a34:	2000      	movs	r0, #0
    4a36:	428b      	cmp	r3, r1
    4a38:	d1f6      	bne.n	4a28 <__aeabi_dcmpun+0x20>
    4a3a:	4314      	orrs	r4, r2
    4a3c:	0020      	movs	r0, r4
    4a3e:	1e44      	subs	r4, r0, #1
    4a40:	41a0      	sbcs	r0, r4
    4a42:	e7f1      	b.n	4a28 <__aeabi_dcmpun+0x20>
    4a44:	000007ff 	.word	0x000007ff

00004a48 <__aeabi_d2iz>:
    4a48:	b530      	push	{r4, r5, lr}
    4a4a:	4d13      	ldr	r5, [pc, #76]	; (4a98 <__aeabi_d2iz+0x50>)
    4a4c:	030a      	lsls	r2, r1, #12
    4a4e:	004b      	lsls	r3, r1, #1
    4a50:	0b12      	lsrs	r2, r2, #12
    4a52:	0d5b      	lsrs	r3, r3, #21
    4a54:	0fc9      	lsrs	r1, r1, #31
    4a56:	2400      	movs	r4, #0
    4a58:	42ab      	cmp	r3, r5
    4a5a:	dd10      	ble.n	4a7e <__aeabi_d2iz+0x36>
    4a5c:	4c0f      	ldr	r4, [pc, #60]	; (4a9c <__aeabi_d2iz+0x54>)
    4a5e:	42a3      	cmp	r3, r4
    4a60:	dc0f      	bgt.n	4a82 <__aeabi_d2iz+0x3a>
    4a62:	2480      	movs	r4, #128	; 0x80
    4a64:	4d0e      	ldr	r5, [pc, #56]	; (4aa0 <__aeabi_d2iz+0x58>)
    4a66:	0364      	lsls	r4, r4, #13
    4a68:	4322      	orrs	r2, r4
    4a6a:	1aed      	subs	r5, r5, r3
    4a6c:	2d1f      	cmp	r5, #31
    4a6e:	dd0b      	ble.n	4a88 <__aeabi_d2iz+0x40>
    4a70:	480c      	ldr	r0, [pc, #48]	; (4aa4 <__aeabi_d2iz+0x5c>)
    4a72:	1ac3      	subs	r3, r0, r3
    4a74:	40da      	lsrs	r2, r3
    4a76:	4254      	negs	r4, r2
    4a78:	2900      	cmp	r1, #0
    4a7a:	d100      	bne.n	4a7e <__aeabi_d2iz+0x36>
    4a7c:	0014      	movs	r4, r2
    4a7e:	0020      	movs	r0, r4
    4a80:	bd30      	pop	{r4, r5, pc}
    4a82:	4b09      	ldr	r3, [pc, #36]	; (4aa8 <__aeabi_d2iz+0x60>)
    4a84:	18cc      	adds	r4, r1, r3
    4a86:	e7fa      	b.n	4a7e <__aeabi_d2iz+0x36>
    4a88:	4c08      	ldr	r4, [pc, #32]	; (4aac <__aeabi_d2iz+0x64>)
    4a8a:	40e8      	lsrs	r0, r5
    4a8c:	46a4      	mov	ip, r4
    4a8e:	4463      	add	r3, ip
    4a90:	409a      	lsls	r2, r3
    4a92:	4302      	orrs	r2, r0
    4a94:	e7ef      	b.n	4a76 <__aeabi_d2iz+0x2e>
    4a96:	46c0      	nop			; (mov r8, r8)
    4a98:	000003fe 	.word	0x000003fe
    4a9c:	0000041d 	.word	0x0000041d
    4aa0:	00000433 	.word	0x00000433
    4aa4:	00000413 	.word	0x00000413
    4aa8:	7fffffff 	.word	0x7fffffff
    4aac:	fffffbed 	.word	0xfffffbed

00004ab0 <__aeabi_i2d>:
    4ab0:	b570      	push	{r4, r5, r6, lr}
    4ab2:	2800      	cmp	r0, #0
    4ab4:	d030      	beq.n	4b18 <__aeabi_i2d+0x68>
    4ab6:	17c3      	asrs	r3, r0, #31
    4ab8:	18c4      	adds	r4, r0, r3
    4aba:	405c      	eors	r4, r3
    4abc:	0fc5      	lsrs	r5, r0, #31
    4abe:	0020      	movs	r0, r4
    4ac0:	f000 f870 	bl	4ba4 <__clzsi2>
    4ac4:	4b17      	ldr	r3, [pc, #92]	; (4b24 <__aeabi_i2d+0x74>)
    4ac6:	4a18      	ldr	r2, [pc, #96]	; (4b28 <__aeabi_i2d+0x78>)
    4ac8:	1a1b      	subs	r3, r3, r0
    4aca:	1ad2      	subs	r2, r2, r3
    4acc:	2a1f      	cmp	r2, #31
    4ace:	dd18      	ble.n	4b02 <__aeabi_i2d+0x52>
    4ad0:	4a16      	ldr	r2, [pc, #88]	; (4b2c <__aeabi_i2d+0x7c>)
    4ad2:	1ad2      	subs	r2, r2, r3
    4ad4:	4094      	lsls	r4, r2
    4ad6:	2200      	movs	r2, #0
    4ad8:	0324      	lsls	r4, r4, #12
    4ada:	055b      	lsls	r3, r3, #21
    4adc:	0b24      	lsrs	r4, r4, #12
    4ade:	0d5b      	lsrs	r3, r3, #21
    4ae0:	2100      	movs	r1, #0
    4ae2:	0010      	movs	r0, r2
    4ae4:	0324      	lsls	r4, r4, #12
    4ae6:	0d0a      	lsrs	r2, r1, #20
    4ae8:	0b24      	lsrs	r4, r4, #12
    4aea:	0512      	lsls	r2, r2, #20
    4aec:	4322      	orrs	r2, r4
    4aee:	4c10      	ldr	r4, [pc, #64]	; (4b30 <__aeabi_i2d+0x80>)
    4af0:	051b      	lsls	r3, r3, #20
    4af2:	4022      	ands	r2, r4
    4af4:	4313      	orrs	r3, r2
    4af6:	005b      	lsls	r3, r3, #1
    4af8:	07ed      	lsls	r5, r5, #31
    4afa:	085b      	lsrs	r3, r3, #1
    4afc:	432b      	orrs	r3, r5
    4afe:	0019      	movs	r1, r3
    4b00:	bd70      	pop	{r4, r5, r6, pc}
    4b02:	0021      	movs	r1, r4
    4b04:	4091      	lsls	r1, r2
    4b06:	000a      	movs	r2, r1
    4b08:	210b      	movs	r1, #11
    4b0a:	1a08      	subs	r0, r1, r0
    4b0c:	40c4      	lsrs	r4, r0
    4b0e:	055b      	lsls	r3, r3, #21
    4b10:	0324      	lsls	r4, r4, #12
    4b12:	0b24      	lsrs	r4, r4, #12
    4b14:	0d5b      	lsrs	r3, r3, #21
    4b16:	e7e3      	b.n	4ae0 <__aeabi_i2d+0x30>
    4b18:	2500      	movs	r5, #0
    4b1a:	2300      	movs	r3, #0
    4b1c:	2400      	movs	r4, #0
    4b1e:	2200      	movs	r2, #0
    4b20:	e7de      	b.n	4ae0 <__aeabi_i2d+0x30>
    4b22:	46c0      	nop			; (mov r8, r8)
    4b24:	0000041e 	.word	0x0000041e
    4b28:	00000433 	.word	0x00000433
    4b2c:	00000413 	.word	0x00000413
    4b30:	800fffff 	.word	0x800fffff

00004b34 <__aeabi_ui2d>:
    4b34:	b510      	push	{r4, lr}
    4b36:	1e04      	subs	r4, r0, #0
    4b38:	d028      	beq.n	4b8c <__aeabi_ui2d+0x58>
    4b3a:	f000 f833 	bl	4ba4 <__clzsi2>
    4b3e:	4b15      	ldr	r3, [pc, #84]	; (4b94 <__aeabi_ui2d+0x60>)
    4b40:	4a15      	ldr	r2, [pc, #84]	; (4b98 <__aeabi_ui2d+0x64>)
    4b42:	1a1b      	subs	r3, r3, r0
    4b44:	1ad2      	subs	r2, r2, r3
    4b46:	2a1f      	cmp	r2, #31
    4b48:	dd15      	ble.n	4b76 <__aeabi_ui2d+0x42>
    4b4a:	4a14      	ldr	r2, [pc, #80]	; (4b9c <__aeabi_ui2d+0x68>)
    4b4c:	1ad2      	subs	r2, r2, r3
    4b4e:	4094      	lsls	r4, r2
    4b50:	2200      	movs	r2, #0
    4b52:	0324      	lsls	r4, r4, #12
    4b54:	055b      	lsls	r3, r3, #21
    4b56:	0b24      	lsrs	r4, r4, #12
    4b58:	0d5b      	lsrs	r3, r3, #21
    4b5a:	2100      	movs	r1, #0
    4b5c:	0010      	movs	r0, r2
    4b5e:	0324      	lsls	r4, r4, #12
    4b60:	0d0a      	lsrs	r2, r1, #20
    4b62:	0b24      	lsrs	r4, r4, #12
    4b64:	0512      	lsls	r2, r2, #20
    4b66:	4322      	orrs	r2, r4
    4b68:	4c0d      	ldr	r4, [pc, #52]	; (4ba0 <__aeabi_ui2d+0x6c>)
    4b6a:	051b      	lsls	r3, r3, #20
    4b6c:	4022      	ands	r2, r4
    4b6e:	4313      	orrs	r3, r2
    4b70:	005b      	lsls	r3, r3, #1
    4b72:	0859      	lsrs	r1, r3, #1
    4b74:	bd10      	pop	{r4, pc}
    4b76:	0021      	movs	r1, r4
    4b78:	4091      	lsls	r1, r2
    4b7a:	000a      	movs	r2, r1
    4b7c:	210b      	movs	r1, #11
    4b7e:	1a08      	subs	r0, r1, r0
    4b80:	40c4      	lsrs	r4, r0
    4b82:	055b      	lsls	r3, r3, #21
    4b84:	0324      	lsls	r4, r4, #12
    4b86:	0b24      	lsrs	r4, r4, #12
    4b88:	0d5b      	lsrs	r3, r3, #21
    4b8a:	e7e6      	b.n	4b5a <__aeabi_ui2d+0x26>
    4b8c:	2300      	movs	r3, #0
    4b8e:	2400      	movs	r4, #0
    4b90:	2200      	movs	r2, #0
    4b92:	e7e2      	b.n	4b5a <__aeabi_ui2d+0x26>
    4b94:	0000041e 	.word	0x0000041e
    4b98:	00000433 	.word	0x00000433
    4b9c:	00000413 	.word	0x00000413
    4ba0:	800fffff 	.word	0x800fffff

00004ba4 <__clzsi2>:
    4ba4:	211c      	movs	r1, #28
    4ba6:	2301      	movs	r3, #1
    4ba8:	041b      	lsls	r3, r3, #16
    4baa:	4298      	cmp	r0, r3
    4bac:	d301      	bcc.n	4bb2 <__clzsi2+0xe>
    4bae:	0c00      	lsrs	r0, r0, #16
    4bb0:	3910      	subs	r1, #16
    4bb2:	0a1b      	lsrs	r3, r3, #8
    4bb4:	4298      	cmp	r0, r3
    4bb6:	d301      	bcc.n	4bbc <__clzsi2+0x18>
    4bb8:	0a00      	lsrs	r0, r0, #8
    4bba:	3908      	subs	r1, #8
    4bbc:	091b      	lsrs	r3, r3, #4
    4bbe:	4298      	cmp	r0, r3
    4bc0:	d301      	bcc.n	4bc6 <__clzsi2+0x22>
    4bc2:	0900      	lsrs	r0, r0, #4
    4bc4:	3904      	subs	r1, #4
    4bc6:	a202      	add	r2, pc, #8	; (adr r2, 4bd0 <__clzsi2+0x2c>)
    4bc8:	5c10      	ldrb	r0, [r2, r0]
    4bca:	1840      	adds	r0, r0, r1
    4bcc:	4770      	bx	lr
    4bce:	46c0      	nop			; (mov r8, r8)
    4bd0:	02020304 	.word	0x02020304
    4bd4:	01010101 	.word	0x01010101
	...

00004be0 <__errno>:
    4be0:	4b01      	ldr	r3, [pc, #4]	; (4be8 <__errno+0x8>)
    4be2:	6818      	ldr	r0, [r3, #0]
    4be4:	4770      	bx	lr
    4be6:	46c0      	nop			; (mov r8, r8)
    4be8:	20000010 	.word	0x20000010

00004bec <__libc_init_array>:
    4bec:	b570      	push	{r4, r5, r6, lr}
    4bee:	4e0d      	ldr	r6, [pc, #52]	; (4c24 <__libc_init_array+0x38>)
    4bf0:	4d0d      	ldr	r5, [pc, #52]	; (4c28 <__libc_init_array+0x3c>)
    4bf2:	2400      	movs	r4, #0
    4bf4:	1bad      	subs	r5, r5, r6
    4bf6:	10ad      	asrs	r5, r5, #2
    4bf8:	d005      	beq.n	4c06 <__libc_init_array+0x1a>
    4bfa:	00a3      	lsls	r3, r4, #2
    4bfc:	58f3      	ldr	r3, [r6, r3]
    4bfe:	3401      	adds	r4, #1
    4c00:	4798      	blx	r3
    4c02:	42a5      	cmp	r5, r4
    4c04:	d1f9      	bne.n	4bfa <__libc_init_array+0xe>
    4c06:	f000 fa0f 	bl	5028 <_init>
    4c0a:	4e08      	ldr	r6, [pc, #32]	; (4c2c <__libc_init_array+0x40>)
    4c0c:	4d08      	ldr	r5, [pc, #32]	; (4c30 <__libc_init_array+0x44>)
    4c0e:	2400      	movs	r4, #0
    4c10:	1bad      	subs	r5, r5, r6
    4c12:	10ad      	asrs	r5, r5, #2
    4c14:	d005      	beq.n	4c22 <__libc_init_array+0x36>
    4c16:	00a3      	lsls	r3, r4, #2
    4c18:	58f3      	ldr	r3, [r6, r3]
    4c1a:	3401      	adds	r4, #1
    4c1c:	4798      	blx	r3
    4c1e:	42a5      	cmp	r5, r4
    4c20:	d1f9      	bne.n	4c16 <__libc_init_array+0x2a>
    4c22:	bd70      	pop	{r4, r5, r6, pc}
    4c24:	00005034 	.word	0x00005034
    4c28:	00005034 	.word	0x00005034
    4c2c:	00005034 	.word	0x00005034
    4c30:	0000503c 	.word	0x0000503c

00004c34 <memcpy>:
    4c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c36:	0005      	movs	r5, r0
    4c38:	2a0f      	cmp	r2, #15
    4c3a:	d92f      	bls.n	4c9c <memcpy+0x68>
    4c3c:	000b      	movs	r3, r1
    4c3e:	4303      	orrs	r3, r0
    4c40:	079b      	lsls	r3, r3, #30
    4c42:	d134      	bne.n	4cae <memcpy+0x7a>
    4c44:	0016      	movs	r6, r2
    4c46:	000c      	movs	r4, r1
    4c48:	0003      	movs	r3, r0
    4c4a:	3e10      	subs	r6, #16
    4c4c:	0935      	lsrs	r5, r6, #4
    4c4e:	3501      	adds	r5, #1
    4c50:	012d      	lsls	r5, r5, #4
    4c52:	1945      	adds	r5, r0, r5
    4c54:	6827      	ldr	r7, [r4, #0]
    4c56:	601f      	str	r7, [r3, #0]
    4c58:	6867      	ldr	r7, [r4, #4]
    4c5a:	605f      	str	r7, [r3, #4]
    4c5c:	68a7      	ldr	r7, [r4, #8]
    4c5e:	609f      	str	r7, [r3, #8]
    4c60:	68e7      	ldr	r7, [r4, #12]
    4c62:	3410      	adds	r4, #16
    4c64:	60df      	str	r7, [r3, #12]
    4c66:	3310      	adds	r3, #16
    4c68:	429d      	cmp	r5, r3
    4c6a:	d1f3      	bne.n	4c54 <memcpy+0x20>
    4c6c:	230f      	movs	r3, #15
    4c6e:	439e      	bics	r6, r3
    4c70:	3610      	adds	r6, #16
    4c72:	1985      	adds	r5, r0, r6
    4c74:	1989      	adds	r1, r1, r6
    4c76:	4013      	ands	r3, r2
    4c78:	2b03      	cmp	r3, #3
    4c7a:	d91a      	bls.n	4cb2 <memcpy+0x7e>
    4c7c:	1f1e      	subs	r6, r3, #4
    4c7e:	2300      	movs	r3, #0
    4c80:	08b4      	lsrs	r4, r6, #2
    4c82:	3401      	adds	r4, #1
    4c84:	00a4      	lsls	r4, r4, #2
    4c86:	58cf      	ldr	r7, [r1, r3]
    4c88:	50ef      	str	r7, [r5, r3]
    4c8a:	3304      	adds	r3, #4
    4c8c:	42a3      	cmp	r3, r4
    4c8e:	d1fa      	bne.n	4c86 <memcpy+0x52>
    4c90:	2403      	movs	r4, #3
    4c92:	43a6      	bics	r6, r4
    4c94:	1d33      	adds	r3, r6, #4
    4c96:	4022      	ands	r2, r4
    4c98:	18c9      	adds	r1, r1, r3
    4c9a:	18ed      	adds	r5, r5, r3
    4c9c:	2a00      	cmp	r2, #0
    4c9e:	d005      	beq.n	4cac <memcpy+0x78>
    4ca0:	2300      	movs	r3, #0
    4ca2:	5ccc      	ldrb	r4, [r1, r3]
    4ca4:	54ec      	strb	r4, [r5, r3]
    4ca6:	3301      	adds	r3, #1
    4ca8:	4293      	cmp	r3, r2
    4caa:	d1fa      	bne.n	4ca2 <memcpy+0x6e>
    4cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cae:	0005      	movs	r5, r0
    4cb0:	e7f6      	b.n	4ca0 <memcpy+0x6c>
    4cb2:	001a      	movs	r2, r3
    4cb4:	e7f2      	b.n	4c9c <memcpy+0x68>
    4cb6:	46c0      	nop			; (mov r8, r8)

00004cb8 <memset>:
    4cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cba:	0783      	lsls	r3, r0, #30
    4cbc:	d043      	beq.n	4d46 <memset+0x8e>
    4cbe:	1e54      	subs	r4, r2, #1
    4cc0:	2a00      	cmp	r2, #0
    4cc2:	d03f      	beq.n	4d44 <memset+0x8c>
    4cc4:	b2ce      	uxtb	r6, r1
    4cc6:	0002      	movs	r2, r0
    4cc8:	2503      	movs	r5, #3
    4cca:	e002      	b.n	4cd2 <memset+0x1a>
    4ccc:	001a      	movs	r2, r3
    4cce:	3c01      	subs	r4, #1
    4cd0:	d338      	bcc.n	4d44 <memset+0x8c>
    4cd2:	1c53      	adds	r3, r2, #1
    4cd4:	7016      	strb	r6, [r2, #0]
    4cd6:	422b      	tst	r3, r5
    4cd8:	d1f8      	bne.n	4ccc <memset+0x14>
    4cda:	2c03      	cmp	r4, #3
    4cdc:	d92a      	bls.n	4d34 <memset+0x7c>
    4cde:	22ff      	movs	r2, #255	; 0xff
    4ce0:	400a      	ands	r2, r1
    4ce2:	0215      	lsls	r5, r2, #8
    4ce4:	4315      	orrs	r5, r2
    4ce6:	042a      	lsls	r2, r5, #16
    4ce8:	4315      	orrs	r5, r2
    4cea:	2c0f      	cmp	r4, #15
    4cec:	d914      	bls.n	4d18 <memset+0x60>
    4cee:	0027      	movs	r7, r4
    4cf0:	001a      	movs	r2, r3
    4cf2:	3f10      	subs	r7, #16
    4cf4:	093e      	lsrs	r6, r7, #4
    4cf6:	3601      	adds	r6, #1
    4cf8:	0136      	lsls	r6, r6, #4
    4cfa:	199e      	adds	r6, r3, r6
    4cfc:	6015      	str	r5, [r2, #0]
    4cfe:	6055      	str	r5, [r2, #4]
    4d00:	6095      	str	r5, [r2, #8]
    4d02:	60d5      	str	r5, [r2, #12]
    4d04:	3210      	adds	r2, #16
    4d06:	4296      	cmp	r6, r2
    4d08:	d1f8      	bne.n	4cfc <memset+0x44>
    4d0a:	220f      	movs	r2, #15
    4d0c:	4397      	bics	r7, r2
    4d0e:	3710      	adds	r7, #16
    4d10:	19db      	adds	r3, r3, r7
    4d12:	4014      	ands	r4, r2
    4d14:	2c03      	cmp	r4, #3
    4d16:	d90d      	bls.n	4d34 <memset+0x7c>
    4d18:	001a      	movs	r2, r3
    4d1a:	1f27      	subs	r7, r4, #4
    4d1c:	08be      	lsrs	r6, r7, #2
    4d1e:	3601      	adds	r6, #1
    4d20:	00b6      	lsls	r6, r6, #2
    4d22:	199e      	adds	r6, r3, r6
    4d24:	c220      	stmia	r2!, {r5}
    4d26:	42b2      	cmp	r2, r6
    4d28:	d1fc      	bne.n	4d24 <memset+0x6c>
    4d2a:	2203      	movs	r2, #3
    4d2c:	4397      	bics	r7, r2
    4d2e:	3704      	adds	r7, #4
    4d30:	19db      	adds	r3, r3, r7
    4d32:	4014      	ands	r4, r2
    4d34:	2c00      	cmp	r4, #0
    4d36:	d005      	beq.n	4d44 <memset+0x8c>
    4d38:	b2c9      	uxtb	r1, r1
    4d3a:	191c      	adds	r4, r3, r4
    4d3c:	7019      	strb	r1, [r3, #0]
    4d3e:	3301      	adds	r3, #1
    4d40:	429c      	cmp	r4, r3
    4d42:	d1fb      	bne.n	4d3c <memset+0x84>
    4d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d46:	0014      	movs	r4, r2
    4d48:	0003      	movs	r3, r0
    4d4a:	e7c6      	b.n	4cda <memset+0x22>

00004d4c <register_fini>:
    4d4c:	4b03      	ldr	r3, [pc, #12]	; (4d5c <register_fini+0x10>)
    4d4e:	b510      	push	{r4, lr}
    4d50:	2b00      	cmp	r3, #0
    4d52:	d002      	beq.n	4d5a <register_fini+0xe>
    4d54:	4802      	ldr	r0, [pc, #8]	; (4d60 <register_fini+0x14>)
    4d56:	f000 f805 	bl	4d64 <atexit>
    4d5a:	bd10      	pop	{r4, pc}
    4d5c:	00000000 	.word	0x00000000
    4d60:	00004d75 	.word	0x00004d75

00004d64 <atexit>:
    4d64:	b510      	push	{r4, lr}
    4d66:	0001      	movs	r1, r0
    4d68:	2300      	movs	r3, #0
    4d6a:	2200      	movs	r2, #0
    4d6c:	2000      	movs	r0, #0
    4d6e:	f000 f81f 	bl	4db0 <__register_exitproc>
    4d72:	bd10      	pop	{r4, pc}

00004d74 <__libc_fini_array>:
    4d74:	b570      	push	{r4, r5, r6, lr}
    4d76:	4b09      	ldr	r3, [pc, #36]	; (4d9c <__libc_fini_array+0x28>)
    4d78:	4c09      	ldr	r4, [pc, #36]	; (4da0 <__libc_fini_array+0x2c>)
    4d7a:	1ae4      	subs	r4, r4, r3
    4d7c:	10a4      	asrs	r4, r4, #2
    4d7e:	d009      	beq.n	4d94 <__libc_fini_array+0x20>
    4d80:	4a08      	ldr	r2, [pc, #32]	; (4da4 <__libc_fini_array+0x30>)
    4d82:	18a5      	adds	r5, r4, r2
    4d84:	00ad      	lsls	r5, r5, #2
    4d86:	18ed      	adds	r5, r5, r3
    4d88:	682b      	ldr	r3, [r5, #0]
    4d8a:	3c01      	subs	r4, #1
    4d8c:	4798      	blx	r3
    4d8e:	3d04      	subs	r5, #4
    4d90:	2c00      	cmp	r4, #0
    4d92:	d1f9      	bne.n	4d88 <__libc_fini_array+0x14>
    4d94:	f000 f952 	bl	503c <_fini>
    4d98:	bd70      	pop	{r4, r5, r6, pc}
    4d9a:	46c0      	nop			; (mov r8, r8)
    4d9c:	00005048 	.word	0x00005048
    4da0:	0000504c 	.word	0x0000504c
    4da4:	3fffffff 	.word	0x3fffffff

00004da8 <__retarget_lock_acquire_recursive>:
    4da8:	4770      	bx	lr
    4daa:	46c0      	nop			; (mov r8, r8)

00004dac <__retarget_lock_release_recursive>:
    4dac:	4770      	bx	lr
    4dae:	46c0      	nop			; (mov r8, r8)

00004db0 <__register_exitproc>:
    4db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4db2:	464e      	mov	r6, r9
    4db4:	4645      	mov	r5, r8
    4db6:	46de      	mov	lr, fp
    4db8:	4657      	mov	r7, sl
    4dba:	b5e0      	push	{r5, r6, r7, lr}
    4dbc:	4d36      	ldr	r5, [pc, #216]	; (4e98 <__register_exitproc+0xe8>)
    4dbe:	b083      	sub	sp, #12
    4dc0:	0006      	movs	r6, r0
    4dc2:	6828      	ldr	r0, [r5, #0]
    4dc4:	4698      	mov	r8, r3
    4dc6:	000f      	movs	r7, r1
    4dc8:	4691      	mov	r9, r2
    4dca:	f7ff ffed 	bl	4da8 <__retarget_lock_acquire_recursive>
    4dce:	4b33      	ldr	r3, [pc, #204]	; (4e9c <__register_exitproc+0xec>)
    4dd0:	681c      	ldr	r4, [r3, #0]
    4dd2:	23a4      	movs	r3, #164	; 0xa4
    4dd4:	005b      	lsls	r3, r3, #1
    4dd6:	58e0      	ldr	r0, [r4, r3]
    4dd8:	2800      	cmp	r0, #0
    4dda:	d052      	beq.n	4e82 <__register_exitproc+0xd2>
    4ddc:	6843      	ldr	r3, [r0, #4]
    4dde:	2b1f      	cmp	r3, #31
    4de0:	dc13      	bgt.n	4e0a <__register_exitproc+0x5a>
    4de2:	1c5a      	adds	r2, r3, #1
    4de4:	9201      	str	r2, [sp, #4]
    4de6:	2e00      	cmp	r6, #0
    4de8:	d128      	bne.n	4e3c <__register_exitproc+0x8c>
    4dea:	9a01      	ldr	r2, [sp, #4]
    4dec:	3302      	adds	r3, #2
    4dee:	009b      	lsls	r3, r3, #2
    4df0:	6042      	str	r2, [r0, #4]
    4df2:	501f      	str	r7, [r3, r0]
    4df4:	6828      	ldr	r0, [r5, #0]
    4df6:	f7ff ffd9 	bl	4dac <__retarget_lock_release_recursive>
    4dfa:	2000      	movs	r0, #0
    4dfc:	b003      	add	sp, #12
    4dfe:	bc3c      	pop	{r2, r3, r4, r5}
    4e00:	4690      	mov	r8, r2
    4e02:	4699      	mov	r9, r3
    4e04:	46a2      	mov	sl, r4
    4e06:	46ab      	mov	fp, r5
    4e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e0a:	4b25      	ldr	r3, [pc, #148]	; (4ea0 <__register_exitproc+0xf0>)
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d03d      	beq.n	4e8c <__register_exitproc+0xdc>
    4e10:	20c8      	movs	r0, #200	; 0xc8
    4e12:	0040      	lsls	r0, r0, #1
    4e14:	e000      	b.n	4e18 <__register_exitproc+0x68>
    4e16:	bf00      	nop
    4e18:	2800      	cmp	r0, #0
    4e1a:	d037      	beq.n	4e8c <__register_exitproc+0xdc>
    4e1c:	22a4      	movs	r2, #164	; 0xa4
    4e1e:	2300      	movs	r3, #0
    4e20:	0052      	lsls	r2, r2, #1
    4e22:	58a1      	ldr	r1, [r4, r2]
    4e24:	6043      	str	r3, [r0, #4]
    4e26:	6001      	str	r1, [r0, #0]
    4e28:	50a0      	str	r0, [r4, r2]
    4e2a:	3240      	adds	r2, #64	; 0x40
    4e2c:	5083      	str	r3, [r0, r2]
    4e2e:	3204      	adds	r2, #4
    4e30:	5083      	str	r3, [r0, r2]
    4e32:	3301      	adds	r3, #1
    4e34:	9301      	str	r3, [sp, #4]
    4e36:	2300      	movs	r3, #0
    4e38:	2e00      	cmp	r6, #0
    4e3a:	d0d6      	beq.n	4dea <__register_exitproc+0x3a>
    4e3c:	009a      	lsls	r2, r3, #2
    4e3e:	4692      	mov	sl, r2
    4e40:	4482      	add	sl, r0
    4e42:	464a      	mov	r2, r9
    4e44:	2188      	movs	r1, #136	; 0x88
    4e46:	4654      	mov	r4, sl
    4e48:	5062      	str	r2, [r4, r1]
    4e4a:	22c4      	movs	r2, #196	; 0xc4
    4e4c:	0052      	lsls	r2, r2, #1
    4e4e:	4691      	mov	r9, r2
    4e50:	4481      	add	r9, r0
    4e52:	464a      	mov	r2, r9
    4e54:	3987      	subs	r1, #135	; 0x87
    4e56:	4099      	lsls	r1, r3
    4e58:	6812      	ldr	r2, [r2, #0]
    4e5a:	468b      	mov	fp, r1
    4e5c:	430a      	orrs	r2, r1
    4e5e:	4694      	mov	ip, r2
    4e60:	464a      	mov	r2, r9
    4e62:	4661      	mov	r1, ip
    4e64:	6011      	str	r1, [r2, #0]
    4e66:	2284      	movs	r2, #132	; 0x84
    4e68:	4641      	mov	r1, r8
    4e6a:	0052      	lsls	r2, r2, #1
    4e6c:	50a1      	str	r1, [r4, r2]
    4e6e:	2e02      	cmp	r6, #2
    4e70:	d1bb      	bne.n	4dea <__register_exitproc+0x3a>
    4e72:	0002      	movs	r2, r0
    4e74:	465c      	mov	r4, fp
    4e76:	328d      	adds	r2, #141	; 0x8d
    4e78:	32ff      	adds	r2, #255	; 0xff
    4e7a:	6811      	ldr	r1, [r2, #0]
    4e7c:	430c      	orrs	r4, r1
    4e7e:	6014      	str	r4, [r2, #0]
    4e80:	e7b3      	b.n	4dea <__register_exitproc+0x3a>
    4e82:	0020      	movs	r0, r4
    4e84:	304d      	adds	r0, #77	; 0x4d
    4e86:	30ff      	adds	r0, #255	; 0xff
    4e88:	50e0      	str	r0, [r4, r3]
    4e8a:	e7a7      	b.n	4ddc <__register_exitproc+0x2c>
    4e8c:	6828      	ldr	r0, [r5, #0]
    4e8e:	f7ff ff8d 	bl	4dac <__retarget_lock_release_recursive>
    4e92:	2001      	movs	r0, #1
    4e94:	4240      	negs	r0, r0
    4e96:	e7b1      	b.n	4dfc <__register_exitproc+0x4c>
    4e98:	20000440 	.word	0x20000440
    4e9c:	00005024 	.word	0x00005024
    4ea0:	00000000 	.word	0x00000000
    4ea4:	203a4449 	.word	0x203a4449
    4ea8:	09206425 	.word	0x09206425
    4eac:	74614420 	.word	0x74614420
    4eb0:	25203a61 	.word	0x25203a61
    4eb4:	00000a64 	.word	0x00000a64
    4eb8:	616c6544 	.word	0x616c6544
    4ebc:	09203a79 	.word	0x09203a79
    4ec0:	20642520 	.word	0x20642520
    4ec4:	000a736d 	.word	0x000a736d
    4ec8:	69636572 	.word	0x69636572
    4ecc:	43657665 	.word	0x43657665
    4ed0:	654d4e41 	.word	0x654d4e41
    4ed4:	67617373 	.word	0x67617373
    4ed8:	00000065 	.word	0x00000065
    4edc:	646e6573 	.word	0x646e6573
    4ee0:	70656542 	.word	0x70656542
    4ee4:	6e676953 	.word	0x6e676953
    4ee8:	00006c61 	.word	0x00006c61
    4eec:	000007ce 	.word	0x000007ce
    4ef0:	000007b2 	.word	0x000007b2
    4ef4:	000007d2 	.word	0x000007d2
    4ef8:	0000074a 	.word	0x0000074a
    4efc:	000007da 	.word	0x000007da
    4f00:	00000752 	.word	0x00000752
    4f04:	0000075a 	.word	0x0000075a
    4f08:	00000762 	.word	0x00000762
    4f0c:	0000076a 	.word	0x0000076a
    4f10:	00000772 	.word	0x00000772
    4f14:	0000077a 	.word	0x0000077a
    4f18:	00000782 	.word	0x00000782
    4f1c:	0000078a 	.word	0x0000078a
    4f20:	00000792 	.word	0x00000792
    4f24:	0000079a 	.word	0x0000079a
    4f28:	000007a2 	.word	0x000007a2
    4f2c:	000007aa 	.word	0x000007aa
    4f30:	00000ade 	.word	0x00000ade
    4f34:	00000afc 	.word	0x00000afc
    4f38:	00000b08 	.word	0x00000b08
    4f3c:	00000b14 	.word	0x00000b14
    4f40:	00000b20 	.word	0x00000b20
    4f44:	00000b2c 	.word	0x00000b2c
    4f48:	454c4449 	.word	0x454c4449
    4f4c:	00000000 	.word	0x00000000
    4f50:	09632509 	.word	0x09632509
    4f54:	25097525 	.word	0x25097525
    4f58:	75250975 	.word	0x75250975
    4f5c:	00000a0d 	.word	0x00000a0d
    4f60:	00002714 	.word	0x00002714
    4f64:	00002714 	.word	0x00002714
    4f68:	00002714 	.word	0x00002714
    4f6c:	0000268c 	.word	0x0000268c
    4f70:	00002756 	.word	0x00002756
    4f74:	00002770 	.word	0x00002770
    4f78:	00002714 	.word	0x00002714
    4f7c:	00002714 	.word	0x00002714
    4f80:	0000268c 	.word	0x0000268c
    4f84:	00002756 	.word	0x00002756
    4f88:	51726d54 	.word	0x51726d54
    4f8c:	00000000 	.word	0x00000000
    4f90:	20726d54 	.word	0x20726d54
    4f94:	00637653 	.word	0x00637653

00004f98 <ctrla.10005>:
    4f98:	0030000c                                ..0.

00004f9c <wrconfig.10007>:
    4f9c:	d201000b 00676f6c 0000386c 0000384e     ....log.l8..N8..
    4fac:	00003808 00003726 00003808 00003840     .8..&7...8..@8..
    4fbc:	00003808 00003726 0000384e 0000384e     .8..&7..N8..N8..
    4fcc:	00003840 00003726 0000371e 0000371e     @8..&7...7...7..
    4fdc:	0000371e 00003a84 000040cc 00003f8c     .7...:...@...?..
    4fec:	00003f8c 00003f88 000040a4 000040a4     .?...?...@...@..
    4ffc:	00004096 00003f88 000040a4 00004096     .@...?...@...@..
    500c:	000040a4 00003f88 000040ac 000040ac     .@...?...@...@..
    501c:	000040ac 000042b0                       .@...B..

00005024 <_global_impure_ptr>:
    5024:	20000018                                ... 

00005028 <_init>:
    5028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    502a:	46c0      	nop			; (mov r8, r8)
    502c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    502e:	bc08      	pop	{r3}
    5030:	469e      	mov	lr, r3
    5032:	4770      	bx	lr

00005034 <__init_array_start>:
    5034:	00004d4d 	.word	0x00004d4d

00005038 <__frame_dummy_init_array_entry>:
    5038:	000000dd                                ....

0000503c <_fini>:
    503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    503e:	46c0      	nop			; (mov r8, r8)
    5040:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5042:	bc08      	pop	{r3}
    5044:	469e      	mov	lr, r3
    5046:	4770      	bx	lr

00005048 <__fini_array_start>:
    5048:	000000b5 	.word	0x000000b5
